#!/bin/bash -e

readonly BASEPATH="$(dirname "$0")"
readonly KEY_FILE="service-account.json"
source "$BASEPATH/helpers"

usage() {
	echo "$0 [-h] [service-to-deploy] [..] [..]"
	exit 0
}

processCustomVals() {
	local resultedArgs=""
	local vars=$(env | awk -F '=' '{print $1}' | grep "^custom")

	for var in $vars
	do
		local varName=$(echo $var | sed 's/custom_//' | sed 's/_/./g')
		local varValue=$(eval "echo \$$var")
		resultedArgs="$resultedArgs --set $varName=$varValue"
	done

	echo "$resultedArgs"
}

activateServiceAccount() {
	local clusterName="$1"
	local zone="$2"
	local projectName="$3"

	[[ -z "$GOOGLE_SERVICE_ACCOUNT" ]] && err "Please set the service-account env var!"

	# To encrypt the service account file use: `cat service-account.json | base64 -w 0`
	msg "Decrypting the GOOGLE_SERVICE_ACCOUNT env variable"
	echo "$GOOGLE_SERVICE_ACCOUNT" | base64 -d > $KEY_FILE

	msg "Logging in with the service account to google cloud and generating Kubernetes config"
	gcloud config set container/cluster $clusterName
	gcloud config set compute/zone $zone
	gcloud config set project $projectName
	gcloud auth activate-service-account --key-file $KEY_FILE
	gcloud container clusters get-credentials $clusterName
}

waitForHelm() {
	while true; do
		status=$(kubectl get po -l app=helm -l name=tiller --show-all=false -o=custom-columns=STATUS:.status.phase --no-headers=true -nkube-system)

		msg "Helm status = $status"
		[ "$status" = "Running" ] && break

		msg "Sleeping 3 seconds ..."
		sleep 3

	done
}

genRedeployArgs() {
	local args=""

	for chart in $@; do
  	args="$args --set ${chart}.redeploy=true"
	done

	echo $args
}

# =---
# MAIN
# =---

check kubectl

[ "$1" == "-h" ] && usage

[ -z "$ENVIRONMENT" ] && echo "Please set ENVIRONMENT, example: export ENVIRONMENT=staging" && exit 1;
if [[ -n "$CF_REPO_NAME" && -n "$CF_REPO_OWNER" ]]; then
  RUNNING_ON_CF=1
  msg "Running on Codefresh Pipeline - pushing to kubernetes using cf-deploy-kubernetes.sh"
else
  msg "Running Locally - do not sops and helm dependencies"
fi


ENV_FILE=codefresh/env/${ENVIRONMENT}/export-envs
if [[ -f ${ENV_FILE} ]]; then
  echo "Loading ${ENV_FILE} "
  . ${ENV_FILE}
fi

[ -z "$APP_DNS" ] && echo "Please set APP_DNS, example: export APP_DNS=app-staging.codefresh.io" && exit 1;
[ -z "$CLUSTER_NAME" ] && echo "Please set CLUSTER_NAME, example: export CLUSTER_NAME=cf-staging" && exit 1;
[ -z "$PROJECT_NAME" ] && echo "Please set PROJECT_NAME, example: export PROJECT_NAME=savvy-badge-103912" && exit 1;


if [ -z "$ZONE" ]; then
  export ZONE=us-central1-a
fi

if [ -z "$NAMESPACE" ]; then
  export NAMESPACE=default
fi

if [[ $RUNNING_ON_CF == 1 ]]; then
    activateServiceAccount "$CLUSTER_NAME" "$ZONE" "$PROJECT_NAME"

    msg "Decrypting all secrets"
    ./sops.sh -d

    msg "Install Helm Tiller or upgrade, if needed"
    helm init --upgrade

    msg "Waiting for Helm to be ready ..."
    waitForHelm

    sleep 3
    msg "Helm version"
    helm version

    msg "Fetching latest helm dependencies"
    helm dependency update codefresh/
fi
msg "The following services are going to be deployed: "
echo "@$"

customVals=$(processCustomVals)
redeployArgs=$(genRedeployArgs $@)

if [[ -f codefresh/env/${ENVIRONMENT}/versions.yaml ]]; then
  versionsVals=" --values codefresh/env/${ENVIRONMENT}/versions.yaml "
fi


if [[ "${MAINTENANCE_MODE}" == "true" ]]; then
   maintenanceVals=" --values codefresh/maintanceValues.yaml "
fi

msg "Deploying helm package"
helmCmd=$(cat <<END
helm upgrade ${ENVIRONMENT} codefresh \
	--install \
	--force \
	--reset-values \
	--namespace ${NAMESPACE} \
	--set ingress.domain="${APP_DNS}" \
	--set ingress.enabled=true \
	--set global.appUrl="${APP_DNS}" \
	--values codefresh/values.yaml \
	--values codefresh/values-dec.yaml \
	--values codefresh/regsecret-dec.yaml \
	--values codefresh/env/${ENVIRONMENT}/values-dec.yaml \
	--values codefresh/env/${ENVIRONMENT}/values.yaml \
	$versionsVals \
	$customVals \
	$redeployArgs \
	$maintenanceVals
END
)

msg "Running helm upgrade command"
echo $helmCmd
eval "$helmCmd"

msg "Status of all the services: "
kubectl get pods

