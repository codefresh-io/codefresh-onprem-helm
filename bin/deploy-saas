#!/usr/bin/env bash

set -e


readonly BASEPATH="$(dirname "$0")"
readonly KEY_FILE="service-account.json"
source "$BASEPATH/helpers"

usage() {
	echo "$0 [-h] [service-to-deploy] [..] [..]"
	exit 0
}

processCustomVals() {
	local resultedArgs=""
	local vars=$(env | awk -F '=' '{print $1}' | grep "^custom")

	for var in $vars
	do
		local varName=$(echo $var | sed 's/custom_//' | sed 's/_/./g')
		local varValue=$(eval "echo \$$var")
		resultedArgs="$resultedArgs --set $varName=$varValue"
	done

	echo "$resultedArgs"
}

processCustomFlags() {
	local flags=""

	[ "$DEBUG_CHART" == "true" ] && flags="$flags --debug"
	[ "$DRY_RUN" == "true" ] && flags="$flags --dry-run"
	[ ! -z "$TIMEOUT" ] && flags="$flags --timeout $TIMEOUT"
	if [ "$WAIT" == "true" ] || [ -z "$WAIT" ]; then
		flags="$flags --wait"
	fi

	echo "$flags"
}

waitForHelm() {
	while true; do
#		status=$(kubectl get po -l app=helm -l name=tiller -o=custom-columns=STATUS:.status.phase --no-headers=true -nkube-system --field-selector status.phase=Running)
        status=$(kubectl -nkube-system  get po -l app=helm -l name=tiller -o=go-template --template='{{  range $i, $v := .items }}{{ if eq $v.status.phase "Running" }}{{ $v.status.phase }}{{ end }}{{ end }}')

		msg "Helm status = $status"
		[ "$status" == "Running" ] && break

		msg "Sleeping 3 seconds ..."
		sleep 3

	done
}

genRedeployArgs() {
	local args=""

	for chart in $@; do
  	args="$args --set ${chart}.redeploy=true"
	done

	echo $args
}

# =---
# MAIN
# =---

check kubectl

[ "$1" == "-h" ] && usage


env=$(yq --arg env "$ENVIRONMENT" -r '.environments[] | select(.name==$env)'  "map.yaml")
if [ -z "$env" ]
then
  echo "Environment $ENVIRONMENT not exist in map.yaml"
	exit 1
fi

echo "Found environment $ENVIRONMENT"
APP_DNS=$(echo $env | yq .dns)
echo "Setting APP_DNS=$APP_DNS"

echo "Available kubernetes contexts"
kubectl config get-contexts
KUBE_CONTEXT=$(echo $env | yq .cluster | sed s/\"//g )
NAMESPACE=$(echo $env | yq .namespace | sed s/\"//g )
USE_LOCK=$(echo $env | yq .useHelmLockFile)

echo "Using context $KUBE_CONTEXT and namespace $NAMESPACE"
kubectl config use-context $KUBE_CONTEXT

if [ "$USE_LOCK" == "true" ]
then
  echo "Helm lock file will be used to deploy"
else
  echo "Helm lock file will not be used to deploy"
fi

msg "Decrypting all secrets"
./sops.sh -d

msg "Init Helm"
helm init --client-only

msg "Waiting for Helm to be ready ..."
waitForHelm

sleep 3
msg "Helm version"
helm version

if [ "$USE_LOCK" == "true" ]
then
	msg "Fetching latest helm dependencies, according to requirements.yaml"
	helm dependency update codefresh
	msg "Fetching tested helm dependencies, according to requirements.lock"
	helm dependency build codefresh
else
	msg "Fetching latest helm dependencies, according to requirements.yaml"
	helm dependency update codefresh
fi
# print charts
ls -al codefresh/charts
msg "The following services are going to be deployed: "
echo "@$"

customVals=$(processCustomVals)
redeployArgs=$(genRedeployArgs $@)
customFlags=$(processCustomFlags)

if [[ -f codefresh/env/${ENVIRONMENT}/versions.yaml ]]; then
  versionsVals=" --values codefresh/env/${ENVIRONMENT}/versions.yaml "
fi


if [[ "${MAINTENANCE_MODE}" == "true" ]]; then
   maintenanceVals=" --values codefresh/maintenanceValues.yaml "
fi

msg "Deploying helm package"
helmCmd=$(cat <<END
helm upgrade ${ENVIRONMENT} codefresh \
	--install \
	$customFlags \
	--force \
	--reset-values \
	--namespace ${NAMESPACE} \
	--set ingress.domain="${APP_DNS}" \
	--set ingress.enabled=true \
	--set global.appUrl="${APP_DNS}" \
	--values codefresh/values.yaml \
	--values codefresh/values-dec.yaml \
	--values codefresh/regsecret-dec.yaml \
	--values codefresh/env/${ENVIRONMENT}/values-dec.yaml \
	--values codefresh/env/${ENVIRONMENT}/values.yaml \
	$versionsVals \
	$customVals \
	$redeployArgs \
	$maintenanceVals
END
)

msg "Running helm upgrade command"
echo $helmCmd
eval "$helmCmd"

msg "Status of all the services: "
kubectl get pods

