apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"default","name":"builder","uid":"fcd20658-6601-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"48905"}}
      pod.alpha.kubernetes.io/init-container-statuses: '[{"name":"register-dind-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-11T06:31:30Z","finishedAt":"2017-07-11T06:31:30Z","containerID":"docker://c4d89717a2553062f6ffe1996c81fc0c35b3b70f4cf9c635f5c040a55d8e1b1b"}},"lastState":{},"ready":true,"restartCount":0,"image":"appropriate/curl:latest","imageID":"docker://sha256:2674de4f5fac96cfac44b180655847161ec5cd5d8a5c799efb45890440c03be3","containerID":"docker://c4d89717a2553062f6ffe1996c81fc0c35b3b70f4cf9c635f5c040a55d8e1b1b"}]'
      pod.alpha.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} builder.${POD_NAMESPACE}.svc.cluster.local"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}}],"resources":{},"volumeMounts":[{"name":"builder-registration","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-02mjx","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
      pod.beta.kubernetes.io/init-container-statuses: '[{"name":"register-dind-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-11T06:31:30Z","finishedAt":"2017-07-11T06:31:30Z","containerID":"docker://c4d89717a2553062f6ffe1996c81fc0c35b3b70f4cf9c635f5c040a55d8e1b1b"}},"lastState":{},"ready":true,"restartCount":0,"image":"appropriate/curl:latest","imageID":"docker://sha256:2674de4f5fac96cfac44b180655847161ec5cd5d8a5c799efb45890440c03be3","containerID":"docker://c4d89717a2553062f6ffe1996c81fc0c35b3b70f4cf9c635f5c040a55d8e1b1b"}]'
      pod.beta.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} builder.${POD_NAMESPACE}.svc.cluster.local"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}}],"resources":{},"volumeMounts":[{"name":"builder-registration","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-02mjx","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
    creationTimestamp: 2017-07-11T06:27:18Z
    generateName: builder-
    labels:
      app: builder
      controller-revision-hash: builder-1505784037
    name: builder-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: builder
      uid: fcd20658-6601-11e7-977d-080027a5536f
    resourceVersion: "49812"
    selfLink: /api/v1/namespaces/default/pods/builder-0
    uid: fd030e78-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        rm -fv /var/run/docker.pid
        mkdir /var/run/codefresh
        mkdir -p /etc/docker/certs.d/registry.${POD_NAMESPACE}.svc:5000/
        cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/registry.${POD_NAMESPACE}.svc:5000/ca.crt
        dockerd
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker:17.05.0-ce-dind
      imagePullPolicy: Always
      name: builder
      ports:
      - containerPort: 1300
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /etc/docker/daemon.json
        name: dind-config
        readOnly: true
        subPath: daemon.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: builder-0
    initContainers:
    - command:
      - /bin/sh
      - -c
      - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME} builder.${POD_NAMESPACE}.svc.cluster.local
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: appropriate/curl:latest
      imagePullPolicy: Always
      name: register-dind-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/dind/register
        name: builder-registration
        subPath: register
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: builder
    terminationGracePeriodSeconds: 30
    volumes:
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: cf-certs
    - configMap:
        defaultMode: 420
        name: dind-config
      name: dind-config
    - configMap:
        defaultMode: 420
        name: builder-registration
      name: builder-registration
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:31:30Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:51Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:18Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://9e115e92846ac812228266851bb1cc24e1c68d9ab2e39e533a91d605fd55d277
      image: docker:17.05-dind
      imageID: docker://sha256:63b0daf021803454169fca62f03ee99744ddf1fd14db23f760b0b86856ae04de
      lastState: {}
      name: builder
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:35:50Z
    hostIP: 192.168.99.100
    initContainerStatuses:
    - containerID: docker://c4d89717a2553062f6ffe1996c81fc0c35b3b70f4cf9c635f5c040a55d8e1b1b
      image: appropriate/curl:latest
      imageID: docker://sha256:2674de4f5fac96cfac44b180655847161ec5cd5d8a5c799efb45890440c03be3
      lastState: {}
      name: register-dind-container
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://c4d89717a2553062f6ffe1996c81fc0c35b3b70f4cf9c635f5c040a55d8e1b1b
          exitCode: 0
          finishedAt: 2017-07-11T06:31:30Z
          reason: Completed
          startedAt: 2017-07-11T06:31:30Z
    phase: Running
    podIP: 10.10.0.27
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:18Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      forceRedeployUniqId: N/A
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"cf-tls-sign-1936251510","uid":"1d91a8a3-6603-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"49737"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:35:22Z
    generateName: cf-tls-sign-1936251510-
    labels:
      pod-template-hash: "1936251510"
      service: cf-tls-sign
    name: cf-tls-sign-1936251510-hx022
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cf-tls-sign-1936251510
      uid: 1d91a8a3-6603-11e7-977d-080027a5536f
    resourceVersion: "50824"
    selfLink: /api/v1/namespaces/default/pods/cf-tls-sign-1936251510-hx022
    uid: 1d99e0c5-6603-11e7-977d-080027a5536f
  spec:
    containers:
    - image: codefresh/cf-tls-sign:develop
      imagePullPolicy: IfNotPresent
      name: cf-tls-sign
      ports:
      - containerPort: 4999
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /cacerts/cf-ca.pem
        name: ca
        subPath: ca.pem
      - mountPath: /cacerts/cf-ca-key.pem
        name: ca-key
        subPath: cf-ca-key.pem
      - mountPath: /.secrets/sisma
        name: sisma
        subPath: sisma
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: docker-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: ca
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: ca-key
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: sisma
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:22Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:49:14Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:22Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0e22a17ca9961f0f8c88faa12951a44d33a3158495b53a19a5d102c54e90bb35
      image: codefresh/cf-tls-sign:develop
      imageID: docker://sha256:a930ae11380c27104bb96081564a64bbc2c9b86e374afd9ba31f6ee4b04e1b4f
      lastState: {}
      name: cf-tls-sign
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:49:14Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.35
    qosClass: BestEffort
    startTime: 2017-07-11T06:35:22Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      forceRedeployUniqId: "1499754839"
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"cfapi-633276497","uid":"ec562f14-6602-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"49567"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "podAntiAffinity": {
            "prefferedDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["cfapi", "prometheus"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname",
                "weight": 100
              }
            ]
          },
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:33:59Z
    generateName: cfapi-633276497-
    labels:
      app: cfapi
      app-version: develop
      pod-template-hash: "633276497"
    name: cfapi-633276497-4dzkb
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cfapi-633276497
      uid: ec562f14-6602-11e7-977d-080027a5536f
    resourceVersion: "50594"
    selfLink: /api/v1/namespaces/default/pods/cfapi-633276497-4dzkb
    uid: ec61be11-6602-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: GOOGLE_KUBE_SERVICE_URI
        value: http://cf-google-auth
      - name: BL_USERS
        valueFrom:
          configMapKeyRef:
            key: blacklist.users
            name: segment-reporter
      - name: ACTIVITY_LOG_URI
        value: http://activity-log
      - name: PAYMENTS_URI
        value: http://payments
      - name: APP_ENV
        valueFrom:
          configMapKeyRef:
            key: env
            name: app
      - name: EXTERNAL_URL
        valueFrom:
          configMapKeyRef:
            key: api.external-url
            name: app
      - name: NODE_ENV
        value: kubernetes
      - name: PORT
        value: "80"
      - name: INTERNAL_SERVER_PORT
        value: "40000"
      - name: PROTOCOL
        value: https
      - name: DOCKER_NODE_PUBLIC_DOMAIN
        value: cf-cd.com
      - name: DOCKER_NODE_CERT_PATH
        value: /etc/ssl/cf
      - name: CF_HOST_NAME
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: app
      - name: PROVIDERS_JSON_PATH
        value: /etc/admin/providers.json
      - name: RUNTIME_ENVS_JSON_PATH
        value: /etc/admin/runtimeEnvironments.json
      - name: TLS_SIGN_CLIENT_KEY
        valueFrom:
          secretKeyRef:
            key: tls-sign.client-key
            name: app
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: app
      - name: MONGO_URI
        valueFrom:
          secretKeyRef:
            key: mongo-uri
            name: app
      - name: CONSUL_HOST
        value: consul
      - name: QUEUE_SERVERS
        value: nats://queue:4222
      - name: FIREBASE_SECRET
        valueFrom:
          secretKeyRef:
            key: firebase-secret
            name: app
      - name: FIREBASE_URL
        valueFrom:
          configMapKeyRef:
            key: firebase-url
            name: app
      - name: GITHUB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: github-client-id
            name: app
      - name: GITHUB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: github-client-secret
            name: app
      - name: GITLAB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: gitlab-client-id
            name: app
      - name: GITLAB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: gitlab-client-secret
            name: app
      - name: OAUTH_ROUTER_CALLBACK
        valueFrom:
          configMapKeyRef:
            key: api.oauth-router-callback
            name: app
      - name: BITBUCKET_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: bitbucket-client-id
            name: app
      - name: BITBUCKET_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: bitbucket-client-secret
            name: app
      - name: API_SAFE_SECRET
        valueFrom:
          secretKeyRef:
            key: api.safe-secret
            name: app
      - name: SEGMENT_KEY
        valueFrom:
          secretKeyRef:
            key: segment-api-key
            name: app
      - name: GOOGLE_COMPUTE_ENGINE_PROJECT
        valueFrom:
          configMapKeyRef:
            key: api.google-compute-engine-project
            name: app
      - name: SLACK_INTERNAL
        valueFrom:
          configMapKeyRef:
            key: api.slack-internal
            name: app
      - name: SLACK_APP_SECRET
        valueFrom:
          secretKeyRef:
            key: api.slack-app-secret
            name: app
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: app
      - name: SLACK_APP_ID
        value: "4027524866.63606411014"
      - name: SEGMENT_ACTIVE
        valueFrom:
          configMapKeyRef:
            key: api.segment-active
            name: app
      - name: MAIL_ACTIVE
        value: "true"
      - name: LOGS_PATH
        value: /var/log/cf-api.log
      - name: LOGGER_LEVEL
        value: error
      - name: LOGGER_MORAN_ACTIVE
        value: "false"
      - name: PROGRESS_BUILDLOGS_BUCKETNAME
        valueFrom:
          configMapKeyRef:
            key: api.progress-buildLogs-bucketName
            name: app
      - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            key: internal-use-github-access-token
            name: app
      - name: REDIS_URL
        value: redis
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis.password
            name: app
      - name: RABBIT_URL
        value: amqp://rabbit
      - name: POSTGRES_HOST
        valueFrom:
          configMapKeyRef:
            key: postgres.host
            name: app
      - name: POSTGRES_DATABASE
        valueFrom:
          configMapKeyRef:
            key: postgres.database
            name: app
      - name: POSTGRES_USER
        valueFrom:
          configMapKeyRef:
            key: postgres.user
            name: app
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres.password
            name: app
      - name: CF_REGISTRY_DOMAIN
        valueFrom:
          configMapKeyRef:
            key: cfcr.domain
            name: app
      - name: CF_REGISTRY_API_KEY
        valueFrom:
          secretKeyRef:
            key: api.reg-auth-api-key
            name: app
      - name: CF_REGISTRY_ADMIN_TOKEN
        valueFrom:
          secretKeyRef:
            key: admin-token
            name: internal-registry
      image: r.cfcr.io/codefresh-inc/codefresh/cf-api:develop
      imagePullPolicy: Always
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              cat /etc/admin/hosts.added >> /etc/hosts
      name: cfapi
      ports:
      - containerPort: 80
        protocol: TCP
      - containerPort: 40000
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /api/ping
          port: 80
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /root/.aws/credentials
        name: aws-credentials
        subPath: aws-credentials
      - mountPath: /etc/admin/gce_creds.json
        name: cfapi-gce-creds
        subPath: gce_creds.json
      - mountPath: /etc/admin/providers.json
        name: providers
        subPath: providers.json
      - mountPath: /etc/admin/hosts.added
        name: etc-hosts
        subPath: hosts-app
      - mountPath: /etc/admin/runtimeEnvironments.json
        name: runtime-environments
        subPath: runtimeEnvironments.json
      - mountPath: /root/.kube/config
        name: node-clusters
        subPath: kube-config
      - mountPath: /etc/ssl/cf/
        name: cf-certs-client
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: docker-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 40
    volumes:
    - name: aws-credentials
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: cfapi-gce-creds
      secret:
        defaultMode: 420
        secretName: cf-certs
    - configMap:
        defaultMode: 420
        name: providers
      name: providers
    - configMap:
        defaultMode: 420
        name: etc-hosts
      name: etc-hosts
    - configMap:
        defaultMode: 420
        name: runtime-environments
      name: runtime-environments
    - name: node-clusters
      secret:
        defaultMode: 420
        secretName: node-clusters
    - name: cf-certs-client
      secret:
        defaultMode: 420
        secretName: cf-certs-client
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:34:00Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:46:15Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:34:00Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6737cc9565128c5320c4670eaa784648430a59415d53c87aad8f41c55b9c2762
      image: r.cfcr.io/codefresh-inc/codefresh/cf-api:develop
      imageID: docker://sha256:2688400feab472dac67dc744ba0ae07fbda176fe4a58c97598082c1ddf3a2769
      lastState: {}
      name: cfapi
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:46:10Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.33
    qosClass: BestEffort
    startTime: 2017-07-11T06:34:00Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      forceRedeployUniqId: "1499754909"
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"cfruntime-2435157033","uid":"16149a26-6603-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"49699"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "podAntiAffinity": {
            "prefferedDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["cfruntime", "prometheus"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname",
                "weight": 100
            }
            ]
          },
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:35:10Z
    generateName: cfruntime-2435157033-
    labels:
      app: cfruntime
      app-version: develop
      pod-template-hash: "2435157033"
    name: cfruntime-2435157033-wgcxc
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cfruntime-2435157033
      uid: 16149a26-6603-11e7-977d-080027a5536f
    resourceVersion: "50668"
    selfLink: /api/v1/namespaces/default/pods/cfruntime-2435157033-wgcxc
    uid: 161dff2e-6603-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: CF_DOCKER_IMAGES_TAG
        valueFrom:
          configMapKeyRef:
            key: runtime.cf-docker-images-tag
            name: app
      - name: RABBIT_URL
        value: amqp://rabbit
      - name: RUNTIME_GOOGLE_REGISTRY_PROJECT_NAME
        valueFrom:
          configMapKeyRef:
            key: runtime.google-registry-project-name
            name: app
      - name: RUNTIME_INTERNAL_REGISTRY_JSON
        value: /etc/admin/internal-registry.json
      - name: RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON
        value: /etc/admin/additional-internal-registries.json
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: app
      - name: FIREBASE_SECRET
        valueFrom:
          secretKeyRef:
            key: firebase-secret
            name: app
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: app
      - name: FIREBASE_URL
        valueFrom:
          configMapKeyRef:
            key: firebase-url
            name: app
      - name: DOCKER_CERT_PATH
        value: /etc/ssl/cf
      - name: QUEUE_SERVERS
        value: nats://queue:4222
      - name: CONSUL_HOST
        value: consul
      - name: NODE_ENV
        value: kubernetes
      - name: LOGGER_LEVEL
        value: error
      - name: LOGS_PATH
        value: /var/log/cf-runtime.log
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: app
      - name: DOCKER_PUSHER_IMAGE
        valueFrom:
          configMapKeyRef:
            key: runtime.images.dockerPusher
            name: app
      - name: DOCKER_PULLER_IMAGE
        valueFrom:
          configMapKeyRef:
            key: runtime.images.dockerPuller
            name: app
      - name: DOCKER_BUILDER_IMAGE
        valueFrom:
          configMapKeyRef:
            key: runtime.images.dockerBuilder
            name: app
      - name: CONTAINER_LOGGER_IMAGE
        valueFrom:
          configMapKeyRef:
            key: runtime.images.containerLogger
            name: app
      - name: GIT_CLONE_IMAGE
        valueFrom:
          configMapKeyRef:
            key: runtime.images.gitClone
            name: app
      - name: POSTGRES_HOST
        valueFrom:
          configMapKeyRef:
            key: postgres.host
            name: app
      - name: POSTGRES_DATABASE
        valueFrom:
          configMapKeyRef:
            key: postgres.database
            name: app
      - name: POSTGRES_USER
        valueFrom:
          configMapKeyRef:
            key: postgres.user
            name: app
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres.password
            name: app
      image: r.cfcr.io/codefresh-inc/codefresh/cf-runtime:develop
      imagePullPolicy: Always
      name: cfruntime
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/admin/internal-registry.json
        name: internal-registry
        subPath: internal-registry.json
      - mountPath: /etc/admin/additional-internal-registries.json
        name: additional-internal-registries
        subPath: additional-internal-registries.json
      - mountPath: /etc/admin/gce_creds.json
        name: cfruntime-gce-creds
        subPath: gce_creds.json
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /etc/ssl/cf/
        name: cf-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: docker-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 1800
    volumes:
    - hostPath:
        path: /var/run/docker.sock
      name: docker-socket
    - name: cfruntime-gce-creds
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: internal-registry
      secret:
        defaultMode: 420
        secretName: internal-registry
    - name: additional-internal-registries
      secret:
        defaultMode: 420
        secretName: internal-registry
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:10Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:47:10Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:10Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://7f3e31c322f55863ba4966f9e5966039632a642ea087643fba882d241ebe0165
      image: r.cfcr.io/codefresh-inc/codefresh/cf-runtime:develop
      imageID: docker://sha256:5469f26317374634280d75eaaf78f24ac860d36491126e630425b8e7876d99a4
      lastState: {}
      name: cfruntime
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:47:10Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.34
    qosClass: BestEffort
    startTime: 2017-07-11T06:35:10Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      forceRedeployUniqId: "1499754711"
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"cfui-255013095","uid":"9fb9c0a5-6602-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"49356"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "podAntiAffinity": {
            "prefferedDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["cfui", "prometheus"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname",
                "weight": 100
              }
            ]
          },
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:31:51Z
    generateName: cfui-255013095-
    labels:
      app: cfui
      app-version: develop
      pod-template-hash: "255013095"
    name: cfui-255013095-7pfl2
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cfui-255013095
      uid: 9fb9c0a5-6602-11e7-977d-080027a5536f
    resourceVersion: "50471"
    selfLink: /api/v1/namespaces/default/pods/cfui-255013095-7pfl2
    uid: 9fc033af-6602-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: NODE_ENV
        value: kubernetes
      - name: QUEUE_SERVERS
        value: nats://queue:4222
      - name: PORT
        value: "80"
      - name: ASSETS_OPTIMIZED
        value: "true"
      - name: CODEFRESH_API_URL
        valueFrom:
          configMapKeyRef:
            key: api.url
            name: app
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: app
      - name: SEGMENT_KEY
        valueFrom:
          secretKeyRef:
            key: segment-ui-key
            name: app
      - name: ROLLBAR_ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            key: rollbar-access-token
            name: app
      - name: STRIPE_PUBLIC_KEY
        valueFrom:
          secretKeyRef:
            key: stripe-public-key
            name: app
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: app
      - name: SLACK_REDIRECTURI
        valueFrom:
          configMapKeyRef:
            key: ui.slack-redirectUri
            name: app
      - name: NEW_USER_REDIRECT
        valueFrom:
          configMapKeyRef:
            key: ui.new-user-redirect
            name: app
      - name: WALKME
        valueFrom:
          configMapKeyRef:
            key: ui.walkme
            name: app
      - name: LAUNCH_DARKLY_KEY
        valueFrom:
          secretKeyRef:
            key: ui.launchdarkly-key
            name: app
      - name: SLACK_APP_ID
        value: "4027524866.63606411014"
      - name: LOGGER_LEVEL
        value: error
      - name: LOGGER_MORAN_ACTIVE
        value: "false"
      - name: LOGS_PATH
        value: /var/log/cf-ui.log
      - name: CF_REGISTRY_DOMAIN
        valueFrom:
          configMapKeyRef:
            key: cfcr.domain
            name: app
      image: r.cfcr.io/codefresh-inc/codefresh/cf-ui:develop
      imagePullPolicy: Always
      name: cfui
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: docker-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:31:51Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:44:42Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:31:51Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://afc2d695004ebc0b7b58d9b140c9c7112552c63fb9c7a54d3f21a632e1902a52
      image: r.cfcr.io/codefresh-inc/codefresh/cf-ui:develop
      imageID: docker://sha256:ecc9889d1bc186793f02ace04f0f219de8843cd2ec0a590a04433319e49006eb
      lastState: {}
      name: cfui
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:44:41Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.32
    qosClass: BestEffort
    startTime: 2017-07-11T06:31:51Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"default","name":"consul","uid":"f9858555-6601-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"48722"}}
      pod.alpha.kubernetes.io/initialized: "true"
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "podAntiAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["consul"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname"
              }
            ]
          },
          "nodeAffinity": {
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference":
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal"]
                    }
                  ]
                }
              }
            ]
          }
        }
    creationTimestamp: 2017-07-11T06:27:12Z
    generateName: consul-
    labels:
      app: consul
      controller-revision-hash: consul-740290085
    name: consul-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: consul
      uid: f9858555-6601-11e7-977d-080027a5536f
    resourceVersion: "48992"
    selfLink: /api/v1/namespaces/default/pods/consul-0
    uid: f98c8eb1-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -exc
      - |
        for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
          while true; do
            echo "--> Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
            ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${NAMESPACE}.svc.cluster.local > /dev/null && break
            sleep 1s
          done
        done
        PEERS=""
        PEERS_JSON="["
        echo "--> Creating the peers configuration"
        for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
          peerIp=$(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${NAMESPACE}.svc.cluster.local | awk -F'[()]' '/PING/{print $2}')
          PEERS="${PEERS}${PEERS:+ } -retry-join $peerIp"
          PEERS_JSON="${PEERS_JSON}\"$peerIp:8300\","
        done
        if [ -d /var/lib/consul/raft ]; then
          echo "--> Writing the peers.json file, used to manually specify raft peers"
          PEERS_JSON=$(echo "${PEERS_JSON}" | sed 's/,$/]/');
          echo "${PEERS_JSON}" >> /var/lib/consul/raft/peers.json;
        fi
        echo "--> Finished bootstrapping, running the server"
        exec /bin/consul agent \
          -data-dir=/var/lib/consul \
          -server \
          -ui \
          -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
          -advertise=${POD_IP} \
          -config-file=/etc/consul/server.json \
          -datacenter=dc1 \
          -domain=cluster.local \
          -node=${POD_NAME} \
          ${PEERS} \
          -bind=0.0.0.0 \
          -client=0.0.0.0
      env:
      - name: INITIAL_CLUSTER_SIZE
        value: "1"
      - name: STATEFULSET_NAME
        value: consul
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: consul:0.7.2
      imagePullPolicy: IfNotPresent
      name: consul
      ports:
      - containerPort: 8300
        protocol: TCP
      - containerPort: 8301
        protocol: TCP
      - containerPort: 8302
        protocol: TCP
      - containerPort: 8400
        protocol: TCP
      - containerPort: 8500
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/consul
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: consul-0
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: consul
    terminationGracePeriodSeconds: 10
    volumes:
    - configMap:
        defaultMode: 420
        name: consul-config
      name: config
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:12Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:37Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:12Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://10b7b4e477dd9d17d2ed62eff4e8bd6050ba7588c04a6b344906ccf92ccdad11
      image: consul:0.7.2
      imageID: docker://sha256:00db000d0551cd1ec931b0d7b8593268f332d813ab7c66ebb3e2bc6a4fed2913
      lastState: {}
      name: consul
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:27:37Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.24
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:12Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"mongo-939076655","uid":"fa36f5b0-6601-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"48751"}}
    creationTimestamp: 2017-07-11T06:27:13Z
    generateName: mongo-939076655-
    labels:
      pod-template-hash: "939076655"
      service: mongo
    name: mongo-939076655-qgnst
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mongo-939076655
      uid: fa36f5b0-6601-11e7-977d-080027a5536f
    resourceVersion: "49244"
    selfLink: /api/v1/namespaces/default/pods/mongo-939076655-qgnst
    uid: fa3882d9-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - args:
      - mongod
      - --smallfiles
      image: mongo:latest
      imagePullPolicy: Always
      name: mongo
      ports:
      - containerPort: 27017
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data/db
        name: mongo-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: mongo-data
      persistentVolumeClaim:
        claimName: mongo-data
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:13Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:30:48Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:13Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8683aef41c605e5b22af626e677af40e5da21fb4d3e1c0080451793cb41d9734
      image: mongo:latest
      imageID: docker://sha256:57c67caab3d8f9ed1fbffe159b10be52e0a0610122c16b3efea50a90ff435584
      lastState: {}
      name: mongo
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:30:48Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.25
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:13Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      forceRedeployUniqId: Sun Jul 9 10:15:14 IDT 2017
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"payments-1638088387","uid":"faa82f93-6601-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"48774"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "podAntiAffinity": {
            "prefferedDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["payments"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname"
              }
            ]
          },
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "In",
                      "values": ["internal"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:27:14Z
    generateName: payments-1638088387-
    labels:
      app: payments
      app-version: master
      pod-template-hash: "1638088387"
    name: payments-1638088387-837qj
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: payments-1638088387
      uid: faa82f93-6601-11e7-977d-080027a5536f
    resourceVersion: "49817"
    selfLink: /api/v1/namespaces/default/pods/payments-1638088387-837qj
    uid: faa954de-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: API_URL
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: app
      - name: API_PROTOCOL
        valueFrom:
          configMapKeyRef:
            key: protocol
            name: app
      - name: MONGO_URI
        valueFrom:
          secretKeyRef:
            key: mongo-uri
            name: payments
      - name: EVENTBUS_URI
        value: amqp://rabbit
      - name: POSTGRES_HOST
        valueFrom:
          configMapKeyRef:
            key: postgres.host
            name: app
      - name: POSTGRES_DATABASE
        valueFrom:
          configMapKeyRef:
            key: postgres.database
            name: app
      - name: POSTGRES_USER
        valueFrom:
          configMapKeyRef:
            key: postgres.user
            name: app
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres.password
            name: app
      - name: INTERNAL_API_URI
        value: http://cfapi:3000
      - name: STRIPE_SECRET_KEY
        valueFrom:
          secretKeyRef:
            key: stripe-secret-key
            name: payments
      - name: STRIPE_WEBHOOK_SIGN_SECRET
        valueFrom:
          secretKeyRef:
            key: stripe-webhook-sign-secret
            name: payments
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: app
      image: codefresh/payments:master
      imagePullPolicy: Always
      name: payments
      ports:
      - containerPort: 9000
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /api/ping
          port: 9000
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: docker-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 40
    volumes:
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:14Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:54Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:14Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c785db6c51cc7753143e81f5adf41833c899d76b4d614f65ea25d0a072680559
      image: codefresh/payments:master
      imageID: docker://sha256:2ca6207952fafb5b37763d1bfeb1e3a7e90c3327899c295c4927f57be5b8f593
      lastState: {}
      name: payments
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:31:15Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.26
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:14Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"postgres-3178229479","uid":"faff7273-6601-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"48793"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "nodeAffinity": {
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference":
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal"]
                    }
                  ]
                }
              }
            ]
          }
        }
    creationTimestamp: 2017-07-11T06:27:15Z
    generateName: postgres-3178229479-
    labels:
      app: postgres
      pod-template-hash: "3178229479"
    name: postgres-3178229479-mx6fr
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: postgres-3178229479
      uid: faff7273-6601-11e7-977d-080027a5536f
    resourceVersion: "49682"
    selfLink: /api/v1/namespaces/default/pods/postgres-3178229479-mx6fr
    uid: fb054a6a-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: PGDATA
        value: /var/lib/postgresql/data/pgdata
      - name: POSTGRES_USER
        valueFrom:
          configMapKeyRef:
            key: postgres.user
            name: app
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres.password
            name: app
      image: postgres:9.6
      imagePullPolicy: Always
      name: postgres
      ports:
      - containerPort: 5432
        name: postgres
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: postgres-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: postgres-data
      persistentVolumeClaim:
        claimName: postgres-data
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:15Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:01Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:15Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6ab7469844e31312c06505885d690c011e9e393174993e11ce03b1078e04ec48
      image: postgres:9.6
      imageID: docker://sha256:f8d91fbcfa35ae3c8ef05ab5056a154b7f7553b2be8698072d066c50c0d08aad
      lastState: {}
      name: postgres
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:35:01Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.30
    qosClass: Burstable
    startTime: 2017-07-11T06:27:15Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"default","name":"queue","uid":"f93f2323-6601-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"48711"}}
      pod.alpha.kubernetes.io/initialized: "true"
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "podAntiAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": [
              {
                "labelSelector": {
                  "matchExpressions": [
                    {
                      "key": "app",
                      "operator": "In",
                      "values": ["queue"]
                    }
                  ]
                },
                "topologyKey": "kubernetes.io/hostname"
              }
            ]
          },
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:27:12Z
    generateName: queue-
    labels:
      app: queue
      controller-revision-hash: queue-3349669827
    name: queue-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: queue
      uid: f93f2323-6601-11e7-977d-080027a5536f
    resourceVersion: "48771"
    selfLink: /api/v1/namespaces/default/pods/queue-0
    uid: f94c06a1-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - args:
      - --addr
      - 0.0.0.0
      - --port
      - "4222"
      - --http_port
      - "8222"
      - --cluster
      - nats://$(POD_IP):6222
      - --routes
      - nats://queue-0.queue:6222
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: nats:0.9.4
      imagePullPolicy: IfNotPresent
      name: nats
      ports:
      - containerPort: 8222
        protocol: TCP
      - containerPort: 6222
        protocol: TCP
      - containerPort: 4222
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: queue-0
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: queue
    terminationGracePeriodSeconds: 30
    volumes:
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:12Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:14Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:12Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://dc62516c9d1e6c1f7822ed80d0d51460f6bc0d44adcbf34be0fce07d149c9b28
      image: nats:0.9.4
      imageID: docker://sha256:1a94f6e42778e2f9009b3b8f0413fb70cd915e993a99fd74f065528f5fbb0bb7
      lastState: {}
      name: nats
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:27:13Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.23
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:12Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"rabbit-2557528624","uid":"fb840aac-6601-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"48824"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:27:15Z
    generateName: rabbit-2557528624-
    labels:
      app: rabbit
      pod-template-hash: "2557528624"
    name: rabbit-2557528624-2fh7f
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: rabbit-2557528624
      uid: fb840aac-6601-11e7-977d-080027a5536f
    resourceVersion: "49496"
    selfLink: /api/v1/namespaces/default/pods/rabbit-2557528624-2fh7f
    uid: fb8d6006-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - image: rabbitmq:3-management
      imagePullPolicy: Always
      livenessProbe:
        exec:
          command:
          - bash
          - -c
          - /usr/lib/rabbitmq/bin/rabbitmqctl node_health_check
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: rabbit
      ports:
      - containerPort: 5672
        name: rabbit
        protocol: TCP
      - containerPort: 15672
        name: rabbit-mng
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - bash
          - -c
          - /usr/lib/rabbitmq/bin/rabbitmqctl node_health_check
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rabbitmq
        name: rabbit-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: rabbit-data
      persistentVolumeClaim:
        claimName: rabbit-data
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:16Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:33:17Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:16Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://71a50731ef19bf5e49a44185501e9131d2b1fac827adf53077f690e0a3845273
      image: rabbitmq:3-management
      imageID: docker://sha256:b213515f0048cb17f491a08720b9f122c45100cc2a70fac7fdd7adb444ddbe82
      lastState: {}
      name: rabbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:33:03Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.29
    qosClass: Burstable
    startTime: 2017-07-11T06:27:16Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"redis-2859611542","uid":"fbf65ed1-6601-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"48853"}}
      scheduler.alpha.kubernetes.io/affinity: |
        {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "nodeType",
                      "operator": "NotIn",
                      "values": ["internal", "worker"]
                    }
                  ]
                }
              ]
            }
          }
        }
    creationTimestamp: 2017-07-11T06:27:16Z
    generateName: redis-2859611542-
    labels:
      app: redis
      pod-template-hash: "2859611542"
    name: redis-2859611542-mv667
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: redis-2859611542
      uid: fbf65ed1-6601-11e7-977d-080027a5536f
    resourceVersion: "49824"
    selfLink: /api/v1/namespaces/default/pods/redis-2859611542-mv667
    uid: fbf702a9-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis.password
            name: app
      image: bitnami/redis:3.2.8-r1
      imagePullPolicy: Always
      livenessProbe:
        exec:
          command:
          - redis-cli
          - ping
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: redis
      ports:
      - containerPort: 6379
        name: redis
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - redis-cli
          - ping
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/redis
        name: redis-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: redis-data
      persistentVolumeClaim:
        claimName: redis-data
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:16Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:56Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:16Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://51c6e09eb449041e1f7af001f512682e4066f494e7d61c018fcec24d087e4201
      image: bitnami/redis:3.2.8-r1
      imageID: docker://sha256:7192a99118ba557f03e34b36708004120eb1d805779eb5ac29ff543ba1630d8c
      lastState: {}
      name: redis
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:35:44Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.31
    qosClass: Burstable
    startTime: 2017-07-11T06:27:16Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"registry-1701487085","uid":"fc6ca610-6601-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"48877"}}
    creationTimestamp: 2017-07-11T06:27:17Z
    generateName: registry-1701487085-
    labels:
      app: registry
      component: main
      pod-template-hash: "1701487085"
    name: registry-1701487085-rshft
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: registry-1701487085
      uid: fc6ca610-6601-11e7-977d-080027a5536f
    resourceVersion: "49340"
    selfLink: /api/v1/namespaces/default/pods/registry-1701487085-rshft
    uid: fc6d6339-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: REGISTRY_HTTP_ADDR
        value: :5000
      - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
        value: /var/lib/registry
      - name: REGISTRY_HTTP_TLS_CERTIFICATE
        value: /etc/ssl/cf/cert.pem
      - name: REGISTRY_HTTP_TLS_KEY
        value: /etc/ssl/cf/key.pem
      image: registry:2.5
      imagePullPolicy: Always
      name: registry
      ports:
      - containerPort: 5000
        name: registry
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/registry
        name: image-store
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: image-store
      persistentVolumeClaim:
        claimName: docker-registry
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: cf-certs
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:20Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:31:44Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:20Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5e239d261ada212772ad4d6c80d37a3a0edcae6167b2ca4864a50bb73a38374d
      image: registry:2.5
      imageID: docker://sha256:182810e6ba8c469a88d639695b38cfb213aa0120f673a5f55c60ae052b395246
      lastState: {}
      name: registry
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:31:44Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.28
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:20Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"default","name":"runner","uid":"fd890b29-6601-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"48928"}}
      pod.alpha.kubernetes.io/init-container-statuses: '[{"name":"register-runner-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-11T06:31:27Z","finishedAt":"2017-07-11T06:31:27Z","containerID":"docker://ba561eddcf42f841515c8fd96a8a2f797a99e293963ed70c23505ffbc7867172"}},"lastState":{},"ready":true,"restartCount":0,"image":"appropriate/curl:latest","imageID":"docker://sha256:2674de4f5fac96cfac44b180655847161ec5cd5d8a5c799efb45890440c03be3","containerID":"docker://ba561eddcf42f841515c8fd96a8a2f797a99e293963ed70c23505ffbc7867172"}]'
      pod.alpha.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME}.runner.${POD_NAMESPACE}.svc
        codefresh.dev"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}}],"resources":{},"volumeMounts":[{"name":"runner-registration","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-02mjx","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
      pod.beta.kubernetes.io/init-container-statuses: '[{"name":"register-runner-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-11T06:31:27Z","finishedAt":"2017-07-11T06:31:27Z","containerID":"docker://ba561eddcf42f841515c8fd96a8a2f797a99e293963ed70c23505ffbc7867172"}},"lastState":{},"ready":true,"restartCount":0,"image":"appropriate/curl:latest","imageID":"docker://sha256:2674de4f5fac96cfac44b180655847161ec5cd5d8a5c799efb45890440c03be3","containerID":"docker://ba561eddcf42f841515c8fd96a8a2f797a99e293963ed70c23505ffbc7867172"}]'
      pod.beta.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME}.runner.${POD_NAMESPACE}.svc
        codefresh.dev"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}}],"resources":{},"volumeMounts":[{"name":"runner-registration","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-02mjx","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
    creationTimestamp: 2017-07-11T06:27:19Z
    generateName: runner-
    labels:
      app: runner
      controller-revision-hash: runner-3042324814
    name: runner-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: runner
      uid: fd890b29-6601-11e7-977d-080027a5536f
    resourceVersion: "49799"
    selfLink: /api/v1/namespaces/default/pods/runner-0
    uid: fd9a7438-6601-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        rm -fv /var/run/docker.pid
        mkdir /var/run/codefresh
        RUNTIME_LOCAL_REGISTRY_NAME="registry.${POD_NAMESPACE}.svc:5000"
        mkdir -p /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/
        cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/ca.crt
        dockerd
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker:17.05.0-ce-dind
      imagePullPolicy: Always
      name: dind
      ports:
      - containerPort: 1300
        hostPort: 1300
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /etc/docker/daemon.json
        name: dind-config
        readOnly: true
        subPath: daemon.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    hostNetwork: true
    hostname: runner-0
    initContainers:
    - command:
      - /bin/sh
      - -c
      - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME}.runner.${POD_NAMESPACE}.svc
        codefresh.dev
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: appropriate/curl:latest
      imagePullPolicy: Always
      name: register-runner-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/dind/register
        name: runner-registration
        subPath: register
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-02mjx
        readOnly: true
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: runner
    terminationGracePeriodSeconds: 30
    volumes:
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: cf-certs
    - configMap:
        defaultMode: 420
        name: dind-config
      name: dind-config
    - configMap:
        defaultMode: 420
        name: runner-registration
      name: runner-registration
    - name: default-token-02mjx
      secret:
        defaultMode: 420
        secretName: default-token-02mjx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:31:27Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:35:47Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-11T06:27:19Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a9fed98ad4e5c3780c9e0059106fb214771a7314f9c8216285926a4489fd5667
      image: docker:17.05-dind
      imageID: docker://sha256:63b0daf021803454169fca62f03ee99744ddf1fd14db23f760b0b86856ae04de
      lastState: {}
      name: dind
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-11T06:35:47Z
    hostIP: 192.168.99.100
    initContainerStatuses:
    - containerID: docker://ba561eddcf42f841515c8fd96a8a2f797a99e293963ed70c23505ffbc7867172
      image: appropriate/curl:latest
      imageID: docker://sha256:2674de4f5fac96cfac44b180655847161ec5cd5d8a5c799efb45890440c03be3
      lastState: {}
      name: register-runner-container
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://ba561eddcf42f841515c8fd96a8a2f797a99e293963ed70c23505ffbc7867172
          exitCode: 0
          finishedAt: 2017-07-11T06:31:27Z
          reason: Completed
          startedAt: 2017-07-11T06:31:27Z
    phase: Running
    podIP: 192.168.99.100
    qosClass: BestEffort
    startTime: 2017-07-11T06:27:19Z
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:18Z
    labels:
      app: builder
    name: builder
    namespace: default
    resourceVersion: "48919"
    selfLink: /api/v1/namespaces/default/services/builder
    uid: fd3bdc28-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: dind-port
      port: 1300
      protocol: TCP
      targetPort: 1300
    selector:
      app: builder
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:35:36Z
    labels:
      service: cf-tls-sign
    name: cf-tls-sign
    namespace: default
    resourceVersion: "49773"
    selfLink: /api/v1/namespaces/default/services/cf-tls-sign
    uid: 25bfdc62-6603-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.159
    ports:
    - name: "4999"
      port: 4999
      protocol: TCP
      targetPort: 4999
    selector:
      service: cf-tls-sign
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:34:35Z
    labels:
      app: cfapi
    name: cfapi
    namespace: default
    resourceVersion: "49640"
    selfLink: /api/v1/namespaces/default/services/cfapi
    uid: 01825800-6603-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.14
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 31037
      port: 80
      protocol: TCP
      targetPort: 80
    - name: internal-api
      nodePort: 32577
      port: 3000
      protocol: TCP
      targetPort: 40000
    selector:
      app: cfapi
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:33:20Z
    labels:
      app: cfui
    name: cfui
    namespace: default
    resourceVersion: "49506"
    selfLink: /api/v1/namespaces/default/services/cfui
    uid: d50c5b7f-6602-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.230
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 31833
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: cfui
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:12Z
    labels:
      app: consul
    name: consul
    namespace: default
    resourceVersion: "48731"
    selfLink: /api/v1/namespaces/default/services/consul
    uid: f9ac8d3a-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: "8500"
      port: 8500
      protocol: TCP
      targetPort: 8500
    - name: "8300"
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: "8301"
      port: 8301
      protocol: TCP
      targetPort: 8301
    - name: "8302"
      port: 8302
      protocol: TCP
      targetPort: 8302
    - name: "8400"
      port: 8400
      protocol: TCP
      targetPort: 8400
    selector:
      app: consul
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:46:26Z
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "8"
    selfLink: /api/v1/namespaces/default/services/kubernetes
    uid: 75c0c1c0-65a8-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.1
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
    sessionAffinity: ClientIP
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:27:13Z
    labels:
      service: mongo
    name: mongo
    namespace: default
    resourceVersion: "48746"
    selfLink: /api/v1/namespaces/default/services/mongo
    uid: fa078911-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.162
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: mongo
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:14Z
    labels:
      app: payments
    name: payments
    namespace: default
    resourceVersion: "48769"
    selfLink: /api/v1/namespaces/default/services/payments
    uid: fa6ea85c-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.142
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9000
    selector:
      app: payments
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:15Z
    labels:
      app: postgres
    name: postgres
    namespace: default
    resourceVersion: "48814"
    selfLink: /api/v1/namespaces/default/services/postgres
    uid: fb4f0c73-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.75
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: postgres
    selector:
      app: postgres
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:11Z
    labels:
      app: queue
    name: queue
    namespace: default
    resourceVersion: "48709"
    selfLink: /api/v1/namespaces/default/services/queue
    uid: f91da96b-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 4222
      protocol: TCP
      targetPort: 4222
    - name: http
      port: 8222
      protocol: TCP
      targetPort: 8222
    - name: clustering
      port: 6222
      protocol: TCP
      targetPort: 6222
    selector:
      app: queue
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:16Z
    labels:
      app: rabbit
    name: rabbit
    namespace: default
    resourceVersion: "48849"
    selfLink: /api/v1/namespaces/default/services/rabbit
    uid: fbd1a003-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.206
    ports:
    - name: rabbit
      port: 5672
      protocol: TCP
      targetPort: rabbit
    - name: rabbit-mng
      port: 15672
      protocol: TCP
      targetPort: rabbit
    selector:
      app: rabbit
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:17Z
    labels:
      app: redis
    name: redis
    namespace: default
    resourceVersion: "48871"
    selfLink: /api/v1/namespaces/default/services/redis
    uid: fc4a0362-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.27
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: redis
    selector:
      app: redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:17Z
    labels:
      app: registry
      component: main
    name: registry
    namespace: default
    resourceVersion: "48900"
    selfLink: /api/v1/namespaces/default/services/registry
    uid: fcb2dec5-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.105
    externalTrafficPolicy: Cluster
    ports:
    - name: registry
      nodePort: 30527
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app: registry
      component: main
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-11T06:27:19Z
    labels:
      app: runner
    name: runner
    namespace: default
    resourceVersion: "48941"
    selfLink: /api/v1/namespaces/default/services/runner
    uid: fde229a9-6601-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: dind-port
      port: 1300
      protocol: TCP
      targetPort: 1300
    selector:
      app: runner
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-11T06:27:18Z
    generation: 1
    labels:
      app: builder
    name: builder
    namespace: default
    resourceVersion: "49813"
    selfLink: /apis/apps/v1beta1/namespaces/default/statefulsets/builder
    uid: fcd20658-6601-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: builder
    serviceName: builder
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} builder.${POD_NAMESPACE}.svc.cluster.local"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}}],"resources":{},"volumeMounts":[{"name":"builder-registration","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
          pod.beta.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} builder.${POD_NAMESPACE}.svc.cluster.local"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}}],"resources":{},"volumeMounts":[{"name":"builder-registration","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
        creationTimestamp: null
        labels:
          app: builder
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - |
            rm -fv /var/run/docker.pid
            mkdir /var/run/codefresh
            mkdir -p /etc/docker/certs.d/registry.${POD_NAMESPACE}.svc:5000/
            cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/registry.${POD_NAMESPACE}.svc:5000/ca.crt
            dockerd
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker:17.05.0-ce-dind
          imagePullPolicy: Always
          name: builder
          ports:
          - containerPort: 1300
            protocol: TCP
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
          - mountPath: /etc/docker/daemon.json
            name: dind-config
            readOnly: true
            subPath: daemon.json
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/sh
          - -c
          - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME} builder.${POD_NAMESPACE}.svc.cluster.local
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: appropriate/curl:latest
          imagePullPolicy: Always
          name: register-dind-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/dind/register
            name: builder-registration
            subPath: register
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: cf-certs
        - configMap:
            defaultMode: 420
            name: dind-config
          name: dind-config
        - configMap:
            defaultMode: 420
            name: builder-registration
          name: builder-registration
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 1
    currentRevision: builder-1505784037
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: builder-1505784037
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-11T06:27:12Z
    generation: 1
    labels:
      app: consul
    name: consul
    namespace: default
    resourceVersion: "48994"
    selfLink: /apis/apps/v1beta1/namespaces/default/statefulsets/consul
    uid: f9858555-6601-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: consul
    serviceName: consul
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["consul"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                ]
              },
              "nodeAffinity": {
                "preferredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "weight": 100,
                    "preference":
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal"]
                        }
                      ]
                    }
                  }
                ]
              }
            }
        creationTimestamp: null
        labels:
          app: consul
      spec:
        containers:
        - command:
          - /bin/sh
          - -exc
          - |
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              while true; do
                echo "--> Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
                ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${NAMESPACE}.svc.cluster.local > /dev/null && break
                sleep 1s
              done
            done
            PEERS=""
            PEERS_JSON="["
            echo "--> Creating the peers configuration"
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              peerIp=$(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${NAMESPACE}.svc.cluster.local | awk -F'[()]' '/PING/{print $2}')
              PEERS="${PEERS}${PEERS:+ } -retry-join $peerIp"
              PEERS_JSON="${PEERS_JSON}\"$peerIp:8300\","
            done
            if [ -d /var/lib/consul/raft ]; then
              echo "--> Writing the peers.json file, used to manually specify raft peers"
              PEERS_JSON=$(echo "${PEERS_JSON}" | sed 's/,$/]/');
              echo "${PEERS_JSON}" >> /var/lib/consul/raft/peers.json;
            fi
            echo "--> Finished bootstrapping, running the server"
            exec /bin/consul agent \
              -data-dir=/var/lib/consul \
              -server \
              -ui \
              -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
              -advertise=${POD_IP} \
              -config-file=/etc/consul/server.json \
              -datacenter=dc1 \
              -domain=cluster.local \
              -node=${POD_NAME} \
              ${PEERS} \
              -bind=0.0.0.0 \
              -client=0.0.0.0
          env:
          - name: INITIAL_CLUSTER_SIZE
            value: "1"
          - name: STATEFULSET_NAME
            value: consul
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: consul:0.7.2
          imagePullPolicy: IfNotPresent
          name: consul
          ports:
          - containerPort: 8300
            protocol: TCP
          - containerPort: 8301
            protocol: TCP
          - containerPort: 8302
            protocol: TCP
          - containerPort: 8400
            protocol: TCP
          - containerPort: 8500
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/consul
            name: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 10
        volumes:
        - configMap:
            defaultMode: 420
            name: consul-config
          name: config
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 1
    currentRevision: consul-740290085
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: consul-740290085
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-11T06:27:12Z
    generation: 1
    labels:
      app: queue
    name: queue
    namespace: default
    resourceVersion: "48776"
    selfLink: /apis/apps/v1beta1/namespaces/default/statefulsets/queue
    uid: f93f2323-6601-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: queue
    serviceName: queue
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["queue"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: queue
      spec:
        containers:
        - args:
          - --addr
          - 0.0.0.0
          - --port
          - "4222"
          - --http_port
          - "8222"
          - --cluster
          - nats://$(POD_IP):6222
          - --routes
          - nats://queue-0.queue:6222
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: nats:0.9.4
          imagePullPolicy: IfNotPresent
          name: nats
          ports:
          - containerPort: 8222
            protocol: TCP
          - containerPort: 6222
            protocol: TCP
          - containerPort: 4222
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 1
    currentRevision: queue-3349669827
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: queue-3349669827
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-11T06:27:19Z
    generation: 1
    labels:
      app: runner
    name: runner
    namespace: default
    resourceVersion: "49801"
    selfLink: /apis/apps/v1beta1/namespaces/default/statefulsets/runner
    uid: fd890b29-6601-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: runner
    serviceName: runner
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME}.runner.${POD_NAMESPACE}.svc
            codefresh.dev"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}}],"resources":{},"volumeMounts":[{"name":"runner-registration","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
          pod.beta.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"appropriate/curl:latest","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME}.runner.${POD_NAMESPACE}.svc
            codefresh.dev"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}}],"resources":{},"volumeMounts":[{"name":"runner-registration","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always"}]'
        creationTimestamp: null
        labels:
          app: runner
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - |
            rm -fv /var/run/docker.pid
            mkdir /var/run/codefresh
            RUNTIME_LOCAL_REGISTRY_NAME="registry.${POD_NAMESPACE}.svc:5000"
            mkdir -p /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/
            cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/ca.crt
            dockerd
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker:17.05.0-ce-dind
          imagePullPolicy: Always
          name: dind
          ports:
          - containerPort: 1300
            hostPort: 1300
            protocol: TCP
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
          - mountPath: /etc/docker/daemon.json
            name: dind-config
            readOnly: true
            subPath: daemon.json
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        initContainers:
        - command:
          - /bin/sh
          - -c
          - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME}.runner.${POD_NAMESPACE}.svc
            codefresh.dev
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: appropriate/curl:latest
          imagePullPolicy: Always
          name: register-runner-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/dind/register
            name: runner-registration
            subPath: register
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: cf-certs
        - configMap:
            defaultMode: 420
            name: dind-config
          name: dind-config
        - configMap:
            defaultMode: 420
            name: runner-registration
          name: runner-registration
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 1
    currentRevision: runner-3042324814
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: runner-3042324814
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:35:22Z
    generation: 1
    labels:
      service: cf-tls-sign
    name: cf-tls-sign
    namespace: default
    resourceVersion: "50827"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/cf-tls-sign
    uid: 1d8db02e-6603-11e7-977d-080027a5536f
  spec:
    replicas: 1
    revisionHistoryLimit: 50
    selector:
      matchLabels:
        service: cf-tls-sign
    strategy:
      rollingUpdate:
        maxSurge: 50%
        maxUnavailable: 50%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          forceRedeployUniqId: N/A
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          service: cf-tls-sign
      spec:
        containers:
        - image: codefresh/cf-tls-sign:develop
          imagePullPolicy: IfNotPresent
          name: cf-tls-sign
          ports:
          - containerPort: 4999
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /cacerts/cf-ca.pem
            name: ca
            subPath: ca.pem
          - mountPath: /cacerts/cf-ca-key.pem
            name: ca-key
            subPath: cf-ca-key.pem
          - mountPath: /.secrets/sisma
            name: sisma
            subPath: sisma
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ca
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: ca-key
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: sisma
          secret:
            defaultMode: 420
            secretName: cf-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:49:14Z
      lastUpdateTime: 2017-07-11T06:49:14Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=-
    creationTimestamp: 2017-07-11T06:33:59Z
    generation: 1
    labels:
      app: cfapi
      app-version: develop
    name: cfapi
    namespace: default
    resourceVersion: "50597"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/cfapi
    uid: ec4e2008-6602-11e7-977d-080027a5536f
  spec:
    replicas: 1
    revisionHistoryLimit: 50
    selector:
      matchLabels:
        app: cfapi
    strategy:
      rollingUpdate:
        maxSurge: 50%
        maxUnavailable: 50%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          forceRedeployUniqId: "1499754839"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["cfapi", "prometheus"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname",
                    "weight": 100
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: cfapi
          app-version: develop
      spec:
        containers:
        - env:
          - name: GOOGLE_KUBE_SERVICE_URI
            value: http://cf-google-auth
          - name: BL_USERS
            valueFrom:
              configMapKeyRef:
                key: blacklist.users
                name: segment-reporter
          - name: ACTIVITY_LOG_URI
            value: http://activity-log
          - name: PAYMENTS_URI
            value: http://payments
          - name: APP_ENV
            valueFrom:
              configMapKeyRef:
                key: env
                name: app
          - name: EXTERNAL_URL
            valueFrom:
              configMapKeyRef:
                key: api.external-url
                name: app
          - name: NODE_ENV
            value: kubernetes
          - name: PORT
            value: "80"
          - name: INTERNAL_SERVER_PORT
            value: "40000"
          - name: PROTOCOL
            value: https
          - name: DOCKER_NODE_PUBLIC_DOMAIN
            value: cf-cd.com
          - name: DOCKER_NODE_CERT_PATH
            value: /etc/ssl/cf
          - name: CF_HOST_NAME
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: app
          - name: PROVIDERS_JSON_PATH
            value: /etc/admin/providers.json
          - name: RUNTIME_ENVS_JSON_PATH
            value: /etc/admin/runtimeEnvironments.json
          - name: TLS_SIGN_CLIENT_KEY
            valueFrom:
              secretKeyRef:
                key: tls-sign.client-key
                name: app
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          - name: MONGO_URI
            valueFrom:
              secretKeyRef:
                key: mongo-uri
                name: app
          - name: CONSUL_HOST
            value: consul
          - name: QUEUE_SERVERS
            value: nats://queue:4222
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: app
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: app
          - name: GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: github-client-id
                name: app
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: github-client-secret
                name: app
          - name: GITLAB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: gitlab-client-id
                name: app
          - name: GITLAB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: gitlab-client-secret
                name: app
          - name: OAUTH_ROUTER_CALLBACK
            valueFrom:
              configMapKeyRef:
                key: api.oauth-router-callback
                name: app
          - name: BITBUCKET_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-id
                name: app
          - name: BITBUCKET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-secret
                name: app
          - name: API_SAFE_SECRET
            valueFrom:
              secretKeyRef:
                key: api.safe-secret
                name: app
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-api-key
                name: app
          - name: GOOGLE_COMPUTE_ENGINE_PROJECT
            valueFrom:
              configMapKeyRef:
                key: api.google-compute-engine-project
                name: app
          - name: SLACK_INTERNAL
            valueFrom:
              configMapKeyRef:
                key: api.slack-internal
                name: app
          - name: SLACK_APP_SECRET
            valueFrom:
              secretKeyRef:
                key: api.slack-app-secret
                name: app
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: SLACK_APP_ID
            value: "4027524866.63606411014"
          - name: SEGMENT_ACTIVE
            valueFrom:
              configMapKeyRef:
                key: api.segment-active
                name: app
          - name: MAIL_ACTIVE
            value: "true"
          - name: LOGS_PATH
            value: /var/log/cf-api.log
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: PROGRESS_BUILDLOGS_BUCKETNAME
            valueFrom:
              configMapKeyRef:
                key: api.progress-buildLogs-bucketName
                name: app
          - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                key: internal-use-github-access-token
                name: app
          - name: REDIS_URL
            value: redis
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis.password
                name: app
          - name: RABBIT_URL
            value: amqp://rabbit
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: postgres.host
                name: app
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres.database
                name: app
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          - name: CF_REGISTRY_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: cfcr.domain
                name: app
          - name: CF_REGISTRY_API_KEY
            valueFrom:
              secretKeyRef:
                key: api.reg-auth-api-key
                name: app
          - name: CF_REGISTRY_ADMIN_TOKEN
            valueFrom:
              secretKeyRef:
                key: admin-token
                name: internal-registry
          image: r.cfcr.io/codefresh-inc/codefresh/cf-api:develop
          imagePullPolicy: Always
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/bash
                - -c
                - |
                  cat /etc/admin/hosts.added >> /etc/hosts
          name: cfapi
          ports:
          - containerPort: 80
            protocol: TCP
          - containerPort: 40000
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/ping
              port: 80
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /root/.aws/credentials
            name: aws-credentials
            subPath: aws-credentials
          - mountPath: /etc/admin/gce_creds.json
            name: cfapi-gce-creds
            subPath: gce_creds.json
          - mountPath: /etc/admin/providers.json
            name: providers
            subPath: providers.json
          - mountPath: /etc/admin/hosts.added
            name: etc-hosts
            subPath: hosts-app
          - mountPath: /etc/admin/runtimeEnvironments.json
            name: runtime-environments
            subPath: runtimeEnvironments.json
          - mountPath: /root/.kube/config
            name: node-clusters
            subPath: kube-config
          - mountPath: /etc/ssl/cf/
            name: cf-certs-client
            readOnly: true
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 40
        volumes:
        - name: aws-credentials
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: cfapi-gce-creds
          secret:
            defaultMode: 420
            secretName: cf-certs
        - configMap:
            defaultMode: 420
            name: providers
          name: providers
        - configMap:
            defaultMode: 420
            name: etc-hosts
          name: etc-hosts
        - configMap:
            defaultMode: 420
            name: runtime-environments
          name: runtime-environments
        - name: node-clusters
          secret:
            defaultMode: 420
            secretName: node-clusters
        - name: cf-certs-client
          secret:
            defaultMode: 420
            secretName: cf-certs-client
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:46:15Z
      lastUpdateTime: 2017-07-11T06:46:15Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      io.codefresh.owner: codefresh
      kubernetes.io/change-cause: kubectl create --filename=-
    creationTimestamp: 2017-07-11T06:35:09Z
    generation: 1
    labels:
      app: cfruntime
      app-version: develop
    name: cfruntime
    namespace: default
    resourceVersion: "50671"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/cfruntime
    uid: 161098a0-6603-11e7-977d-080027a5536f
  spec:
    replicas: 1
    revisionHistoryLimit: 50
    selector:
      matchLabels:
        app: cfruntime
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          forceRedeployUniqId: "1499754909"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["cfruntime", "prometheus"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname",
                    "weight": 100
                }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: cfruntime
          app-version: develop
      spec:
        containers:
        - env:
          - name: CF_DOCKER_IMAGES_TAG
            valueFrom:
              configMapKeyRef:
                key: runtime.cf-docker-images-tag
                name: app
          - name: RABBIT_URL
            value: amqp://rabbit
          - name: RUNTIME_GOOGLE_REGISTRY_PROJECT_NAME
            valueFrom:
              configMapKeyRef:
                key: runtime.google-registry-project-name
                name: app
          - name: RUNTIME_INTERNAL_REGISTRY_JSON
            value: /etc/admin/internal-registry.json
          - name: RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON
            value: /etc/admin/additional-internal-registries.json
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: app
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: app
          - name: DOCKER_CERT_PATH
            value: /etc/ssl/cf
          - name: QUEUE_SERVERS
            value: nats://queue:4222
          - name: CONSUL_HOST
            value: consul
          - name: NODE_ENV
            value: kubernetes
          - name: LOGGER_LEVEL
            value: error
          - name: LOGS_PATH
            value: /var/log/cf-runtime.log
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: DOCKER_PUSHER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.dockerPusher
                name: app
          - name: DOCKER_PULLER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.dockerPuller
                name: app
          - name: DOCKER_BUILDER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.dockerBuilder
                name: app
          - name: CONTAINER_LOGGER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.containerLogger
                name: app
          - name: GIT_CLONE_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.gitClone
                name: app
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: postgres.host
                name: app
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres.database
                name: app
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          image: r.cfcr.io/codefresh-inc/codefresh/cf-runtime:develop
          imagePullPolicy: Always
          name: cfruntime
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/admin/internal-registry.json
            name: internal-registry
            subPath: internal-registry.json
          - mountPath: /etc/admin/additional-internal-registries.json
            name: additional-internal-registries
            subPath: additional-internal-registries.json
          - mountPath: /etc/admin/gce_creds.json
            name: cfruntime-gce-creds
            subPath: gce_creds.json
          - mountPath: /var/run/docker.sock
            name: docker-socket
          - mountPath: /etc/ssl/cf/
            name: cf-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 1800
        volumes:
        - hostPath:
            path: /var/run/docker.sock
          name: docker-socket
        - name: cfruntime-gce-creds
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: internal-registry
          secret:
            defaultMode: 420
            secretName: internal-registry
        - name: additional-internal-registries
          secret:
            defaultMode: 420
            secretName: internal-registry
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:47:10Z
      lastUpdateTime: 2017-07-11T06:47:10Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=-
    creationTimestamp: 2017-07-11T06:31:51Z
    generation: 1
    labels:
      app: cfui
      app-version: develop
    name: cfui
    namespace: default
    resourceVersion: "50475"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/cfui
    uid: 9fb21c95-6602-11e7-977d-080027a5536f
  spec:
    replicas: 1
    revisionHistoryLimit: 50
    selector:
      matchLabels:
        app: cfui
    strategy:
      rollingUpdate:
        maxSurge: 50%
        maxUnavailable: 50%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          forceRedeployUniqId: "1499754711"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["cfui", "prometheus"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname",
                    "weight": 100
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: cfui
          app-version: develop
      spec:
        containers:
        - env:
          - name: NODE_ENV
            value: kubernetes
          - name: QUEUE_SERVERS
            value: nats://queue:4222
          - name: PORT
            value: "80"
          - name: ASSETS_OPTIMIZED
            value: "true"
          - name: CODEFRESH_API_URL
            valueFrom:
              configMapKeyRef:
                key: api.url
                name: app
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-ui-key
                name: app
          - name: ROLLBAR_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                key: rollbar-access-token
                name: app
          - name: STRIPE_PUBLIC_KEY
            valueFrom:
              secretKeyRef:
                key: stripe-public-key
                name: app
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: SLACK_REDIRECTURI
            valueFrom:
              configMapKeyRef:
                key: ui.slack-redirectUri
                name: app
          - name: NEW_USER_REDIRECT
            valueFrom:
              configMapKeyRef:
                key: ui.new-user-redirect
                name: app
          - name: WALKME
            valueFrom:
              configMapKeyRef:
                key: ui.walkme
                name: app
          - name: LAUNCH_DARKLY_KEY
            valueFrom:
              secretKeyRef:
                key: ui.launchdarkly-key
                name: app
          - name: SLACK_APP_ID
            value: "4027524866.63606411014"
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: LOGS_PATH
            value: /var/log/cf-ui.log
          - name: CF_REGISTRY_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: cfcr.domain
                name: app
          image: r.cfcr.io/codefresh-inc/codefresh/cf-ui:develop
          imagePullPolicy: Always
          name: cfui
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:44:42Z
      lastUpdateTime: 2017-07-11T06:44:42Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:27:13Z
    generation: 1
    labels:
      service: mongo
    name: mongo
    namespace: default
    resourceVersion: "49247"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/mongo
    uid: fa31f48c-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        service: mongo
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          service: mongo
      spec:
        containers:
        - args:
          - mongod
          - --smallfiles
          image: mongo:latest
          imagePullPolicy: Always
          name: mongo
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data/db
            name: mongo-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:27:13Z
      lastUpdateTime: 2017-07-11T06:27:13Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=assets/payments/payments-deployment-dev.yaml
    creationTimestamp: 2017-07-11T06:27:14Z
    generation: 1
    labels:
      app: payments
      app-version: master
    name: payments
    namespace: default
    resourceVersion: "49820"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/payments
    uid: fa966df5-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    revisionHistoryLimit: 50
    selector:
      matchLabels:
        app: payments
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          forceRedeployUniqId: Sun Jul 9 10:15:14 IDT 2017
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["payments"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "In",
                          "values": ["internal"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: payments
          app-version: master
      spec:
        containers:
        - env:
          - name: API_URL
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: app
          - name: API_PROTOCOL
            valueFrom:
              configMapKeyRef:
                key: protocol
                name: app
          - name: MONGO_URI
            valueFrom:
              secretKeyRef:
                key: mongo-uri
                name: payments
          - name: EVENTBUS_URI
            value: amqp://rabbit
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: postgres.host
                name: app
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres.database
                name: app
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          - name: INTERNAL_API_URI
            value: http://cfapi:3000
          - name: STRIPE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: stripe-secret-key
                name: payments
          - name: STRIPE_WEBHOOK_SIGN_SECRET
            valueFrom:
              secretKeyRef:
                key: stripe-webhook-sign-secret
                name: payments
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          image: codefresh/payments:master
          imagePullPolicy: Always
          name: payments
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/ping
              port: 9000
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 40
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:35:54Z
      lastUpdateTime: 2017-07-11T06:35:54Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:14Z
    generation: 1
    labels:
      app: postgres
    name: postgres
    namespace: default
    resourceVersion: "49685"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/postgres
    uid: fadcd964-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: postgres
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "preferredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "weight": 100,
                    "preference":
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal"]
                        }
                      ]
                    }
                  }
                ]
              }
            }
        creationTimestamp: null
        labels:
          app: postgres
      spec:
        containers:
        - env:
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          image: postgres:9.6
          imagePullPolicy: Always
          name: postgres
          ports:
          - containerPort: 5432
            name: postgres
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:27:15Z
      lastUpdateTime: 2017-07-11T06:27:15Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:15Z
    generation: 1
    labels:
      app: rabbit
    name: rabbit
    namespace: default
    resourceVersion: "49499"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/rabbit
    uid: fb7ed965-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: rabbit
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: rabbit
      spec:
        containers:
        - image: rabbitmq:3-management
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - bash
              - -c
              - /usr/lib/rabbitmq/bin/rabbitmqctl node_health_check
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: rabbit
          ports:
          - containerPort: 5672
            name: rabbit
            protocol: TCP
          - containerPort: 15672
            name: rabbit-mng
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - /usr/lib/rabbitmq/bin/rabbitmqctl node_health_check
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: rabbit-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: rabbit-data
          persistentVolumeClaim:
            claimName: rabbit-data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:27:16Z
      lastUpdateTime: 2017-07-11T06:27:16Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:16Z
    generation: 1
    labels:
      app: redis
    name: redis
    namespace: default
    resourceVersion: "49827"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/redis
    uid: fbf525a8-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: redis
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: redis
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis.password
                name: app
          image: bitnami/redis:3.2.8-r1
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/redis
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:27:16Z
      lastUpdateTime: 2017-07-11T06:27:16Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:17Z
    generation: 1
    labels:
      app: registry
      component: main
    name: registry
    namespace: default
    resourceVersion: "49344"
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/registry
    uid: fc6b69ef-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: registry
        component: main
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: registry
          component: main
      spec:
        containers:
        - env:
          - name: REGISTRY_HTTP_ADDR
            value: :5000
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /var/lib/registry
          - name: REGISTRY_HTTP_TLS_CERTIFICATE
            value: /etc/ssl/cf/cert.pem
          - name: REGISTRY_HTTP_TLS_KEY
            value: /etc/ssl/cf/key.pem
          image: registry:2.5
          imagePullPolicy: Always
          name: registry
          ports:
          - containerPort: 5000
            name: registry
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/registry
            name: image-store
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: image-store
          persistentVolumeClaim:
            claimName: docker-registry
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: cf-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-11T06:27:17Z
      lastUpdateTime: 2017-07-11T06:27:17Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:35:22Z
    generation: 1
    labels:
      pod-template-hash: "1936251510"
      service: cf-tls-sign
    name: cf-tls-sign-1936251510
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cf-tls-sign
      uid: 1d8db02e-6603-11e7-977d-080027a5536f
    resourceVersion: "50825"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/cf-tls-sign-1936251510
    uid: 1d91a8a3-6603-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        pod-template-hash: "1936251510"
        service: cf-tls-sign
    template:
      metadata:
        annotations:
          forceRedeployUniqId: N/A
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          pod-template-hash: "1936251510"
          service: cf-tls-sign
      spec:
        containers:
        - image: codefresh/cf-tls-sign:develop
          imagePullPolicy: IfNotPresent
          name: cf-tls-sign
          ports:
          - containerPort: 4999
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /cacerts/cf-ca.pem
            name: ca
            subPath: ca.pem
          - mountPath: /cacerts/cf-ca-key.pem
            name: ca-key
            subPath: cf-ca-key.pem
          - mountPath: /.secrets/sisma
            name: sisma
            subPath: sisma
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ca
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: ca-key
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: sisma
          secret:
            defaultMode: 420
            secretName: cf-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=-
    creationTimestamp: 2017-07-11T06:33:59Z
    generation: 1
    labels:
      app: cfapi
      app-version: develop
      pod-template-hash: "633276497"
    name: cfapi-633276497
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cfapi
      uid: ec4e2008-6602-11e7-977d-080027a5536f
    resourceVersion: "50596"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/cfapi-633276497
    uid: ec562f14-6602-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cfapi
        pod-template-hash: "633276497"
    template:
      metadata:
        annotations:
          forceRedeployUniqId: "1499754839"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["cfapi", "prometheus"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname",
                    "weight": 100
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: cfapi
          app-version: develop
          pod-template-hash: "633276497"
      spec:
        containers:
        - env:
          - name: GOOGLE_KUBE_SERVICE_URI
            value: http://cf-google-auth
          - name: BL_USERS
            valueFrom:
              configMapKeyRef:
                key: blacklist.users
                name: segment-reporter
          - name: ACTIVITY_LOG_URI
            value: http://activity-log
          - name: PAYMENTS_URI
            value: http://payments
          - name: APP_ENV
            valueFrom:
              configMapKeyRef:
                key: env
                name: app
          - name: EXTERNAL_URL
            valueFrom:
              configMapKeyRef:
                key: api.external-url
                name: app
          - name: NODE_ENV
            value: kubernetes
          - name: PORT
            value: "80"
          - name: INTERNAL_SERVER_PORT
            value: "40000"
          - name: PROTOCOL
            value: https
          - name: DOCKER_NODE_PUBLIC_DOMAIN
            value: cf-cd.com
          - name: DOCKER_NODE_CERT_PATH
            value: /etc/ssl/cf
          - name: CF_HOST_NAME
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: app
          - name: PROVIDERS_JSON_PATH
            value: /etc/admin/providers.json
          - name: RUNTIME_ENVS_JSON_PATH
            value: /etc/admin/runtimeEnvironments.json
          - name: TLS_SIGN_CLIENT_KEY
            valueFrom:
              secretKeyRef:
                key: tls-sign.client-key
                name: app
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          - name: MONGO_URI
            valueFrom:
              secretKeyRef:
                key: mongo-uri
                name: app
          - name: CONSUL_HOST
            value: consul
          - name: QUEUE_SERVERS
            value: nats://queue:4222
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: app
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: app
          - name: GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: github-client-id
                name: app
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: github-client-secret
                name: app
          - name: GITLAB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: gitlab-client-id
                name: app
          - name: GITLAB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: gitlab-client-secret
                name: app
          - name: OAUTH_ROUTER_CALLBACK
            valueFrom:
              configMapKeyRef:
                key: api.oauth-router-callback
                name: app
          - name: BITBUCKET_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-id
                name: app
          - name: BITBUCKET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-secret
                name: app
          - name: API_SAFE_SECRET
            valueFrom:
              secretKeyRef:
                key: api.safe-secret
                name: app
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-api-key
                name: app
          - name: GOOGLE_COMPUTE_ENGINE_PROJECT
            valueFrom:
              configMapKeyRef:
                key: api.google-compute-engine-project
                name: app
          - name: SLACK_INTERNAL
            valueFrom:
              configMapKeyRef:
                key: api.slack-internal
                name: app
          - name: SLACK_APP_SECRET
            valueFrom:
              secretKeyRef:
                key: api.slack-app-secret
                name: app
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: SLACK_APP_ID
            value: "4027524866.63606411014"
          - name: SEGMENT_ACTIVE
            valueFrom:
              configMapKeyRef:
                key: api.segment-active
                name: app
          - name: MAIL_ACTIVE
            value: "true"
          - name: LOGS_PATH
            value: /var/log/cf-api.log
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: PROGRESS_BUILDLOGS_BUCKETNAME
            valueFrom:
              configMapKeyRef:
                key: api.progress-buildLogs-bucketName
                name: app
          - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                key: internal-use-github-access-token
                name: app
          - name: REDIS_URL
            value: redis
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis.password
                name: app
          - name: RABBIT_URL
            value: amqp://rabbit
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: postgres.host
                name: app
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres.database
                name: app
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          - name: CF_REGISTRY_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: cfcr.domain
                name: app
          - name: CF_REGISTRY_API_KEY
            valueFrom:
              secretKeyRef:
                key: api.reg-auth-api-key
                name: app
          - name: CF_REGISTRY_ADMIN_TOKEN
            valueFrom:
              secretKeyRef:
                key: admin-token
                name: internal-registry
          image: r.cfcr.io/codefresh-inc/codefresh/cf-api:develop
          imagePullPolicy: Always
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/bash
                - -c
                - |
                  cat /etc/admin/hosts.added >> /etc/hosts
          name: cfapi
          ports:
          - containerPort: 80
            protocol: TCP
          - containerPort: 40000
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/ping
              port: 80
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /root/.aws/credentials
            name: aws-credentials
            subPath: aws-credentials
          - mountPath: /etc/admin/gce_creds.json
            name: cfapi-gce-creds
            subPath: gce_creds.json
          - mountPath: /etc/admin/providers.json
            name: providers
            subPath: providers.json
          - mountPath: /etc/admin/hosts.added
            name: etc-hosts
            subPath: hosts-app
          - mountPath: /etc/admin/runtimeEnvironments.json
            name: runtime-environments
            subPath: runtimeEnvironments.json
          - mountPath: /root/.kube/config
            name: node-clusters
            subPath: kube-config
          - mountPath: /etc/ssl/cf/
            name: cf-certs-client
            readOnly: true
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 40
        volumes:
        - name: aws-credentials
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: cfapi-gce-creds
          secret:
            defaultMode: 420
            secretName: cf-certs
        - configMap:
            defaultMode: 420
            name: providers
          name: providers
        - configMap:
            defaultMode: 420
            name: etc-hosts
          name: etc-hosts
        - configMap:
            defaultMode: 420
            name: runtime-environments
          name: runtime-environments
        - name: node-clusters
          secret:
            defaultMode: 420
            secretName: node-clusters
        - name: cf-certs-client
          secret:
            defaultMode: 420
            secretName: cf-certs-client
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      io.codefresh.owner: codefresh
      kubernetes.io/change-cause: kubectl create --filename=-
    creationTimestamp: 2017-07-11T06:35:09Z
    generation: 1
    labels:
      app: cfruntime
      app-version: develop
      pod-template-hash: "2435157033"
    name: cfruntime-2435157033
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cfruntime
      uid: 161098a0-6603-11e7-977d-080027a5536f
    resourceVersion: "50670"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/cfruntime-2435157033
    uid: 16149a26-6603-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cfruntime
        pod-template-hash: "2435157033"
    template:
      metadata:
        annotations:
          forceRedeployUniqId: "1499754909"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["cfruntime", "prometheus"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname",
                    "weight": 100
                }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: cfruntime
          app-version: develop
          pod-template-hash: "2435157033"
      spec:
        containers:
        - env:
          - name: CF_DOCKER_IMAGES_TAG
            valueFrom:
              configMapKeyRef:
                key: runtime.cf-docker-images-tag
                name: app
          - name: RABBIT_URL
            value: amqp://rabbit
          - name: RUNTIME_GOOGLE_REGISTRY_PROJECT_NAME
            valueFrom:
              configMapKeyRef:
                key: runtime.google-registry-project-name
                name: app
          - name: RUNTIME_INTERNAL_REGISTRY_JSON
            value: /etc/admin/internal-registry.json
          - name: RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON
            value: /etc/admin/additional-internal-registries.json
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: app
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: app
          - name: DOCKER_CERT_PATH
            value: /etc/ssl/cf
          - name: QUEUE_SERVERS
            value: nats://queue:4222
          - name: CONSUL_HOST
            value: consul
          - name: NODE_ENV
            value: kubernetes
          - name: LOGGER_LEVEL
            value: error
          - name: LOGS_PATH
            value: /var/log/cf-runtime.log
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: DOCKER_PUSHER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.dockerPusher
                name: app
          - name: DOCKER_PULLER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.dockerPuller
                name: app
          - name: DOCKER_BUILDER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.dockerBuilder
                name: app
          - name: CONTAINER_LOGGER_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.containerLogger
                name: app
          - name: GIT_CLONE_IMAGE
            valueFrom:
              configMapKeyRef:
                key: runtime.images.gitClone
                name: app
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: postgres.host
                name: app
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres.database
                name: app
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          image: r.cfcr.io/codefresh-inc/codefresh/cf-runtime:develop
          imagePullPolicy: Always
          name: cfruntime
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/admin/internal-registry.json
            name: internal-registry
            subPath: internal-registry.json
          - mountPath: /etc/admin/additional-internal-registries.json
            name: additional-internal-registries
            subPath: additional-internal-registries.json
          - mountPath: /etc/admin/gce_creds.json
            name: cfruntime-gce-creds
            subPath: gce_creds.json
          - mountPath: /var/run/docker.sock
            name: docker-socket
          - mountPath: /etc/ssl/cf/
            name: cf-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 1800
        volumes:
        - hostPath:
            path: /var/run/docker.sock
          name: docker-socket
        - name: cfruntime-gce-creds
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: cf-certs
        - name: internal-registry
          secret:
            defaultMode: 420
            secretName: internal-registry
        - name: additional-internal-registries
          secret:
            defaultMode: 420
            secretName: internal-registry
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=-
    creationTimestamp: 2017-07-11T06:31:51Z
    generation: 1
    labels:
      app: cfui
      app-version: develop
      pod-template-hash: "255013095"
    name: cfui-255013095
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cfui
      uid: 9fb21c95-6602-11e7-977d-080027a5536f
    resourceVersion: "50474"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/cfui-255013095
    uid: 9fb9c0a5-6602-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cfui
        pod-template-hash: "255013095"
    template:
      metadata:
        annotations:
          forceRedeployUniqId: "1499754711"
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["cfui", "prometheus"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname",
                    "weight": 100
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: cfui
          app-version: develop
          pod-template-hash: "255013095"
      spec:
        containers:
        - env:
          - name: NODE_ENV
            value: kubernetes
          - name: QUEUE_SERVERS
            value: nats://queue:4222
          - name: PORT
            value: "80"
          - name: ASSETS_OPTIMIZED
            value: "true"
          - name: CODEFRESH_API_URL
            valueFrom:
              configMapKeyRef:
                key: api.url
                name: app
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-ui-key
                name: app
          - name: ROLLBAR_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                key: rollbar-access-token
                name: app
          - name: STRIPE_PUBLIC_KEY
            valueFrom:
              secretKeyRef:
                key: stripe-public-key
                name: app
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: app
          - name: SLACK_REDIRECTURI
            valueFrom:
              configMapKeyRef:
                key: ui.slack-redirectUri
                name: app
          - name: NEW_USER_REDIRECT
            valueFrom:
              configMapKeyRef:
                key: ui.new-user-redirect
                name: app
          - name: WALKME
            valueFrom:
              configMapKeyRef:
                key: ui.walkme
                name: app
          - name: LAUNCH_DARKLY_KEY
            valueFrom:
              secretKeyRef:
                key: ui.launchdarkly-key
                name: app
          - name: SLACK_APP_ID
            value: "4027524866.63606411014"
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: LOGS_PATH
            value: /var/log/cf-ui.log
          - name: CF_REGISTRY_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: cfcr.domain
                name: app
          image: r.cfcr.io/codefresh-inc/codefresh/cf-ui:develop
          imagePullPolicy: Always
          name: cfui
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      io.codefresh.owner: codefresh
    creationTimestamp: 2017-07-11T06:27:13Z
    generation: 1
    labels:
      pod-template-hash: "939076655"
      service: mongo
    name: mongo-939076655
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mongo
      uid: fa31f48c-6601-11e7-977d-080027a5536f
    resourceVersion: "49245"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/mongo-939076655
    uid: fa36f5b0-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        pod-template-hash: "939076655"
        service: mongo
    template:
      metadata:
        creationTimestamp: null
        labels:
          pod-template-hash: "939076655"
          service: mongo
      spec:
        containers:
        - args:
          - mongod
          - --smallfiles
          image: mongo:latest
          imagePullPolicy: Always
          name: mongo
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data/db
            name: mongo-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=assets/payments/payments-deployment-dev.yaml
    creationTimestamp: 2017-07-11T06:27:14Z
    generation: 1
    labels:
      app: payments
      app-version: master
      pod-template-hash: "1638088387"
    name: payments-1638088387
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: payments
      uid: fa966df5-6601-11e7-977d-080027a5536f
    resourceVersion: "49818"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/payments-1638088387
    uid: faa82f93-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: payments
        pod-template-hash: "1638088387"
    template:
      metadata:
        annotations:
          forceRedeployUniqId: Sun Jul 9 10:15:14 IDT 2017
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "podAntiAffinity": {
                "prefferedDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["payments"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                ]
              },
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "In",
                          "values": ["internal"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: payments
          app-version: master
          pod-template-hash: "1638088387"
      spec:
        containers:
        - env:
          - name: API_URL
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: app
          - name: API_PROTOCOL
            valueFrom:
              configMapKeyRef:
                key: protocol
                name: app
          - name: MONGO_URI
            valueFrom:
              secretKeyRef:
                key: mongo-uri
                name: payments
          - name: EVENTBUS_URI
            value: amqp://rabbit
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: postgres.host
                name: app
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres.database
                name: app
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          - name: INTERNAL_API_URI
            value: http://cfapi:3000
          - name: STRIPE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: stripe-secret-key
                name: payments
          - name: STRIPE_WEBHOOK_SIGN_SECRET
            valueFrom:
              secretKeyRef:
                key: stripe-webhook-sign-secret
                name: payments
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: app
          image: codefresh/payments:master
          imagePullPolicy: Always
          name: payments
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/ping
              port: 9000
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: docker-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 40
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:15Z
    generation: 1
    labels:
      app: postgres
      pod-template-hash: "3178229479"
    name: postgres-3178229479
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: postgres
      uid: fadcd964-6601-11e7-977d-080027a5536f
    resourceVersion: "49683"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/postgres-3178229479
    uid: faff7273-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: postgres
        pod-template-hash: "3178229479"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "preferredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "weight": 100,
                    "preference":
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal"]
                        }
                      ]
                    }
                  }
                ]
              }
            }
        creationTimestamp: null
        labels:
          app: postgres
          pod-template-hash: "3178229479"
      spec:
        containers:
        - env:
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                key: postgres.user
                name: app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres.password
                name: app
          image: postgres:9.6
          imagePullPolicy: Always
          name: postgres
          ports:
          - containerPort: 5432
            name: postgres
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:15Z
    generation: 1
    labels:
      app: rabbit
      pod-template-hash: "2557528624"
    name: rabbit-2557528624
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: rabbit
      uid: fb7ed965-6601-11e7-977d-080027a5536f
    resourceVersion: "49497"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/rabbit-2557528624
    uid: fb840aac-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: rabbit
        pod-template-hash: "2557528624"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: rabbit
          pod-template-hash: "2557528624"
      spec:
        containers:
        - image: rabbitmq:3-management
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - bash
              - -c
              - /usr/lib/rabbitmq/bin/rabbitmqctl node_health_check
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: rabbit
          ports:
          - containerPort: 5672
            name: rabbit
            protocol: TCP
          - containerPort: 15672
            name: rabbit-mng
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - /usr/lib/rabbitmq/bin/rabbitmqctl node_health_check
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: rabbit-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: rabbit-data
          persistentVolumeClaim:
            claimName: rabbit-data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:16Z
    generation: 1
    labels:
      app: redis
      pod-template-hash: "2859611542"
    name: redis-2859611542
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: redis
      uid: fbf525a8-6601-11e7-977d-080027a5536f
    resourceVersion: "49825"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/redis-2859611542
    uid: fbf65ed1-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: redis
        pod-template-hash: "2859611542"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/affinity: |
            {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "nodeType",
                          "operator": "NotIn",
                          "values": ["internal", "worker"]
                        }
                      ]
                    }
                  ]
                }
              }
            }
        creationTimestamp: null
        labels:
          app: redis
          pod-template-hash: "2859611542"
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis.password
                name: app
          image: bitnami/redis:3.2.8-r1
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/redis
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-11T06:27:17Z
    generation: 1
    labels:
      app: registry
      component: main
      pod-template-hash: "1701487085"
    name: registry-1701487085
    namespace: default
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: registry
      uid: fc6b69ef-6601-11e7-977d-080027a5536f
    resourceVersion: "49342"
    selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/registry-1701487085
    uid: fc6ca610-6601-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: registry
        component: main
        pod-template-hash: "1701487085"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: registry
          component: main
          pod-template-hash: "1701487085"
      spec:
        containers:
        - env:
          - name: REGISTRY_HTTP_ADDR
            value: :5000
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /var/lib/registry
          - name: REGISTRY_HTTP_TLS_CERTIFICATE
            value: /etc/ssl/cf/cert.pem
          - name: REGISTRY_HTTP_TLS_KEY
            value: /etc/ssl/cf/key.pem
          image: registry:2.5
          imagePullPolicy: Always
          name: registry
          ports:
          - containerPort: 5000
            name: registry
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/registry
            name: image-store
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: image-store
          persistentVolumeClaim:
            claimName: docker-registry
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: cf-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata: {}
resourceVersion: ""
selfLink: ""
