apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"codefresh","name":"assa-builder","uid":"5567390b-65a9-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"937"}}
      pod.alpha.kubernetes.io/init-container-statuses: '[{"name":"register-dind-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-10T20:22:35Z","finishedAt":"2017-07-10T20:22:35Z","containerID":"docker://82d217a8f4d3f14ee3dcba6f48d7c706f78ba720d789bd6125cb0e6273b3123e"}},"lastState":{},"ready":true,"restartCount":7,"image":"alexeiled/curl:3.6","imageID":"docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362","containerID":"docker://82d217a8f4d3f14ee3dcba6f48d7c706f78ba720d789bd6125cb0e6273b3123e"}]'
      pod.alpha.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} assa-builder.codefresh"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}}],"resources":{},"volumeMounts":[{"name":"builder-config","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-p1px5","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
      pod.beta.kubernetes.io/init-container-statuses: '[{"name":"register-dind-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-10T20:22:35Z","finishedAt":"2017-07-10T20:22:35Z","containerID":"docker://82d217a8f4d3f14ee3dcba6f48d7c706f78ba720d789bd6125cb0e6273b3123e"}},"lastState":{},"ready":true,"restartCount":7,"image":"alexeiled/curl:3.6","imageID":"docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362","containerID":"docker://82d217a8f4d3f14ee3dcba6f48d7c706f78ba720d789bd6125cb0e6273b3123e"}]'
      pod.beta.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} assa-builder.codefresh"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}}],"resources":{},"volumeMounts":[{"name":"builder-config","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-p1px5","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
    creationTimestamp: 2017-07-10T19:52:42Z
    generateName: assa-builder-
    labels:
      app: assa-builder
      chart: builder-0.1.2
      controller-revision-hash: assa-builder-294718848
      heritage: Tiller
      release: assa
    name: assa-builder-0
    namespace: codefresh
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: assa-builder
      uid: 5567390b-65a9-11e7-977d-080027a5536f
    resourceVersion: "3849"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-builder-0
    uid: 55cbf1e8-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        rm -fv /var/run/docker.pid
        mkdir /var/run/codefresh
        mkdir -p /etc/docker/certs.d/registry.codefresh.svc:5000/
        cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/registry.codefresh.svc:5000/ca.crt
        dockerd
      image: docker:17.05-dind
      imagePullPolicy: IfNotPresent
      name: assa-builder
      ports:
      - containerPort: 1300
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /etc/docker/daemon.json
        name: builder-config
        readOnly: true
        subPath: daemon.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: assa-builder-0
    initContainers:
    - command:
      - /bin/sh
      - -c
      - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME} assa-builder.codefresh
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: alexeiled/curl:3.6
      imagePullPolicy: IfNotPresent
      name: register-dind-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/dind/register
        name: builder-config
        subPath: register
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: assa-builder
    terminationGracePeriodSeconds: 30
    volumes:
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: assa-cf-certs
    - configMap:
        defaultMode: 420
        name: assa-builder
      name: builder-config
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:22:36Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:23:42Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:42Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://fec65d24ce6d9a51cec50762866c6e022722c1eeb40f942beebc97ac64e49f4c
      image: docker:17.05-dind
      imageID: docker://sha256:63b0daf021803454169fca62f03ee99744ddf1fd14db23f760b0b86856ae04de
      lastState: {}
      name: assa-builder
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:23:41Z
    hostIP: 192.168.99.100
    initContainerStatuses:
    - containerID: docker://82d217a8f4d3f14ee3dcba6f48d7c706f78ba720d789bd6125cb0e6273b3123e
      image: alexeiled/curl:3.6
      imageID: docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362
      lastState: {}
      name: register-dind-container
      ready: true
      restartCount: 7
      state:
        terminated:
          containerID: docker://82d217a8f4d3f14ee3dcba6f48d7c706f78ba720d789bd6125cb0e6273b3123e
          exitCode: 0
          finishedAt: 2017-07-10T20:22:35Z
          reason: Completed
          startedAt: 2017-07-10T20:22:35Z
    phase: Running
    podIP: 10.10.0.16
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:42Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"codefresh","name":"assa-builder","uid":"5567390b-65a9-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"986"}}
      pod.alpha.kubernetes.io/init-container-statuses: '[{"name":"register-dind-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-10T20:23:43Z","finishedAt":"2017-07-10T20:23:44Z","containerID":"docker://3c14270fcb39804e4c617b12e381fa4dce1542d2772d6876d395d54d3cca6468"}},"lastState":{},"ready":true,"restartCount":0,"image":"alexeiled/curl:3.6","imageID":"docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362","containerID":"docker://3c14270fcb39804e4c617b12e381fa4dce1542d2772d6876d395d54d3cca6468"}]'
      pod.alpha.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} assa-builder.codefresh"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}}],"resources":{},"volumeMounts":[{"name":"builder-config","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-p1px5","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
      pod.beta.kubernetes.io/init-container-statuses: '[{"name":"register-dind-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-10T20:23:43Z","finishedAt":"2017-07-10T20:23:44Z","containerID":"docker://3c14270fcb39804e4c617b12e381fa4dce1542d2772d6876d395d54d3cca6468"}},"lastState":{},"ready":true,"restartCount":0,"image":"alexeiled/curl:3.6","imageID":"docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362","containerID":"docker://3c14270fcb39804e4c617b12e381fa4dce1542d2772d6876d395d54d3cca6468"}]'
      pod.beta.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} assa-builder.codefresh"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}}],"resources":{},"volumeMounts":[{"name":"builder-config","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-p1px5","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
    creationTimestamp: 2017-07-10T20:23:42Z
    generateName: assa-builder-
    labels:
      app: assa-builder
      chart: builder-0.1.2
      controller-revision-hash: assa-builder-294718848
      heritage: Tiller
      release: assa
    name: assa-builder-1
    namespace: codefresh
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: assa-builder
      uid: 5567390b-65a9-11e7-977d-080027a5536f
    resourceVersion: "3872"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-builder-1
    uid: aacc028b-65ad-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        rm -fv /var/run/docker.pid
        mkdir /var/run/codefresh
        mkdir -p /etc/docker/certs.d/registry.codefresh.svc:5000/
        cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/registry.codefresh.svc:5000/ca.crt
        dockerd
      image: docker:17.05-dind
      imagePullPolicy: IfNotPresent
      name: assa-builder
      ports:
      - containerPort: 1300
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /etc/docker/daemon.json
        name: builder-config
        readOnly: true
        subPath: daemon.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: assa-builder-1
    initContainers:
    - command:
      - /bin/sh
      - -c
      - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME} assa-builder.codefresh
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: alexeiled/curl:3.6
      imagePullPolicy: IfNotPresent
      name: register-dind-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/dind/register
        name: builder-config
        subPath: register
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: assa-builder
    terminationGracePeriodSeconds: 30
    volumes:
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: assa-cf-certs
    - configMap:
        defaultMode: 420
        name: assa-builder
      name: builder-config
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:23:44Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:23:46Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:23:42Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://39bd4109b5816648d87b1aed98f7f36809c679ee0d5631434e54816896e5f528
      image: docker:17.05-dind
      imageID: docker://sha256:63b0daf021803454169fca62f03ee99744ddf1fd14db23f760b0b86856ae04de
      lastState: {}
      name: assa-builder
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:23:45Z
    hostIP: 192.168.99.100
    initContainerStatuses:
    - containerID: docker://3c14270fcb39804e4c617b12e381fa4dce1542d2772d6876d395d54d3cca6468
      image: alexeiled/curl:3.6
      imageID: docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362
      lastState: {}
      name: register-dind-container
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://3c14270fcb39804e4c617b12e381fa4dce1542d2772d6876d395d54d3cca6468
          exitCode: 0
          finishedAt: 2017-07-10T20:23:44Z
          reason: Completed
          startedAt: 2017-07-10T20:23:43Z
    phase: Running
    podIP: 10.10.0.22
    qosClass: BestEffort
    startTime: 2017-07-10T20:23:42Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-cfapi-8126120","uid":"54fa7393-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"912"}}
    creationTimestamp: 2017-07-10T19:52:41Z
    generateName: assa-cfapi-8126120-
    labels:
      app: assa-cfapi
      chart: cfapi-0.1.2
      heritage: Tiller
      pod-template-hash: "8126120"
      release: assa
      version: v120
    name: assa-cfapi-8126120-4g0cc
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-cfapi-8126120
      uid: 54fa7393-65a9-11e7-977d-080027a5536f
    resourceVersion: "2844"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-cfapi-8126120-4g0cc
    uid: 552c8383-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: APP_ENV
        value: staging
      - name: DOCKER_NODE_CERT_PATH
        value: /etc/ssl/cf
      - name: DOCKER_NODE_PUBLIC_DOMAIN
        value: cf-cd.com
      - name: LOGGER_LEVEL
        value: error
      - name: LOGGER_MORAN_ACTIVE
        value: "false"
      - name: LOGS_PATH
        value: /var/log/cf-api.log
      - name: MAIL_ACTIVE
        value: "false"
      - name: NODE_ENV
        value: kubernetes
      - name: OAUTH_ROUTER_CALLBACK
      - name: PROGRESS_BUILDLOGS_BUCKETNAME
        value: progress-logs-staging
      - name: PROVIDERS_JSON_PATH
        value: /etc/admin/providers.json
      - name: PORT
        value: "80"
      - name: PROTOCOL
        value: https
      - name: CF_HOST_NAME
        valueFrom:
          configMapKeyRef:
            key: app-url
            name: assa-codefresh
      - name: EXTERNAL_URL
        value: https://$(CF_HOST_NAME)
      - name: MONGO_SERVICE
        valueFrom:
          configMapKeyRef:
            key: mongodb-service
            name: assa-codefresh
      - name: MONGO_PORT
        valueFrom:
          configMapKeyRef:
            key: mongodb-port
            name: assa-codefresh
      - name: MONGO_USER
        valueFrom:
          secretKeyRef:
            key: mongodb-user
            name: assa-codefresh
      - name: MONGO_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-password
            name: assa-codefresh
      - name: MONGO_DATABASE
        valueFrom:
          configMapKeyRef:
            key: mongodb-database
            name: assa-codefresh
      - name: MONGO_URI
        value: mongodb://$(MONGO_USER):$(MONGO_PASSWORD)@assa-$(MONGO_SERVICE).codefresh:$(MONGO_PORT)/$(MONGO_DATABASE)
      - name: CONSUL_SERVICE
        valueFrom:
          configMapKeyRef:
            key: consul-service
            name: assa-codefresh
      - name: CONSUL_HOST
        value: assa-$(CONSUL_SERVICE).codefresh
      - name: NATS_SERVICE
        valueFrom:
          configMapKeyRef:
            key: nats-service
            name: assa-codefresh
      - name: NATS_PORT
        valueFrom:
          configMapKeyRef:
            key: nats-port
            name: assa-codefresh
      - name: QUEUE_SERVERS
        value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
      - name: RABBIT_SERVICE
        valueFrom:
          configMapKeyRef:
            key: rabbitmq-service
            name: assa-codefresh
      - name: RABBIT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: rabbitmq-password
            name: assa-codefresh
      - name: RABBIT_USER
        valueFrom:
          secretKeyRef:
            key: rabbitmq-username
            name: assa-codefresh
      - name: RABBIT_URL
        value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
      - name: POSTGRES_SERVICE
        valueFrom:
          configMapKeyRef:
            key: postgres-service
            name: assa-codefresh
      - name: POSTGRES_HOST
        value: assa-$(POSTGRES_SERVICE).codefresh
      - name: POSTGRES_DATABASE
        valueFrom:
          configMapKeyRef:
            key: postgres-database
            name: assa-codefresh
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            key: postgres-user
            name: assa-codefresh
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: assa-codefresh
      - name: REDIS_SERVICE
        valueFrom:
          configMapKeyRef:
            key: redis-service
            name: assa-codefresh
      - name: REDIS_URL
        value: assa-$(REDIS_SERVICE).codefresh
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: assa-codefresh
      - name: GITHUB_API_HOST
        value: api.github.com
      - name: GITHUB_API_PATH_PREFIX
        value: /api/v3
      - name: GITHUB_LOGIN_HOST
        value: github.com
      - name: GITHUB_PROTOCOL
        value: https
      - name: GITHUB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: github-client-id
            name: assa-codefresh
      - name: GITHUB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: github-client-secret
            name: assa-codefresh
      - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            key: github-internal-token
            name: assa-codefresh
      - name: GITLAB_LOGIN_HOST
        value: gitlab.com
      - name: GITLAB_PROTOCOL
        value: https
      - name: GITLAB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: gitlab-client-id
            name: assa-codefresh
      - name: GITLAB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: gitlab-client-secret
            name: assa-codefresh
      - name: BITBUCKET_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: bitbucket-client-id
            name: assa-codefresh
      - name: BITBUCKET_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: bitbucket-client-secret
            name: assa-codefresh
      - name: API_SAFE_SECRET
        valueFrom:
          secretKeyRef:
            key: api-safe-secret
            name: assa-codefresh
      - name: STRIPE_SECRET_KEY
        valueFrom:
          secretKeyRef:
            key: stripe-secret-key
            name: assa-codefresh
      - name: FIREBASE_SECRET
        valueFrom:
          secretKeyRef:
            key: firebase-secret
            name: assa-codefresh
      - name: FIREBASE_URL
        valueFrom:
          configMapKeyRef:
            key: firebase-url
            name: assa-codefresh
      - name: SLACK_APP_ID
        valueFrom:
          secretKeyRef:
            key: slack-app-id
            name: assa-codefresh
      - name: SLACK_INTERNAL
        valueFrom:
          secretKeyRef:
            key: slack-internal
            name: assa-codefresh
      - name: SLACK_APP_SECRET
        valueFrom:
          secretKeyRef:
            key: slack-app-secret
            name: assa-codefresh
      - name: SEGMENT_KEY
        valueFrom:
          secretKeyRef:
            key: segment-key
            name: assa-codefresh
      - name: SEGMENT_ACTIVE
        value: "false"
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: assa-codefresh
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: assa-codefresh
      - name: TLS_SIGN_CLIENT_KEY
        valueFrom:
          secretKeyRef:
            key: tls-client-key
            name: assa-codefresh
      image: codefresh/cf-api:v120
      imagePullPolicy: IfNotPresent
      name: assa-cfapi
      ports:
      - containerPort: 80
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /api/ping
          port: 80
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/admin/providers.json
        name: config
        subPath: providers.json
      - mountPath: /etc/admin/accounts.json
        name: config
        subPath: accounts.json
      - mountPath: /etc/admin/users.json
        name: config
        subPath: users.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: assa-codefresh-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 40
    volumes:
    - configMap:
        defaultMode: 420
        name: assa-cfapi
      name: config
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:41Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:13:36Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:41Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://592d25366c00c178d5a25c4b3d239b1b2046c5c453240f3453ecc3a48e6e592b
      image: codefresh/cf-api:v120
      imageID: docker://sha256:99425b910f49b24cbb02b3e530c09fec83a04685575edd8dbc9721b0e9965173
      lastState: {}
      name: assa-cfapi
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:13:00Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.17
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:41Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-cfruntime-3659982516","uid":"546ae829-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"866"}}
    creationTimestamp: 2017-07-10T19:52:39Z
    generateName: assa-cfruntime-3659982516-
    labels:
      app: assa-cfruntime
      chart: cfruntime-0.1.2
      heritage: Tiller
      pod-template-hash: "3659982516"
      release: assa
      version: v71
    name: assa-cfruntime-3659982516-6k4q3
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-cfruntime-3659982516
      uid: 546ae829-65a9-11e7-977d-080027a5536f
    resourceVersion: "2468"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-cfruntime-3659982516-6k4q3
    uid: 547a85b7-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: CF_DOCKER_IMAGES_TAG
        value: develop
      - name: DOCKER_CERT_PATH
        value: /etc/ssl/cf
      - name: LOGGER_LEVEL
        value: error
      - name: LOGS_PATH
        value: /var/log/cf-runtime.log
      - name: NODE_ENV
        value: kubernetes
      - name: REGISTRY_CA_PATH
        value: /etc/ssl/cf/ca.pem
      - name: RUNTIME_ACTIVE_REGISTRY
        value: localRegistry
      - name: RUNTIME_GOOGLE_REGISTRY_PROJECT_NAME
      - name: RUNTIME_INTERNAL_REGISTRY_JSON
        value: /etc/admin/internal-registry.json
      - name: RUNTIME_LOCAL_REGISTRY_CA
        value: /etc/ssl/cf/ca.pem
      - name: FIREBASE_SECRET
        valueFrom:
          secretKeyRef:
            key: firebase-secret
            name: assa-codefresh
      - name: FIREBASE_URL
        valueFrom:
          configMapKeyRef:
            key: firebase-url
            name: assa-codefresh
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: assa-codefresh
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: assa-codefresh
      - name: CONSUL_SERVICE
        valueFrom:
          configMapKeyRef:
            key: consul-service
            name: assa-codefresh
      - name: CONSUL_HOST
        value: assa-$(CONSUL_SERVICE).codefresh
      - name: NATS_SERVICE
        valueFrom:
          configMapKeyRef:
            key: nats-service
            name: assa-codefresh
      - name: NATS_PORT
        valueFrom:
          configMapKeyRef:
            key: nats-port
            name: assa-codefresh
      - name: QUEUE_SERVERS
        value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
      - name: RABBIT_SERVICE
        valueFrom:
          configMapKeyRef:
            key: rabbitmq-service
            name: assa-codefresh
      - name: RABBIT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: rabbitmq-password
            name: assa-codefresh
      - name: RABBIT_USER
        valueFrom:
          secretKeyRef:
            key: rabbitmq-username
            name: assa-codefresh
      - name: RABBIT_URL
        value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
      - name: POSTGRES_SERVICE
        valueFrom:
          configMapKeyRef:
            key: postgres-service
            name: assa-codefresh
      - name: POSTGRES_HOST
        value: assa-$(POSTGRES_SERVICE).codefresh
      - name: POSTGRES_DATABASE
        valueFrom:
          configMapKeyRef:
            key: postgres-database
            name: assa-codefresh
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            key: postgres-user
            name: assa-codefresh
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: assa-codefresh
      - name: REDIS_SERVICE
        valueFrom:
          configMapKeyRef:
            key: redis-service
            name: assa-codefresh
      - name: REDIS_URL
        value: assa-$(REDIS_SERVICE).codefresh
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: assa-codefresh
      - name: DOCKER_PUSHER_IMAGE
        value: codefresh/cf-docker-pusher:v2
      - name: DOCKER_PULLER_IMAGE
        value: codefresh/cf-docker-puller:v2
      - name: DOCKER_BUILDER_IMAGE
        value: codefresh/cf-docker-builder:v5
      - name: CONTAINER_LOGGER_IMAGE
        value: codefresh/cf-container-logger:0.0.15
      - name: GIT_CLONE_IMAGE
        value: codefresh/cf-git-cloner:v1
      - name: RUNTIME_LOCAL_REGISTRY_NAME
        value: assa-registry.codefresh.svc:5000
      image: codefresh/cf-runtime:v71
      imagePullPolicy: IfNotPresent
      name: assa-cfruntime
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /etc/ssl/cf/
        name: cf-certs
        readOnly: true
      - mountPath: /etc/admin/internal-registry.json
        name: internal-registry
        subPath: internal-registry.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: assa-codefresh-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: assa-cf-certs
    - hostPath:
        path: /var/run/docker.sock
      name: docker-socket
    - configMap:
        defaultMode: 420
        name: assa-registry
      name: internal-registry
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:41Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:10:58Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:40Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8e8efe8d669d2c4b3fc16bcd83ce113b4c821e2a23ae9966008ae1792462d55e
      image: codefresh/cf-runtime:v71
      imageID: docker://sha256:628286c8a0063b2b0b71508633ec82f658fabb2319a5f0c4e29b035be2371e3d
      lastState: {}
      name: assa-cfruntime
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:10:57Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.12
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:41Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-cfui-2614216454","uid":"5439b7ea-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"835"}}
    creationTimestamp: 2017-07-10T19:52:39Z
    generateName: assa-cfui-2614216454-
    labels:
      app: assa-cfui
      chart: cfui-0.1.2
      heritage: Tiller
      pod-template-hash: "2614216454"
      release: assa
      version: v101
    name: assa-cfui-2614216454-9d3g1
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-cfui-2614216454
      uid: 5439b7ea-65a9-11e7-977d-080027a5536f
    resourceVersion: "2367"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-cfui-2614216454-9d3g1
    uid: 543f2d60-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: ASSETS_OPTIMIZED
        value: "true"
      - name: LAUNCH_DARKLY_KEY
      - name: LOGGER_LEVEL
        value: error
      - name: LOGGER_MORAN_ACTIVE
        value: "false"
      - name: LOGS_PATH
        value: /var/log/cf-ui.log
      - name: NEW_USER_REDIRECT
      - name: NODE_ENV
        value: kubernetes
      - name: ROLLBAR_ACCESS_TOKEN
      - name: SLACK_REDIRECTURI
      - name: STRIPE_PUBLIC_KEY
      - name: WALKME
      - name: PORT
        value: "80"
      - name: CF_HOST_NAME
        valueFrom:
          configMapKeyRef:
            key: app-url
            name: assa-codefresh
      - name: CODEFRESH_API_URL
        value: https://$(CF_HOST_NAME)
      - name: NATS_SERVICE
        valueFrom:
          configMapKeyRef:
            key: nats-service
            name: assa-codefresh
      - name: NATS_PORT
        valueFrom:
          configMapKeyRef:
            key: nats-port
            name: assa-codefresh
      - name: QUEUE_SERVERS
        value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
      - name: RABBIT_SERVICE
        valueFrom:
          configMapKeyRef:
            key: rabbitmq-service
            name: assa-codefresh
      - name: RABBIT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: rabbitmq-password
            name: assa-codefresh
      - name: RABBIT_USER
        valueFrom:
          secretKeyRef:
            key: rabbitmq-username
            name: assa-codefresh
      - name: RABBIT_URL
        value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
      - name: POSTGRES_SERVICE
        valueFrom:
          configMapKeyRef:
            key: postgres-service
            name: assa-codefresh
      - name: POSTGRES_HOST
        value: assa-$(POSTGRES_SERVICE).codefresh
      - name: POSTGRES_DATABASE
        valueFrom:
          configMapKeyRef:
            key: postgres-database
            name: assa-codefresh
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            key: postgres-user
            name: assa-codefresh
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: assa-codefresh
      - name: REDIS_SERVICE
        valueFrom:
          configMapKeyRef:
            key: redis-service
            name: assa-codefresh
      - name: REDIS_URL
        value: assa-$(REDIS_SERVICE).codefresh
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: assa-codefresh
      - name: NEWRELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            key: newrelic-license-key
            name: assa-codefresh
      - name: SEGMENT_KEY
        valueFrom:
          secretKeyRef:
            key: segment-key
            name: assa-codefresh
      - name: LOGGLY_TOKEN
        valueFrom:
          secretKeyRef:
            key: loggly-token
            name: assa-codefresh
      - name: SLACK_APP_ID
        valueFrom:
          secretKeyRef:
            key: slack-app-id
            name: assa-codefresh
      image: codefresh/cf-ui:v101
      imagePullPolicy: IfNotPresent
      name: assa-cfui
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    imagePullSecrets:
    - name: assa-codefresh-registry
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:39Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:09:41Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:39Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5faf3cbd1fb7197fddc4fb48fbd2a41f5839a38d122300585b49afbf5a382074
      image: codefresh/cf-ui:v101
      imageID: docker://sha256:8cca3e97b08f5d93ab926335f105dc79171b288ffd6bb2af2655a0aaa4f529a8
      lastState: {}
      name: assa-cfui
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:09:40Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.11
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:39Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"codefresh","name":"assa-consul","uid":"550a1fd8-65a9-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"916"}}
      pod.alpha.kubernetes.io/initialized: "true"
    creationTimestamp: 2017-07-10T19:52:41Z
    generateName: assa-consul-
    labels:
      chart: consul-0.3.0
      component: assa-consul
      controller-revision-hash: assa-consul-801398846
      heritage: Tiller
      release: assa
    name: assa-consul-0
    namespace: codefresh
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: assa-consul
      uid: 550a1fd8-65a9-11e7-977d-080027a5536f
    resourceVersion: "3423"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-consul-0
    uid: 559ee038-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -ec
      - |
        IP=$(hostname -i)

        if [ -e /etc/consul/secrets/gossip-key ]; then
          echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
          GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
        fi

        for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
            while true; do
                echo "Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
                ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc > /dev/null && break
                sleep 1s
            done
        done

        PEERS=""
        for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
            PEERS="${PEERS}${PEERS:+ } -retry-join $(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc | awk -F'[()]' '/PING/{print $2}')"
        done

        exec /bin/consul agent \
          -ui \
          -data-dir=/var/lib/consul \
          -server \
          -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
          -bind=0.0.0.0 \
          -advertise=${IP} \
          ${PEERS} \
          ${GOSSIP_KEY} \
          -client=0.0.0.0
      env:
      - name: INITIAL_CLUSTER_SIZE
        value: "1"
      - name: STATEFULSET_NAME
        value: assa-consul
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: STATEFULSET_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: consul:0.8.3
      imagePullPolicy: Always
      livenessProbe:
        exec:
          command:
          - consul
          - members
        failureThreshold: 3
        initialDelaySeconds: 300
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: assa-consul
      ports:
      - containerPort: 8500
        name: http
        protocol: TCP
      - containerPort: 8400
        name: rpc
        protocol: TCP
      - containerPort: 8301
        name: serflan-tcp
        protocol: TCP
      - containerPort: 8301
        name: serflan-udp
        protocol: UDP
      - containerPort: 8302
        name: serfwan-tcp
        protocol: TCP
      - containerPort: 8302
        name: serfwan-udp
        protocol: UDP
      - containerPort: 8300
        name: server
        protocol: TCP
      - containerPort: 8600
        name: consuldns
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/consul
        name: datadir
      - mountPath: /etc/consul/secrets
        name: gossip-key
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: assa-consul-0
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
    serviceAccount: default
    serviceAccountName: default
    subdomain: assa-consul
    terminationGracePeriodSeconds: 30
    volumes:
    - name: datadir
      persistentVolumeClaim:
        claimName: datadir-assa-consul-0
    - name: gossip-key
      secret:
        defaultMode: 420
        secretName: assa-consul-gossip-key
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:49Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:19:06Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:49Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5996893bb3284522379549eef706e6260a5d7eb80c397f47c128bfd5a1e49156
      image: consul:0.8.3
      imageID: docker://sha256:02bea03f085512c884e2fa609e6a828ccf934747f10fce1a3c342dd34c4d0427
      lastState: {}
      name: assa-consul
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:19:06Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.21
    qosClass: Burstable
    startTime: 2017-07-10T19:52:49Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-mongodb-2921930014","uid":"543e3dee-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"837"}}
    creationTimestamp: 2017-07-10T19:52:39Z
    generateName: assa-mongodb-2921930014-
    labels:
      app: assa-mongodb
      pod-template-hash: "2921930014"
    name: assa-mongodb-2921930014-qfw4t
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-mongodb-2921930014
      uid: 543e3dee-65a9-11e7-977d-080027a5536f
    resourceVersion: "1807"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-mongodb-2921930014-qfw4t
    uid: 54421b57-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: MONGODB_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-root-password
            name: assa-mongodb
      - name: MONGODB_USERNAME
        value: cfuser
      - name: MONGODB_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-password
            name: assa-mongodb
      - name: MONGODB_DATABASE
        value: codefresh
      image: bitnami/mongodb:3.4.5-r0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - mongo
          - --eval
          - db.adminCommand('ping')
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: assa-mongodb
      ports:
      - containerPort: 27017
        name: mongodb
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - mongo
          - --eval
          - db.adminCommand('ping')
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mongodb
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: assa-mongodb
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:39Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:02:09Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:39Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b5b4f23a2536b6539180bf4a1dbabf5475c210a2c5101e25790cca3eafa84b54
      image: bitnami/mongodb:3.4.5-r0
      imageID: docker://sha256:5cd1e2e83dbe4434baa468d11cf26b79bb4328e88ba7892522e2946a5d8bf20b
      lastState: {}
      name: assa-mongodb
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:02:01Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.10
    qosClass: Burstable
    startTime: 2017-07-10T19:52:39Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"codefresh","name":"assa-nats","uid":"558a82a5-65a9-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"946"}}
      pod.alpha.kubernetes.io/initialized: "true"
    creationTimestamp: 2017-07-10T19:52:42Z
    generateName: assa-nats-
    labels:
      app: assa-nats
      chart: nats-0.1.0
      controller-revision-hash: assa-nats-72464890
      heritage: Tiller
      release: assa
    name: assa-nats-0
    namespace: codefresh
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: assa-nats
      uid: 558a82a5-65a9-11e7-977d-080027a5536f
    resourceVersion: "2525"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-nats-0
    uid: 55f65550-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - args:
      - --addr
      - 0.0.0.0
      - --port
      - "4222"
      - --http_port
      - "8222"
      - --cluster
      - nats://$(POD_IP):6222
      - --routes
      - nats://assa-nats-0.nats.svc.cluster.local:6222
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: nats:0.9.4
      imagePullPolicy: IfNotPresent
      name: assa-nats
      ports:
      - containerPort: 8222
        protocol: TCP
      - containerPort: 6222
        protocol: TCP
      - containerPort: 4222
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    hostname: assa-nats-0
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: assa-nats
    terminationGracePeriodSeconds: 30
    volumes:
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:42Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:11:29Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:42Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://fcd29280ab06c92b4d5ccbaed3290b37ea08b5f3c8d4cf4a8452ef9f5d09fd42
      image: nats:0.9.4
      imageID: docker://sha256:1a94f6e42778e2f9009b3b8f0413fb70cd915e993a99fd74f065528f5fbb0bb7
      lastState: {}
      name: assa-nats
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:11:29Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.15
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:42Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-postgresql-3807653042","uid":"544b9431-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"850"}}
    creationTimestamp: 2017-07-10T19:52:39Z
    generateName: assa-postgresql-3807653042-
    labels:
      app: assa-postgresql
      pod-template-hash: "3807653042"
    name: assa-postgresql-3807653042-z23rp
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-postgresql-3807653042
      uid: 544b9431-65a9-11e7-977d-080027a5536f
    resourceVersion: "3328"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-postgresql-3807653042-z23rp
    uid: 5466d81e-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: POSTGRES_USER
        value: postgres
      - name: PGUSER
        value: postgres
      - name: POSTGRES_DB
        value: codefresh
      - name: POSTGRES_INITDB_ARGS
      - name: PGDATA
        value: /var/lib/postgresql/data/pgdata
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: assa-postgresql
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: postgres:9.6.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - sh
          - -c
          - exec pg_isready --host $POD_IP
        failureThreshold: 6
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: assa-postgresql
      ports:
      - containerPort: 5432
        name: postgresql
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - sh
          - -c
          - exec pg_isready --host $POD_IP
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/postgresql/data/pgdata
        name: data
        subPath: postgresql-db
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: assa-postgresql
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:47Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:18:12Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:47Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ef4c5c38412c6b764a90e4afc4b97a52874e2fdf3b7e755c108bb9b6668eff20
      image: postgres:9.6.2
      imageID: docker://sha256:b3b8a22299537a43dc0eb06d8cd469fcdbbca5e8b221dd5f67653242c3951fa1
      lastState: {}
      name: assa-postgresql
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:18:05Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.19
    qosClass: Burstable
    startTime: 2017-07-10T19:52:47Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-rabbitmq-2287021035","uid":"54c84f05-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"896"}}
    creationTimestamp: 2017-07-10T19:52:40Z
    generateName: assa-rabbitmq-2287021035-
    labels:
      app: assa-rabbitmq
      pod-template-hash: "2287021035"
    name: assa-rabbitmq-2287021035-2j2w1
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-rabbitmq-2287021035
      uid: 54c84f05-65a9-11e7-977d-080027a5536f
    resourceVersion: "3061"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-rabbitmq-2287021035-2j2w1
    uid: 54f349f5-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: RABBITMQ_USERNAME
        value: user
      - name: RABBITMQ_PASSWORD
        valueFrom:
          secretKeyRef:
            key: rabbitmq-password
            name: assa-rabbitmq
      - name: RABBITMQ_ERLANG_COOKIE
        valueFrom:
          secretKeyRef:
            key: rabbitmq-erlang-cookie
            name: assa-rabbitmq
      - name: RABBITMQ_NODE_PORT
        value: "5672"
      - name: RABBITMQ_NODE_TYPE
        value: stats
      - name: RABBITMQ_NODE_NAME
        value: rabbit@localhost
      - name: RABBITMQ_CLUSTER_NODE_NAME
      - name: RABBITMQ_VHOST
        value: /
      - name: RABBITMQ_MANAGER_PORT
        value: "15672"
      image: bitnami/rabbitmq:3.6.10-r0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - rabbitmqctl
          - status
        failureThreshold: 6
        initialDelaySeconds: 120
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: assa-rabbitmq
      ports:
      - containerPort: 4369
        name: epmd
        protocol: TCP
      - containerPort: 5672
        name: ampq
        protocol: TCP
      - containerPort: 25672
        name: dist
        protocol: TCP
      - containerPort: 15672
        name: stats
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - rabbitmqctl
          - status
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/rabbitmq
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: assa-rabbitmq
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:44Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:15:36Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:44Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://96fcaf13c3344627ee2f4ecedc8b8d746dc3a54511c42f1a9df53bd808ce2469
      image: bitnami/rabbitmq:3.6.10-r0
      imageID: docker://sha256:02603d48b447189e7a7fb82a2453b8cecaa43b214b25873f504cb4a4609074be
      lastState: {}
      name: assa-rabbitmq
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:15:20Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.18
    qosClass: Burstable
    startTime: 2017-07-10T19:52:44Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-redis-857011042","uid":"54d5717b-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"899"}}
    creationTimestamp: 2017-07-10T19:52:40Z
    generateName: assa-redis-857011042-
    labels:
      app: assa-redis
      pod-template-hash: "857011042"
    name: assa-redis-857011042-r44xf
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-redis-857011042
      uid: 54d5717b-65a9-11e7-977d-080027a5536f
    resourceVersion: "2531"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-redis-857011042-r44xf
    uid: 54f25057-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: assa-redis
      image: bitnami/redis:3.2.9-r2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - redis-cli
          - ping
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: assa-redis
      ports:
      - containerPort: 6379
        name: redis
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - redis-cli
          - ping
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/redis
        name: redis-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: redis-data
      persistentVolumeClaim:
        claimName: assa-redis
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:41Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:11:31Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:41Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1a8eee055c64666134bffa65e9dbc71fdf532643e69c692380601285a0ce086b
      image: bitnami/redis:3.2.9-r2
      imageID: docker://sha256:40856dba0c5d76f12017322c135f3ee0989a873ed13a4ac1b3dc896946fc9a06
      lastState: {}
      name: assa-redis
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:11:18Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.13
    qosClass: Burstable
    startTime: 2017-07-10T19:52:41Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"codefresh","name":"assa-registry-2992272138","uid":"5461a4ca-65a9-11e7-977d-080027a5536f","apiVersion":"extensions","resourceVersion":"862"}}
    creationTimestamp: 2017-07-10T19:52:39Z
    generateName: assa-registry-2992272138-
    labels:
      app: assa-registry
      chart: registry-0.1.0
      heritage: Tiller
      pod-template-hash: "2992272138"
      release: assa
    name: assa-registry-2992272138-1l2z6
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: assa-registry-2992272138
      uid: 5461a4ca-65a9-11e7-977d-080027a5536f
    resourceVersion: "3359"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-registry-2992272138-1l2z6
    uid: 547133c0-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - env:
      - name: REGISTRY_HTTP_ADDR
        value: :5000
      - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
        value: /var/lib/registry
      - name: REGISTRY_HTTP_TLS_CERTIFICATE
        value: /etc/ssl/cf/cert.pem
      - name: REGISTRY_HTTP_TLS_KEY
        value: /etc/ssl/cf/key.pem
      image: registry:2.6
      imagePullPolicy: IfNotPresent
      name: assa-registry
      ports:
      - containerPort: 5000
        name: registry
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/registry
        name: image-store
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    volumes:
    - name: image-store
      persistentVolumeClaim:
        claimName: assa-registry
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: assa-cf-certs
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:47Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:18:29Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:47Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://93947008ac56cd2684ff46d9b09d3f113a40f1dfd5412416378f689fc0f37c7b
      image: registry:2.6
      imageID: docker://sha256:c2a449c9f8344bc09d07c42839c6ea012ffb522456c52304175c0519ce7870d4
      lastState: {}
      name: assa-registry
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:18:28Z
    hostIP: 192.168.99.100
    phase: Running
    podIP: 10.10.0.20
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:47Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/created-by: |
        {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"StatefulSet","namespace":"codefresh","name":"assa-runner","uid":"55b4192b-65a9-11e7-977d-080027a5536f","apiVersion":"apps/v1beta1","resourceVersion":"962"}}
      pod.alpha.kubernetes.io/init-container-statuses: '[{"name":"register-runner-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-10T20:22:21Z","finishedAt":"2017-07-10T20:22:21Z","containerID":"docker://453f4801536c290a9c979df6740d413640c5ececbbb63344c535006796ab7488"}},"lastState":{},"ready":true,"restartCount":7,"image":"alexeiled/curl:3.6","imageID":"docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362","containerID":"docker://453f4801536c290a9c979df6740d413640c5ececbbb63344c535006796ab7488"}]'
      pod.alpha.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register assa-runner.codefresh
        codefresh.dev"],"resources":{},"volumeMounts":[{"name":"runner-config","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-p1px5","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
      pod.beta.kubernetes.io/init-container-statuses: '[{"name":"register-runner-container","state":{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2017-07-10T20:22:21Z","finishedAt":"2017-07-10T20:22:21Z","containerID":"docker://453f4801536c290a9c979df6740d413640c5ececbbb63344c535006796ab7488"}},"lastState":{},"ready":true,"restartCount":7,"image":"alexeiled/curl:3.6","imageID":"docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362","containerID":"docker://453f4801536c290a9c979df6740d413640c5ececbbb63344c535006796ab7488"}]'
      pod.beta.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
        +x /opt/dind/register \u0026\u0026 /opt/dind/register assa-runner.codefresh
        codefresh.dev"],"resources":{},"volumeMounts":[{"name":"runner-config","mountPath":"/opt/dind/register","subPath":"register"},{"name":"default-token-p1px5","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
    creationTimestamp: 2017-07-10T19:52:42Z
    generateName: assa-runner-
    labels:
      app: assa-runner
      chart: runner-0.1.2
      controller-revision-hash: assa-runner-4270982610
      heritage: Tiller
      release: assa
    name: assa-runner-0
    namespace: codefresh
    ownerReferences:
    - apiVersion: apps/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: assa-runner
      uid: 55b4192b-65a9-11e7-977d-080027a5536f
    resourceVersion: "3838"
    selfLink: /api/v1/namespaces/codefresh/pods/assa-runner-0
    uid: 561893e9-65a9-11e7-977d-080027a5536f
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        rm -fv /var/run/docker.pid
        mkdir /var/run/codefresh
        mkdir -p /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/
        cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/ca.crt
        dockerd
      env:
      - name: REGISTRY_SERVICE
        valueFrom:
          configMapKeyRef:
            key: registry-service
            name: assa-codefresh
      - name: RUNTIME_LOCAL_REGISTRY_NAME
        value: $(REGISTRY_SERVICE).codefresh.svc:5000
      image: docker:17.05-dind
      imagePullPolicy: IfNotPresent
      name: assa-runner
      ports:
      - containerPort: 1300
        hostPort: 1300
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/cf
        name: cf-certs
        readOnly: true
      - mountPath: /etc/docker/daemon.json
        name: runner-config
        readOnly: true
        subPath: daemon.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    hostNetwork: true
    hostname: assa-runner-0
    initContainers:
    - command:
      - /bin/sh
      - -c
      - chmod +x /opt/dind/register && /opt/dind/register assa-runner.codefresh codefresh.dev
      image: alexeiled/curl:3.6
      imagePullPolicy: IfNotPresent
      name: register-runner-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/dind/register
        name: runner-config
        subPath: register
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p1px5
        readOnly: true
    nodeName: minikube
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: assa-runner
    terminationGracePeriodSeconds: 30
    volumes:
    - name: cf-certs
      secret:
        defaultMode: 420
        secretName: assa-cf-certs
    - configMap:
        defaultMode: 420
        name: assa-runner
      name: runner-config
    - name: default-token-p1px5
      secret:
        defaultMode: 420
        secretName: default-token-p1px5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:22:22Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T20:23:39Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2017-07-10T19:52:42Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8bdda77b3b310a731c41765e2c2ae40ac1b5083fe50fa97d782a37435e201f09
      image: docker:17.05-dind
      imageID: docker://sha256:63b0daf021803454169fca62f03ee99744ddf1fd14db23f760b0b86856ae04de
      lastState: {}
      name: assa-runner
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2017-07-10T20:23:38Z
    hostIP: 192.168.99.100
    initContainerStatuses:
    - containerID: docker://453f4801536c290a9c979df6740d413640c5ececbbb63344c535006796ab7488
      image: alexeiled/curl:3.6
      imageID: docker://sha256:cdc1992ae39737b0363fc5304baee019bbd4047e4cee8baf859c7395baf9e362
      lastState: {}
      name: register-runner-container
      ready: true
      restartCount: 7
      state:
        terminated:
          containerID: docker://453f4801536c290a9c979df6740d413640c5ececbbb63344c535006796ab7488
          exitCode: 0
          finishedAt: 2017-07-10T20:22:21Z
          reason: Completed
          startedAt: 2017-07-10T20:22:21Z
    phase: Running
    podIP: 192.168.99.100
    qosClass: BestEffort
    startTime: 2017-07-10T19:52:42Z
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:38Z
    labels:
      app: assa-builder
      chart: builder-0.1.2
      heritage: Tiller
      release: assa
    name: assa-builder
    namespace: codefresh
    resourceVersion: "797"
    selfLink: /api/v1/namespaces/codefresh/services/assa-builder
    uid: 53e47619-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: dind-port
      port: 1300
      protocol: TCP
      targetPort: 1300
    selector:
      app: assa-builder
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      app: assa-cfapi
      chart: cfapi-0.1.2
      heritage: Tiller
      release: assa
      version: v120
    name: assa-cfapi
    namespace: codefresh
    resourceVersion: "807"
    selfLink: /api/v1/namespaces/codefresh/services/assa-cfapi
    uid: 53f9bcb5-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.212
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 30289
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: assa-cfapi
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      app: assa-cfui
      chart: cfui-0.1.2
      heritage: Tiller
      release: assa
      version: v101
    name: assa-cfui
    namespace: codefresh
    resourceVersion: "803"
    selfLink: /api/v1/namespaces/codefresh/services/assa-cfui
    uid: 53efd4cb-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.111
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 31935
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: assa-cfui
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      chart: consul-0.3.0
      component: assa-consul
      heritage: Tiller
      release: assa
    name: assa-consul
    namespace: codefresh
    resourceVersion: "812"
    selfLink: /api/v1/namespaces/codefresh/services/assa-consul
    uid: 5406fb35-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 8500
      protocol: TCP
      targetPort: 8500
    - name: rpc
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: serflan-tcp
      port: 8301
      protocol: TCP
      targetPort: 8301
    - name: serflan-udp
      port: 8301
      protocol: UDP
      targetPort: 8301
    - name: serfwan-tcp
      port: 8302
      protocol: TCP
      targetPort: 8302
    - name: serfwan-udp
      port: 8302
      protocol: UDP
      targetPort: 8302
    - name: server
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: consuldns
      port: 8600
      protocol: TCP
      targetPort: 8600
    selector:
      component: assa-consul
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      chart: consul-0.3.0
      component: assa-consul
      heritage: Tiller
      release: assa
    name: assa-consul-ui
    namespace: codefresh
    resourceVersion: "818"
    selfLink: /api/v1/namespaces/codefresh/services/assa-consul-ui
    uid: 54112905-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.54
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 30172
      port: 8500
      protocol: TCP
      targetPort: 8500
    selector:
      component: assa-consul
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:38Z
    labels:
      app: assa-mongodb
      chart: mongodb-0.4.11
      heritage: Tiller
      release: assa
    name: assa-mongodb
    namespace: codefresh
    resourceVersion: "787"
    selfLink: /api/v1/namespaces/codefresh/services/assa-mongodb
    uid: 53d6fef1-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.25
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: mongodb
    selector:
      app: assa-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      app: assa-nats
      chart: nats-0.1.0
      heritage: Tiller
      release: assa
    name: assa-nats
    namespace: codefresh
    resourceVersion: "822"
    selfLink: /api/v1/namespaces/codefresh/services/assa-nats
    uid: 541dde1e-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 4222
      protocol: TCP
      targetPort: 4222
    - name: http
      port: 8222
      protocol: TCP
      targetPort: 8222
    - name: clusterig
      port: 6222
      protocol: TCP
      targetPort: 6222
    selector:
      app: assa-nats
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      app: assa-postgresql
      chart: postgresql-0.7.1
      heritage: Tiller
      release: assa
    name: assa-postgresql
    namespace: codefresh
    resourceVersion: "826"
    selfLink: /api/v1/namespaces/codefresh/services/assa-postgresql
    uid: 542b659f-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.158
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: postgresql
    selector:
      app: assa-postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:38Z
    labels:
      app: assa-rabbitmq
      chart: rabbitmq-0.5.3
      heritage: Tiller
      release: assa
    name: assa-rabbitmq
    namespace: codefresh
    resourceVersion: "792"
    selfLink: /api/v1/namespaces/codefresh/services/assa-rabbitmq
    uid: 53dbd76a-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.42
    ports:
    - name: epmd
      port: 4369
      protocol: TCP
      targetPort: epmd
    - name: ampq
      port: 5672
      protocol: TCP
      targetPort: ampq
    - name: dist
      port: 25672
      protocol: TCP
      targetPort: dist
    - name: stats
      port: 15672
      protocol: TCP
      targetPort: stats
    selector:
      app: assa-rabbitmq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      app: assa-redis
      chart: redis-0.8.0
      heritage: Tiller
      release: assa
    name: assa-redis
    namespace: codefresh
    resourceVersion: "810"
    selfLink: /api/v1/namespaces/codefresh/services/assa-redis
    uid: 5402578f-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.104
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: redis
    selector:
      app: assa-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:39Z
    labels:
      app: assa-registry
      chart: registry-0.1.0
      component: main
      heritage: Tiller
      release: assa
    name: assa-registry
    namespace: codefresh
    resourceVersion: "831"
    selfLink: /api/v1/namespaces/codefresh/services/assa-registry
    uid: 542e81b7-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: 10.0.0.16
    ports:
    - name: assa-registry
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app: assa-registry
      component: main
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 2017-07-10T19:52:38Z
    labels:
      app: assa-runner
      chart: runner-0.1.2
      heritage: Tiller
      release: assa
    name: assa-runner
    namespace: codefresh
    resourceVersion: "798"
    selfLink: /api/v1/namespaces/codefresh/services/assa-runner
    uid: 53e81855-65a9-11e7-977d-080027a5536f
  spec:
    clusterIP: None
    ports:
    - name: dind-port
      port: 1300
      protocol: TCP
      targetPort: 1300
    selector:
      app: assa-runner
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-10T19:52:41Z
    generation: 1
    labels:
      app: assa-builder
      chart: builder-0.1.2
      heritage: Tiller
      release: assa
    name: assa-builder
    namespace: codefresh
    resourceVersion: "3874"
    selfLink: /apis/apps/v1beta1/namespaces/codefresh/statefulsets/assa-builder
    uid: 5567390b-65a9-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: assa-builder
        chart: builder-0.1.2
        heritage: Tiller
        release: assa
    serviceName: assa-builder
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} assa-builder.codefresh"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}}],"resources":{},"volumeMounts":[{"name":"builder-config","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
          pod.beta.kubernetes.io/init-containers: '[{"name":"register-dind-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register ${POD_NAME} assa-builder.codefresh"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}}],"resources":{},"volumeMounts":[{"name":"builder-config","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
        creationTimestamp: null
        labels:
          app: assa-builder
          chart: builder-0.1.2
          heritage: Tiller
          release: assa
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - |
            rm -fv /var/run/docker.pid
            mkdir /var/run/codefresh
            mkdir -p /etc/docker/certs.d/registry.codefresh.svc:5000/
            cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/registry.codefresh.svc:5000/ca.crt
            dockerd
          image: docker:17.05-dind
          imagePullPolicy: IfNotPresent
          name: assa-builder
          ports:
          - containerPort: 1300
            protocol: TCP
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
          - mountPath: /etc/docker/daemon.json
            name: builder-config
            readOnly: true
            subPath: daemon.json
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/sh
          - -c
          - chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME} assa-builder.codefresh
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: alexeiled/curl:3.6
          imagePullPolicy: IfNotPresent
          name: register-dind-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/dind/register
            name: builder-config
            subPath: register
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: assa-cf-certs
        - configMap:
            defaultMode: 420
            name: assa-builder
          name: builder-config
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 2
    currentRevision: assa-builder-294718848
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updateRevision: assa-builder-294718848
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-10T19:52:40Z
    generation: 1
    labels:
      chart: consul-0.3.0
      component: assa-consul
      heritage: Tiller
      release: assa
    name: assa-consul
    namespace: codefresh
    resourceVersion: "3426"
    selfLink: /apis/apps/v1beta1/namespaces/codefresh/statefulsets/assa-consul
    uid: 550a1fd8-65a9-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        chart: consul-0.3.0
        component: assa-consul
        heritage: Tiller
        release: assa
    serviceName: assa-consul
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
        creationTimestamp: null
        labels:
          chart: consul-0.3.0
          component: assa-consul
          heritage: Tiller
          release: assa
        name: assa-consul
      spec:
        containers:
        - command:
          - /bin/sh
          - -ec
          - |
            IP=$(hostname -i)

            if [ -e /etc/consul/secrets/gossip-key ]; then
              echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
              GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
            fi

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
                    ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+ } -retry-join $(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc | awk -F'[()]' '/PING/{print $2}')"
            done

            exec /bin/consul agent \
              -ui \
              -data-dir=/var/lib/consul \
              -server \
              -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
              -bind=0.0.0.0 \
              -advertise=${IP} \
              ${PEERS} \
              ${GOSSIP_KEY} \
              -client=0.0.0.0
          env:
          - name: INITIAL_CLUSTER_SIZE
            value: "1"
          - name: STATEFULSET_NAME
            value: assa-consul
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: STATEFULSET_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: consul:0.8.3
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - consul
              - members
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-consul
          ports:
          - containerPort: 8500
            name: http
            protocol: TCP
          - containerPort: 8400
            name: rpc
            protocol: TCP
          - containerPort: 8301
            name: serflan-tcp
            protocol: TCP
          - containerPort: 8301
            name: serflan-udp
            protocol: UDP
          - containerPort: 8302
            name: serfwan-tcp
            protocol: TCP
          - containerPort: 8302
            name: serfwan-udp
            protocol: UDP
          - containerPort: 8300
            name: server
            protocol: TCP
          - containerPort: 8600
            name: consuldns
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/consul
            name: datadir
          - mountPath: /etc/consul/secrets
            name: gossip-key
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        terminationGracePeriodSeconds: 30
        volumes:
        - name: gossip-key
          secret:
            defaultMode: 420
            secretName: assa-consul-gossip-key
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        annotations:
          volume.alpha.kubernetes.io/storage-class: default
        creationTimestamp: null
        name: datadir
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status:
        phase: Pending
  status:
    currentReplicas: 1
    currentRevision: assa-consul-801398846
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: assa-consul-801398846
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-10T19:52:41Z
    generation: 1
    labels:
      app: assa-nats
      chart: nats-0.1.0
      heritage: Tiller
      release: assa
    name: assa-nats
    namespace: codefresh
    resourceVersion: "2526"
    selfLink: /apis/apps/v1beta1/namespaces/codefresh/statefulsets/assa-nats
    uid: 558a82a5-65a9-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: assa-nats
        chart: nats-0.1.0
        heritage: Tiller
        release: assa
    serviceName: assa-nats
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
        creationTimestamp: null
        labels:
          app: assa-nats
          chart: nats-0.1.0
          heritage: Tiller
          release: assa
      spec:
        containers:
        - args:
          - --addr
          - 0.0.0.0
          - --port
          - "4222"
          - --http_port
          - "8222"
          - --cluster
          - nats://$(POD_IP):6222
          - --routes
          - nats://assa-nats-0.nats.svc.cluster.local:6222
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: nats:0.9.4
          imagePullPolicy: IfNotPresent
          name: assa-nats
          ports:
          - containerPort: 8222
            protocol: TCP
          - containerPort: 6222
            protocol: TCP
          - containerPort: 4222
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 1
    currentRevision: assa-nats-72464890
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: assa-nats-72464890
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    creationTimestamp: 2017-07-10T19:52:41Z
    generation: 1
    labels:
      app: assa-runner
      chart: runner-0.1.2
      heritage: Tiller
      release: assa
    name: assa-runner
    namespace: codefresh
    resourceVersion: "3840"
    selfLink: /apis/apps/v1beta1/namespaces/codefresh/statefulsets/assa-runner
    uid: 55b4192b-65a9-11e7-977d-080027a5536f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: assa-runner
        chart: runner-0.1.2
        heritage: Tiller
        release: assa
    serviceName: assa-runner
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register assa-runner.codefresh
            codefresh.dev"],"resources":{},"volumeMounts":[{"name":"runner-config","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
          pod.beta.kubernetes.io/init-containers: '[{"name":"register-runner-container","image":"alexeiled/curl:3.6","command":["/bin/sh","-c","chmod
            +x /opt/dind/register \u0026\u0026 /opt/dind/register assa-runner.codefresh
            codefresh.dev"],"resources":{},"volumeMounts":[{"name":"runner-config","mountPath":"/opt/dind/register","subPath":"register"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"}]'
        creationTimestamp: null
        labels:
          app: assa-runner
          chart: runner-0.1.2
          heritage: Tiller
          release: assa
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - |
            rm -fv /var/run/docker.pid
            mkdir /var/run/codefresh
            mkdir -p /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/
            cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/ca.crt
            dockerd
          env:
          - name: REGISTRY_SERVICE
            valueFrom:
              configMapKeyRef:
                key: registry-service
                name: assa-codefresh
          - name: RUNTIME_LOCAL_REGISTRY_NAME
            value: $(REGISTRY_SERVICE).codefresh.svc:5000
          image: docker:17.05-dind
          imagePullPolicy: IfNotPresent
          name: assa-runner
          ports:
          - containerPort: 1300
            hostPort: 1300
            protocol: TCP
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
          - mountPath: /etc/docker/daemon.json
            name: runner-config
            readOnly: true
            subPath: daemon.json
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        initContainers:
        - command:
          - /bin/sh
          - -c
          - chmod +x /opt/dind/register && /opt/dind/register assa-runner.codefresh
            codefresh.dev
          image: alexeiled/curl:3.6
          imagePullPolicy: IfNotPresent
          name: register-runner-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/dind/register
            name: runner-config
            subPath: register
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: assa-cf-certs
        - configMap:
            defaultMode: 420
            name: assa-runner
          name: runner-config
    updateStrategy:
      type: OnDelete
  status:
    currentReplicas: 1
    currentRevision: assa-runner-4270982610
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: assa-runner-4270982610
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: 2017-07-10T19:52:42Z
    labels:
      app: assa-cfapi
      chart: cfapi-0.1.2
      heritage: Tiller
      release: assa
    name: assa-cfapi-seed-mongo
    namespace: codefresh
    resourceVersion: "2512"
    selfLink: /apis/batch/v1/namespaces/codefresh/jobs/assa-cfapi-seed-mongo
    uid: 55c8aafc-65a9-11e7-977d-080027a5536f
  spec:
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: 55c8aafc-65a9-11e7-977d-080027a5536f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfapi
          chart: cfapi-0.1.2
          controller-uid: 55c8aafc-65a9-11e7-977d-080027a5536f
          heritage: Tiller
          job-name: assa-cfapi-seed-mongo
          release: assa
        name: assa-cfapi-seed-mongo
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - mongoimport --host assa-$(MONGO_SERVICE):$(MONGO_PORT) --db $(MONGO_DATABASE)
            --username $(MONGO_USER) --password $(MONGO_PASSWORD) --collection accounts
            --type json --file /etc/admin/accounts.json
          env:
          - name: MONGO_SERVICE
            valueFrom:
              configMapKeyRef:
                key: mongodb-service
                name: assa-codefresh
          - name: MONGO_PORT
            valueFrom:
              configMapKeyRef:
                key: mongodb-port
                name: assa-codefresh
          - name: MONGO_DATABASE
            valueFrom:
              configMapKeyRef:
                key: mongodb-database
                name: assa-codefresh
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                key: mongodb-user
                name: assa-codefresh
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: assa-codefresh
          image: bitnami/mongodb:3.4.5-r0
          imagePullPolicy: IfNotPresent
          name: assa-cfapi-admin-account
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/admin/accounts.json
            name: seed
            subPath: accounts.json
        - command:
          - /bin/sh
          - -c
          - mongoimport --host assa-$(MONGO_SERVICE):$(MONGO_PORT) --db $(MONGO_DATABASE)
            --username  $(MONGO_USER) --password  $(MONGO_PASSWORD) --collection users
            --type json --file /etc/admin/users.json
          env:
          - name: MONGO_SERVICE
            valueFrom:
              configMapKeyRef:
                key: mongodb-service
                name: assa-codefresh
          - name: MONGO_PORT
            valueFrom:
              configMapKeyRef:
                key: mongodb-port
                name: assa-codefresh
          - name: MONGO_DATABASE
            valueFrom:
              configMapKeyRef:
                key: mongodb-database
                name: assa-codefresh
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                key: mongodb-user
                name: assa-codefresh
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: assa-codefresh
          image: bitnami/mongodb:3.4.5-r0
          imagePullPolicy: IfNotPresent
          name: assa-cfapi-admin-user
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/admin/users.json
            name: seed
            subPath: users.json
        dnsPolicy: ClusterFirst
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: assa-cfapi
          name: seed
  status:
    completionTime: 2017-07-10T20:11:23Z
    conditions:
    - lastProbeTime: 2017-07-10T20:11:23Z
      lastTransitionTime: 2017-07-10T20:11:23Z
      status: "True"
      type: Complete
    startTime: 2017-07-10T19:52:42Z
    succeeded: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      helm.sh/hook: pre-install
      helm.sh/hook-weight: "2"
    creationTimestamp: 2017-07-10T19:50:55Z
    labels:
      app: assa-codefresh
      chart: codefresh-0.1.1
      heritage: Tiller
      release: assa
    name: assa-codefresh-gencerts
    namespace: codefresh
    resourceVersion: "752"
    selfLink: /apis/batch/v1/namespaces/codefresh/jobs/assa-codefresh-gencerts
    uid: 16237fc2-65a9-11e7-977d-080027a5536f
  spec:
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: 16237fc2-65a9-11e7-977d-080027a5536f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-codefresh
          chart: codefresh-0.1.1
          controller-uid: 16237fc2-65a9-11e7-977d-080027a5536f
          heritage: Tiller
          job-name: assa-codefresh-gencerts
          release: assa
        name: assa-codefresh-gencerts
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - chmod +x /opt/codefresh/gen-runtime-certs ; /opt/codefresh/gen-runtime-certs
          image: lachlanevenson/k8s-kubectl:v1.6.4
          imagePullPolicy: IfNotPresent
          name: assa-codefresh-certs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/codefresh/gen-runtime-certs
            name: tools
            subPath: gen-runtime-certs
        - command:
          - /bin/sh
          - -c
          - chmod +x /opt/codefresh/gen-website-tls ; /opt/codefresh/gen-website-tls
          image: lachlanevenson/k8s-kubectl:v1.6.4
          imagePullPolicy: IfNotPresent
          name: assa-codefresh-tls
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/codefresh/gen-website-tls
            name: tools
            subPath: gen-website-tls
        dnsPolicy: ClusterFirst
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: assa-codefresh-certs-scripts
          name: tools
  status:
    completionTime: 2017-07-10T19:52:36Z
    conditions:
    - lastProbeTime: 2017-07-10T19:52:36Z
      lastTransitionTime: 2017-07-10T19:52:36Z
      status: "True"
      type: Complete
    startTime: 2017-07-10T19:50:55Z
    succeeded: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:40Z
    generation: 1
    labels:
      app: assa-cfapi
      chart: cfapi-0.1.2
      heritage: Tiller
      release: assa
      version: v120
    name: assa-cfapi
    namespace: codefresh
    resourceVersion: "2847"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-cfapi
    uid: 54cff8c9-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-cfapi
    strategy:
      rollingUpdate:
        maxSurge: 50%
        maxUnavailable: 50%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfapi
          chart: cfapi-0.1.2
          heritage: Tiller
          release: assa
          version: v120
      spec:
        containers:
        - env:
          - name: APP_ENV
            value: staging
          - name: DOCKER_NODE_CERT_PATH
            value: /etc/ssl/cf
          - name: DOCKER_NODE_PUBLIC_DOMAIN
            value: cf-cd.com
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: LOGS_PATH
            value: /var/log/cf-api.log
          - name: MAIL_ACTIVE
            value: "false"
          - name: NODE_ENV
            value: kubernetes
          - name: OAUTH_ROUTER_CALLBACK
          - name: PROGRESS_BUILDLOGS_BUCKETNAME
            value: progress-logs-staging
          - name: PROVIDERS_JSON_PATH
            value: /etc/admin/providers.json
          - name: PORT
            value: "80"
          - name: PROTOCOL
            value: https
          - name: CF_HOST_NAME
            valueFrom:
              configMapKeyRef:
                key: app-url
                name: assa-codefresh
          - name: EXTERNAL_URL
            value: https://$(CF_HOST_NAME)
          - name: MONGO_SERVICE
            valueFrom:
              configMapKeyRef:
                key: mongodb-service
                name: assa-codefresh
          - name: MONGO_PORT
            valueFrom:
              configMapKeyRef:
                key: mongodb-port
                name: assa-codefresh
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                key: mongodb-user
                name: assa-codefresh
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: assa-codefresh
          - name: MONGO_DATABASE
            valueFrom:
              configMapKeyRef:
                key: mongodb-database
                name: assa-codefresh
          - name: MONGO_URI
            value: mongodb://$(MONGO_USER):$(MONGO_PASSWORD)@assa-$(MONGO_SERVICE).codefresh:$(MONGO_PORT)/$(MONGO_DATABASE)
          - name: CONSUL_SERVICE
            valueFrom:
              configMapKeyRef:
                key: consul-service
                name: assa-codefresh
          - name: CONSUL_HOST
            value: assa-$(CONSUL_SERVICE).codefresh
          - name: NATS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: nats-service
                name: assa-codefresh
          - name: NATS_PORT
            valueFrom:
              configMapKeyRef:
                key: nats-port
                name: assa-codefresh
          - name: QUEUE_SERVERS
            value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
          - name: RABBIT_SERVICE
            valueFrom:
              configMapKeyRef:
                key: rabbitmq-service
                name: assa-codefresh
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-codefresh
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitmq-username
                name: assa-codefresh
          - name: RABBIT_URL
            value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                key: postgres-service
                name: assa-codefresh
          - name: POSTGRES_HOST
            value: assa-$(POSTGRES_SERVICE).codefresh
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres-database
                name: assa-codefresh
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres-user
                name: assa-codefresh
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-codefresh
          - name: REDIS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: redis-service
                name: assa-codefresh
          - name: REDIS_URL
            value: assa-$(REDIS_SERVICE).codefresh
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-codefresh
          - name: GITHUB_API_HOST
            value: api.github.com
          - name: GITHUB_API_PATH_PREFIX
            value: /api/v3
          - name: GITHUB_LOGIN_HOST
            value: github.com
          - name: GITHUB_PROTOCOL
            value: https
          - name: GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: github-client-id
                name: assa-codefresh
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: github-client-secret
                name: assa-codefresh
          - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                key: github-internal-token
                name: assa-codefresh
          - name: GITLAB_LOGIN_HOST
            value: gitlab.com
          - name: GITLAB_PROTOCOL
            value: https
          - name: GITLAB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: gitlab-client-id
                name: assa-codefresh
          - name: GITLAB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: gitlab-client-secret
                name: assa-codefresh
          - name: BITBUCKET_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-id
                name: assa-codefresh
          - name: BITBUCKET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-secret
                name: assa-codefresh
          - name: API_SAFE_SECRET
            valueFrom:
              secretKeyRef:
                key: api-safe-secret
                name: assa-codefresh
          - name: STRIPE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: stripe-secret-key
                name: assa-codefresh
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: assa-codefresh
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: assa-codefresh
          - name: SLACK_APP_ID
            valueFrom:
              secretKeyRef:
                key: slack-app-id
                name: assa-codefresh
          - name: SLACK_INTERNAL
            valueFrom:
              secretKeyRef:
                key: slack-internal
                name: assa-codefresh
          - name: SLACK_APP_SECRET
            valueFrom:
              secretKeyRef:
                key: slack-app-secret
                name: assa-codefresh
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-key
                name: assa-codefresh
          - name: SEGMENT_ACTIVE
            value: "false"
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: assa-codefresh
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: assa-codefresh
          - name: TLS_SIGN_CLIENT_KEY
            valueFrom:
              secretKeyRef:
                key: tls-client-key
                name: assa-codefresh
          image: codefresh/cf-api:v120
          imagePullPolicy: IfNotPresent
          name: assa-cfapi
          ports:
          - containerPort: 80
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/ping
              port: 80
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/admin/providers.json
            name: config
            subPath: providers.json
          - mountPath: /etc/admin/accounts.json
            name: config
            subPath: accounts.json
          - mountPath: /etc/admin/users.json
            name: config
            subPath: users.json
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: assa-codefresh-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 40
        volumes:
        - configMap:
            defaultMode: 420
            name: assa-cfapi
          name: config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T20:13:37Z
      lastUpdateTime: 2017-07-10T20:13:37Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-cfruntime
      chart: cfruntime-0.1.2
      heritage: Tiller
      release: assa
      version: v71
    name: assa-cfruntime
    namespace: codefresh
    resourceVersion: "2470"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-cfruntime
    uid: 54605d4f-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-cfruntime
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfruntime
          chart: cfruntime-0.1.2
          heritage: Tiller
          release: assa
          version: v71
      spec:
        containers:
        - env:
          - name: CF_DOCKER_IMAGES_TAG
            value: develop
          - name: DOCKER_CERT_PATH
            value: /etc/ssl/cf
          - name: LOGGER_LEVEL
            value: error
          - name: LOGS_PATH
            value: /var/log/cf-runtime.log
          - name: NODE_ENV
            value: kubernetes
          - name: REGISTRY_CA_PATH
            value: /etc/ssl/cf/ca.pem
          - name: RUNTIME_ACTIVE_REGISTRY
            value: localRegistry
          - name: RUNTIME_GOOGLE_REGISTRY_PROJECT_NAME
          - name: RUNTIME_INTERNAL_REGISTRY_JSON
            value: /etc/admin/internal-registry.json
          - name: RUNTIME_LOCAL_REGISTRY_CA
            value: /etc/ssl/cf/ca.pem
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: assa-codefresh
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: assa-codefresh
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: assa-codefresh
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: assa-codefresh
          - name: CONSUL_SERVICE
            valueFrom:
              configMapKeyRef:
                key: consul-service
                name: assa-codefresh
          - name: CONSUL_HOST
            value: assa-$(CONSUL_SERVICE).codefresh
          - name: NATS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: nats-service
                name: assa-codefresh
          - name: NATS_PORT
            valueFrom:
              configMapKeyRef:
                key: nats-port
                name: assa-codefresh
          - name: QUEUE_SERVERS
            value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
          - name: RABBIT_SERVICE
            valueFrom:
              configMapKeyRef:
                key: rabbitmq-service
                name: assa-codefresh
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-codefresh
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitmq-username
                name: assa-codefresh
          - name: RABBIT_URL
            value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                key: postgres-service
                name: assa-codefresh
          - name: POSTGRES_HOST
            value: assa-$(POSTGRES_SERVICE).codefresh
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres-database
                name: assa-codefresh
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres-user
                name: assa-codefresh
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-codefresh
          - name: REDIS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: redis-service
                name: assa-codefresh
          - name: REDIS_URL
            value: assa-$(REDIS_SERVICE).codefresh
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-codefresh
          - name: DOCKER_PUSHER_IMAGE
            value: codefresh/cf-docker-pusher:v2
          - name: DOCKER_PULLER_IMAGE
            value: codefresh/cf-docker-puller:v2
          - name: DOCKER_BUILDER_IMAGE
            value: codefresh/cf-docker-builder:v5
          - name: CONTAINER_LOGGER_IMAGE
            value: codefresh/cf-container-logger:0.0.15
          - name: GIT_CLONE_IMAGE
            value: codefresh/cf-git-cloner:v1
          - name: RUNTIME_LOCAL_REGISTRY_NAME
            value: assa-registry.codefresh.svc:5000
          image: codefresh/cf-runtime:v71
          imagePullPolicy: IfNotPresent
          name: assa-cfruntime
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/docker.sock
            name: docker-socket
          - mountPath: /etc/ssl/cf/
            name: cf-certs
            readOnly: true
          - mountPath: /etc/admin/internal-registry.json
            name: internal-registry
            subPath: internal-registry.json
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: assa-codefresh-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: assa-cf-certs
        - hostPath:
            path: /var/run/docker.sock
          name: docker-socket
        - configMap:
            defaultMode: 420
            name: assa-registry
          name: internal-registry
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T20:10:58Z
      lastUpdateTime: 2017-07-10T20:10:58Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-cfui
      chart: cfui-0.1.2
      heritage: Tiller
      release: assa
      version: v101
    name: assa-cfui
    namespace: codefresh
    resourceVersion: "2370"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-cfui
    uid: 5433fdea-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-cfui
    strategy:
      rollingUpdate:
        maxSurge: 50%
        maxUnavailable: 50%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfui
          chart: cfui-0.1.2
          heritage: Tiller
          release: assa
          version: v101
      spec:
        containers:
        - env:
          - name: ASSETS_OPTIMIZED
            value: "true"
          - name: LAUNCH_DARKLY_KEY
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: LOGS_PATH
            value: /var/log/cf-ui.log
          - name: NEW_USER_REDIRECT
          - name: NODE_ENV
            value: kubernetes
          - name: ROLLBAR_ACCESS_TOKEN
          - name: SLACK_REDIRECTURI
          - name: STRIPE_PUBLIC_KEY
          - name: WALKME
          - name: PORT
            value: "80"
          - name: CF_HOST_NAME
            valueFrom:
              configMapKeyRef:
                key: app-url
                name: assa-codefresh
          - name: CODEFRESH_API_URL
            value: https://$(CF_HOST_NAME)
          - name: NATS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: nats-service
                name: assa-codefresh
          - name: NATS_PORT
            valueFrom:
              configMapKeyRef:
                key: nats-port
                name: assa-codefresh
          - name: QUEUE_SERVERS
            value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
          - name: RABBIT_SERVICE
            valueFrom:
              configMapKeyRef:
                key: rabbitmq-service
                name: assa-codefresh
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-codefresh
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitmq-username
                name: assa-codefresh
          - name: RABBIT_URL
            value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                key: postgres-service
                name: assa-codefresh
          - name: POSTGRES_HOST
            value: assa-$(POSTGRES_SERVICE).codefresh
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres-database
                name: assa-codefresh
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres-user
                name: assa-codefresh
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-codefresh
          - name: REDIS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: redis-service
                name: assa-codefresh
          - name: REDIS_URL
            value: assa-$(REDIS_SERVICE).codefresh
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-codefresh
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: assa-codefresh
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-key
                name: assa-codefresh
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: assa-codefresh
          - name: SLACK_APP_ID
            valueFrom:
              secretKeyRef:
                key: slack-app-id
                name: assa-codefresh
          image: codefresh/cf-ui:v101
          imagePullPolicy: IfNotPresent
          name: assa-cfui
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: assa-codefresh-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T20:09:41Z
      lastUpdateTime: 2017-07-10T20:09:41Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-mongodb
      chart: mongodb-0.4.11
      heritage: Tiller
      release: assa
    name: assa-mongodb
    namespace: codefresh
    resourceVersion: "1810"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-mongodb
    uid: 543b57b4-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-mongodb
      spec:
        containers:
        - env:
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: assa-mongodb
          - name: MONGODB_USERNAME
            value: cfuser
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: assa-mongodb
          - name: MONGODB_DATABASE
            value: codefresh
          image: bitnami/mongodb:3.4.5-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: assa-mongodb
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T19:52:39Z
      lastUpdateTime: 2017-07-10T19:52:39Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-postgresql
      chart: postgresql-0.7.1
      heritage: Tiller
      release: assa
    name: assa-postgresql
    namespace: codefresh
    resourceVersion: "3331"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-postgresql
    uid: 5446551a-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-postgresql
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRES_USER
            value: postgres
          - name: PGUSER
            value: postgres
          - name: POSTGRES_DB
            value: codefresh
          - name: POSTGRES_INITDB_ARGS
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-postgresql
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: postgres:9.6.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-postgresql
          ports:
          - containerPort: 5432
            name: postgresql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/postgresql/data/pgdata
            name: data
            subPath: postgresql-db
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: assa-postgresql
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T19:52:39Z
      lastUpdateTime: 2017-07-10T19:52:39Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-rabbitmq
      chart: rabbitmq-0.5.3
      heritage: Tiller
      release: assa
    name: assa-rabbitmq
    namespace: codefresh
    resourceVersion: "3064"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-rabbitmq
    uid: 5475ff80-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-rabbitmq
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-rabbitmq
      spec:
        containers:
        - env:
          - name: RABBITMQ_USERNAME
            value: user
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-rabbitmq
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                key: rabbitmq-erlang-cookie
                name: assa-rabbitmq
          - name: RABBITMQ_NODE_PORT
            value: "5672"
          - name: RABBITMQ_NODE_TYPE
            value: stats
          - name: RABBITMQ_NODE_NAME
            value: rabbit@localhost
          - name: RABBITMQ_CLUSTER_NODE_NAME
          - name: RABBITMQ_VHOST
            value: /
          - name: RABBITMQ_MANAGER_PORT
            value: "15672"
          image: bitnami/rabbitmq:3.6.10-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - rabbitmqctl
              - status
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-rabbitmq
          ports:
          - containerPort: 4369
            name: epmd
            protocol: TCP
          - containerPort: 5672
            name: ampq
            protocol: TCP
          - containerPort: 25672
            name: dist
            protocol: TCP
          - containerPort: 15672
            name: stats
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - rabbitmqctl
              - status
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/rabbitmq
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: assa-rabbitmq
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T19:52:41Z
      lastUpdateTime: 2017-07-10T19:52:41Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:40Z
    generation: 1
    labels:
      app: assa-redis
      chart: redis-0.8.0
      heritage: Tiller
      release: assa
    name: assa-redis
    namespace: codefresh
    resourceVersion: "2534"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-redis
    uid: 5491324e-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-redis
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-redis
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-redis
          image: bitnami/redis:3.2.9-r2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/redis
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: assa-redis
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T19:52:41Z
      lastUpdateTime: 2017-07-10T19:52:41Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-registry
      chart: registry-0.1.0
      heritage: Tiller
      release: assa
    name: assa-registry
    namespace: codefresh
    resourceVersion: "3361"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/deployments/assa-registry
    uid: 5453a437-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-registry
        chart: registry-0.1.0
        heritage: Tiller
        release: assa
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-registry
          chart: registry-0.1.0
          heritage: Tiller
          release: assa
      spec:
        containers:
        - env:
          - name: REGISTRY_HTTP_ADDR
            value: :5000
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /var/lib/registry
          - name: REGISTRY_HTTP_TLS_CERTIFICATE
            value: /etc/ssl/cf/cert.pem
          - name: REGISTRY_HTTP_TLS_KEY
            value: /etc/ssl/cf/key.pem
          image: registry:2.6
          imagePullPolicy: IfNotPresent
          name: assa-registry
          ports:
          - containerPort: 5000
            name: registry
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/registry
            name: image-store
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: image-store
          persistentVolumeClaim:
            claimName: assa-registry
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: assa-cf-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-07-10T19:52:40Z
      lastUpdateTime: 2017-07-10T19:52:40Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:40Z
    generation: 1
    labels:
      app: assa-cfapi
      chart: cfapi-0.1.2
      heritage: Tiller
      pod-template-hash: "8126120"
      release: assa
      version: v120
    name: assa-cfapi-8126120
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-cfapi
      uid: 54cff8c9-65a9-11e7-977d-080027a5536f
    resourceVersion: "2846"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-cfapi-8126120
    uid: 54fa7393-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-cfapi
        pod-template-hash: "8126120"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfapi
          chart: cfapi-0.1.2
          heritage: Tiller
          pod-template-hash: "8126120"
          release: assa
          version: v120
      spec:
        containers:
        - env:
          - name: APP_ENV
            value: staging
          - name: DOCKER_NODE_CERT_PATH
            value: /etc/ssl/cf
          - name: DOCKER_NODE_PUBLIC_DOMAIN
            value: cf-cd.com
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: LOGS_PATH
            value: /var/log/cf-api.log
          - name: MAIL_ACTIVE
            value: "false"
          - name: NODE_ENV
            value: kubernetes
          - name: OAUTH_ROUTER_CALLBACK
          - name: PROGRESS_BUILDLOGS_BUCKETNAME
            value: progress-logs-staging
          - name: PROVIDERS_JSON_PATH
            value: /etc/admin/providers.json
          - name: PORT
            value: "80"
          - name: PROTOCOL
            value: https
          - name: CF_HOST_NAME
            valueFrom:
              configMapKeyRef:
                key: app-url
                name: assa-codefresh
          - name: EXTERNAL_URL
            value: https://$(CF_HOST_NAME)
          - name: MONGO_SERVICE
            valueFrom:
              configMapKeyRef:
                key: mongodb-service
                name: assa-codefresh
          - name: MONGO_PORT
            valueFrom:
              configMapKeyRef:
                key: mongodb-port
                name: assa-codefresh
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                key: mongodb-user
                name: assa-codefresh
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: assa-codefresh
          - name: MONGO_DATABASE
            valueFrom:
              configMapKeyRef:
                key: mongodb-database
                name: assa-codefresh
          - name: MONGO_URI
            value: mongodb://$(MONGO_USER):$(MONGO_PASSWORD)@assa-$(MONGO_SERVICE).codefresh:$(MONGO_PORT)/$(MONGO_DATABASE)
          - name: CONSUL_SERVICE
            valueFrom:
              configMapKeyRef:
                key: consul-service
                name: assa-codefresh
          - name: CONSUL_HOST
            value: assa-$(CONSUL_SERVICE).codefresh
          - name: NATS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: nats-service
                name: assa-codefresh
          - name: NATS_PORT
            valueFrom:
              configMapKeyRef:
                key: nats-port
                name: assa-codefresh
          - name: QUEUE_SERVERS
            value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
          - name: RABBIT_SERVICE
            valueFrom:
              configMapKeyRef:
                key: rabbitmq-service
                name: assa-codefresh
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-codefresh
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitmq-username
                name: assa-codefresh
          - name: RABBIT_URL
            value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                key: postgres-service
                name: assa-codefresh
          - name: POSTGRES_HOST
            value: assa-$(POSTGRES_SERVICE).codefresh
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres-database
                name: assa-codefresh
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres-user
                name: assa-codefresh
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-codefresh
          - name: REDIS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: redis-service
                name: assa-codefresh
          - name: REDIS_URL
            value: assa-$(REDIS_SERVICE).codefresh
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-codefresh
          - name: GITHUB_API_HOST
            value: api.github.com
          - name: GITHUB_API_PATH_PREFIX
            value: /api/v3
          - name: GITHUB_LOGIN_HOST
            value: github.com
          - name: GITHUB_PROTOCOL
            value: https
          - name: GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: github-client-id
                name: assa-codefresh
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: github-client-secret
                name: assa-codefresh
          - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                key: github-internal-token
                name: assa-codefresh
          - name: GITLAB_LOGIN_HOST
            value: gitlab.com
          - name: GITLAB_PROTOCOL
            value: https
          - name: GITLAB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: gitlab-client-id
                name: assa-codefresh
          - name: GITLAB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: gitlab-client-secret
                name: assa-codefresh
          - name: BITBUCKET_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-id
                name: assa-codefresh
          - name: BITBUCKET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: bitbucket-client-secret
                name: assa-codefresh
          - name: API_SAFE_SECRET
            valueFrom:
              secretKeyRef:
                key: api-safe-secret
                name: assa-codefresh
          - name: STRIPE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: stripe-secret-key
                name: assa-codefresh
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: assa-codefresh
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: assa-codefresh
          - name: SLACK_APP_ID
            valueFrom:
              secretKeyRef:
                key: slack-app-id
                name: assa-codefresh
          - name: SLACK_INTERNAL
            valueFrom:
              secretKeyRef:
                key: slack-internal
                name: assa-codefresh
          - name: SLACK_APP_SECRET
            valueFrom:
              secretKeyRef:
                key: slack-app-secret
                name: assa-codefresh
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-key
                name: assa-codefresh
          - name: SEGMENT_ACTIVE
            value: "false"
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: assa-codefresh
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: assa-codefresh
          - name: TLS_SIGN_CLIENT_KEY
            valueFrom:
              secretKeyRef:
                key: tls-client-key
                name: assa-codefresh
          image: codefresh/cf-api:v120
          imagePullPolicy: IfNotPresent
          name: assa-cfapi
          ports:
          - containerPort: 80
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/ping
              port: 80
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/admin/providers.json
            name: config
            subPath: providers.json
          - mountPath: /etc/admin/accounts.json
            name: config
            subPath: accounts.json
          - mountPath: /etc/admin/users.json
            name: config
            subPath: users.json
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: assa-codefresh-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 40
        volumes:
        - configMap:
            defaultMode: 420
            name: assa-cfapi
          name: config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-cfruntime
      chart: cfruntime-0.1.2
      heritage: Tiller
      pod-template-hash: "3659982516"
      release: assa
      version: v71
    name: assa-cfruntime-3659982516
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-cfruntime
      uid: 54605d4f-65a9-11e7-977d-080027a5536f
    resourceVersion: "2469"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-cfruntime-3659982516
    uid: 546ae829-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-cfruntime
        pod-template-hash: "3659982516"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfruntime
          chart: cfruntime-0.1.2
          heritage: Tiller
          pod-template-hash: "3659982516"
          release: assa
          version: v71
      spec:
        containers:
        - env:
          - name: CF_DOCKER_IMAGES_TAG
            value: develop
          - name: DOCKER_CERT_PATH
            value: /etc/ssl/cf
          - name: LOGGER_LEVEL
            value: error
          - name: LOGS_PATH
            value: /var/log/cf-runtime.log
          - name: NODE_ENV
            value: kubernetes
          - name: REGISTRY_CA_PATH
            value: /etc/ssl/cf/ca.pem
          - name: RUNTIME_ACTIVE_REGISTRY
            value: localRegistry
          - name: RUNTIME_GOOGLE_REGISTRY_PROJECT_NAME
          - name: RUNTIME_INTERNAL_REGISTRY_JSON
            value: /etc/admin/internal-registry.json
          - name: RUNTIME_LOCAL_REGISTRY_CA
            value: /etc/ssl/cf/ca.pem
          - name: FIREBASE_SECRET
            valueFrom:
              secretKeyRef:
                key: firebase-secret
                name: assa-codefresh
          - name: FIREBASE_URL
            valueFrom:
              configMapKeyRef:
                key: firebase-url
                name: assa-codefresh
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: assa-codefresh
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: assa-codefresh
          - name: CONSUL_SERVICE
            valueFrom:
              configMapKeyRef:
                key: consul-service
                name: assa-codefresh
          - name: CONSUL_HOST
            value: assa-$(CONSUL_SERVICE).codefresh
          - name: NATS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: nats-service
                name: assa-codefresh
          - name: NATS_PORT
            valueFrom:
              configMapKeyRef:
                key: nats-port
                name: assa-codefresh
          - name: QUEUE_SERVERS
            value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
          - name: RABBIT_SERVICE
            valueFrom:
              configMapKeyRef:
                key: rabbitmq-service
                name: assa-codefresh
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-codefresh
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitmq-username
                name: assa-codefresh
          - name: RABBIT_URL
            value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                key: postgres-service
                name: assa-codefresh
          - name: POSTGRES_HOST
            value: assa-$(POSTGRES_SERVICE).codefresh
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres-database
                name: assa-codefresh
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres-user
                name: assa-codefresh
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-codefresh
          - name: REDIS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: redis-service
                name: assa-codefresh
          - name: REDIS_URL
            value: assa-$(REDIS_SERVICE).codefresh
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-codefresh
          - name: DOCKER_PUSHER_IMAGE
            value: codefresh/cf-docker-pusher:v2
          - name: DOCKER_PULLER_IMAGE
            value: codefresh/cf-docker-puller:v2
          - name: DOCKER_BUILDER_IMAGE
            value: codefresh/cf-docker-builder:v5
          - name: CONTAINER_LOGGER_IMAGE
            value: codefresh/cf-container-logger:0.0.15
          - name: GIT_CLONE_IMAGE
            value: codefresh/cf-git-cloner:v1
          - name: RUNTIME_LOCAL_REGISTRY_NAME
            value: assa-registry.codefresh.svc:5000
          image: codefresh/cf-runtime:v71
          imagePullPolicy: IfNotPresent
          name: assa-cfruntime
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/docker.sock
            name: docker-socket
          - mountPath: /etc/ssl/cf/
            name: cf-certs
            readOnly: true
          - mountPath: /etc/admin/internal-registry.json
            name: internal-registry
            subPath: internal-registry.json
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: assa-codefresh-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: assa-cf-certs
        - hostPath:
            path: /var/run/docker.sock
          name: docker-socket
        - configMap:
            defaultMode: 420
            name: assa-registry
          name: internal-registry
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-cfui
      chart: cfui-0.1.2
      heritage: Tiller
      pod-template-hash: "2614216454"
      release: assa
      version: v101
    name: assa-cfui-2614216454
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-cfui
      uid: 5433fdea-65a9-11e7-977d-080027a5536f
    resourceVersion: "2368"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-cfui-2614216454
    uid: 5439b7ea-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-cfui
        pod-template-hash: "2614216454"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-cfui
          chart: cfui-0.1.2
          heritage: Tiller
          pod-template-hash: "2614216454"
          release: assa
          version: v101
      spec:
        containers:
        - env:
          - name: ASSETS_OPTIMIZED
            value: "true"
          - name: LAUNCH_DARKLY_KEY
          - name: LOGGER_LEVEL
            value: error
          - name: LOGGER_MORAN_ACTIVE
            value: "false"
          - name: LOGS_PATH
            value: /var/log/cf-ui.log
          - name: NEW_USER_REDIRECT
          - name: NODE_ENV
            value: kubernetes
          - name: ROLLBAR_ACCESS_TOKEN
          - name: SLACK_REDIRECTURI
          - name: STRIPE_PUBLIC_KEY
          - name: WALKME
          - name: PORT
            value: "80"
          - name: CF_HOST_NAME
            valueFrom:
              configMapKeyRef:
                key: app-url
                name: assa-codefresh
          - name: CODEFRESH_API_URL
            value: https://$(CF_HOST_NAME)
          - name: NATS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: nats-service
                name: assa-codefresh
          - name: NATS_PORT
            valueFrom:
              configMapKeyRef:
                key: nats-port
                name: assa-codefresh
          - name: QUEUE_SERVERS
            value: nats://assa-$(NATS_SERVICE).codefresh:$(NATS_PORT)
          - name: RABBIT_SERVICE
            valueFrom:
              configMapKeyRef:
                key: rabbitmq-service
                name: assa-codefresh
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-codefresh
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitmq-username
                name: assa-codefresh
          - name: RABBIT_URL
            value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@assa-$(RABBIT_SERVICE).codefresh
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                key: postgres-service
                name: assa-codefresh
          - name: POSTGRES_HOST
            value: assa-$(POSTGRES_SERVICE).codefresh
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                key: postgres-database
                name: assa-codefresh
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres-user
                name: assa-codefresh
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-codefresh
          - name: REDIS_SERVICE
            valueFrom:
              configMapKeyRef:
                key: redis-service
                name: assa-codefresh
          - name: REDIS_URL
            value: assa-$(REDIS_SERVICE).codefresh
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-codefresh
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: newrelic-license-key
                name: assa-codefresh
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                key: segment-key
                name: assa-codefresh
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                key: loggly-token
                name: assa-codefresh
          - name: SLACK_APP_ID
            valueFrom:
              secretKeyRef:
                key: slack-app-id
                name: assa-codefresh
          image: codefresh/cf-ui:v101
          imagePullPolicy: IfNotPresent
          name: assa-cfui
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: assa-codefresh-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-mongodb
      pod-template-hash: "2921930014"
    name: assa-mongodb-2921930014
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-mongodb
      uid: 543b57b4-65a9-11e7-977d-080027a5536f
    resourceVersion: "1808"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-mongodb-2921930014
    uid: 543e3dee-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-mongodb
        pod-template-hash: "2921930014"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-mongodb
          pod-template-hash: "2921930014"
      spec:
        containers:
        - env:
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: assa-mongodb
          - name: MONGODB_USERNAME
            value: cfuser
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: assa-mongodb
          - name: MONGODB_DATABASE
            value: codefresh
          image: bitnami/mongodb:3.4.5-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: assa-mongodb
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-postgresql
      pod-template-hash: "3807653042"
    name: assa-postgresql-3807653042
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-postgresql
      uid: 5446551a-65a9-11e7-977d-080027a5536f
    resourceVersion: "3329"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-postgresql-3807653042
    uid: 544b9431-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-postgresql
        pod-template-hash: "3807653042"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-postgresql
          pod-template-hash: "3807653042"
      spec:
        containers:
        - env:
          - name: POSTGRES_USER
            value: postgres
          - name: PGUSER
            value: postgres
          - name: POSTGRES_DB
            value: codefresh
          - name: POSTGRES_INITDB_ARGS
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: assa-postgresql
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: postgres:9.6.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-postgresql
          ports:
          - containerPort: 5432
            name: postgresql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/postgresql/data/pgdata
            name: data
            subPath: postgresql-db
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: assa-postgresql
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:40Z
    generation: 1
    labels:
      app: assa-rabbitmq
      pod-template-hash: "2287021035"
    name: assa-rabbitmq-2287021035
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-rabbitmq
      uid: 5475ff80-65a9-11e7-977d-080027a5536f
    resourceVersion: "3062"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-rabbitmq-2287021035
    uid: 54c84f05-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-rabbitmq
        pod-template-hash: "2287021035"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-rabbitmq
          pod-template-hash: "2287021035"
      spec:
        containers:
        - env:
          - name: RABBITMQ_USERNAME
            value: user
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbitmq-password
                name: assa-rabbitmq
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                key: rabbitmq-erlang-cookie
                name: assa-rabbitmq
          - name: RABBITMQ_NODE_PORT
            value: "5672"
          - name: RABBITMQ_NODE_TYPE
            value: stats
          - name: RABBITMQ_NODE_NAME
            value: rabbit@localhost
          - name: RABBITMQ_CLUSTER_NODE_NAME
          - name: RABBITMQ_VHOST
            value: /
          - name: RABBITMQ_MANAGER_PORT
            value: "15672"
          image: bitnami/rabbitmq:3.6.10-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - rabbitmqctl
              - status
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-rabbitmq
          ports:
          - containerPort: 4369
            name: epmd
            protocol: TCP
          - containerPort: 5672
            name: ampq
            protocol: TCP
          - containerPort: 25672
            name: dist
            protocol: TCP
          - containerPort: 15672
            name: stats
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - rabbitmqctl
              - status
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/rabbitmq
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: assa-rabbitmq
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:40Z
    generation: 1
    labels:
      app: assa-redis
      pod-template-hash: "857011042"
    name: assa-redis-857011042
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-redis
      uid: 5491324e-65a9-11e7-977d-080027a5536f
    resourceVersion: "2533"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-redis-857011042
    uid: 54d5717b-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-redis
        pod-template-hash: "857011042"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-redis
          pod-template-hash: "857011042"
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: assa-redis
          image: bitnami/redis:3.2.9-r2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: assa-redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/redis
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: assa-redis
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-07-10T19:52:39Z
    generation: 1
    labels:
      app: assa-registry
      chart: registry-0.1.0
      heritage: Tiller
      pod-template-hash: "2992272138"
      release: assa
    name: assa-registry-2992272138
    namespace: codefresh
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: assa-registry
      uid: 5453a437-65a9-11e7-977d-080027a5536f
    resourceVersion: "3360"
    selfLink: /apis/extensions/v1beta1/namespaces/codefresh/replicasets/assa-registry-2992272138
    uid: 5461a4ca-65a9-11e7-977d-080027a5536f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: assa-registry
        chart: registry-0.1.0
        heritage: Tiller
        pod-template-hash: "2992272138"
        release: assa
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: assa-registry
          chart: registry-0.1.0
          heritage: Tiller
          pod-template-hash: "2992272138"
          release: assa
      spec:
        containers:
        - env:
          - name: REGISTRY_HTTP_ADDR
            value: :5000
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /var/lib/registry
          - name: REGISTRY_HTTP_TLS_CERTIFICATE
            value: /etc/ssl/cf/cert.pem
          - name: REGISTRY_HTTP_TLS_KEY
            value: /etc/ssl/cf/key.pem
          image: registry:2.6
          imagePullPolicy: IfNotPresent
          name: assa-registry
          ports:
          - containerPort: 5000
            name: registry
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/registry
            name: image-store
          - mountPath: /etc/ssl/cf
            name: cf-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: image-store
          persistentVolumeClaim:
            claimName: assa-registry
        - name: cf-certs
          secret:
            defaultMode: 420
            secretName: assa-cf-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata: {}
resourceVersion: ""
selfLink: ""
