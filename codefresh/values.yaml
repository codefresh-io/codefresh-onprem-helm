# -- Credentials for Image Pull Secret object
imageCredentials: {}
# Pass sa.json (as a single line). Obtain GCR Service Account JSON (sa.json) at support@codefresh.io
# E.g.:
# imageCredentials:
#   registry: gcr.io
#   username: _json_key
#   password: '{ "type": "service_account", "project_id": "codefresh-enterprise", "private_key_id": ... }'

# -- DEPRECATED - Use `.imageCredentials` instead
# dockerconfig (for `kcfi` tool backward compatibility) for Image Pull Secret. Obtain GCR Service Account JSON (sa.json) at support@codefresh.io
# ```shell
# GCR_SA_KEY_B64=$(cat sa.json | base64)
# DOCKER_CFG_VAR=$(echo -n "_json_key:$(echo ${GCR_SA_KEY_B64} | base64 -d)" | base64 | tr -d '\n')
# ```
# E.g.:
# dockerconfigjson:
#   auths:
#     gcr.io:
#       auth: <DOCKER_CFG_VAR>
dockerconfigjson: {}

# -- Job to generate internal runtime secrets. Required at first install.
# @default -- See below
gencerts:
  enabled: true
  image:
    registry: quay.io
    repository: codefresh/kubectl
    tag: 1.27.1
  rbac:
    enabled: true
  ttlSecondsAfterFinished: 300
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  resources: {}
  tolerations: []

# -- Seed jobs
# @default -- See below
seed:
  # -- Enable all seed jobs
  enabled: true
  # -- Mongo Seed Job. Required at first install. Seeds the required data (default idp/user/account), creates cfuser and required databases.
  # @default -- See below
  mongoSeedJob:
    enabled: true
    image:
      registry: quay.io
      repository: codefresh/mongosh
      tag: 1.8.2
    # -- Root user (required ONLY for seed job!)
    mongodbRootUser: root
    # -- Root password (required ONLY for seed job!).
    mongodbRootPassword: XT9nmM8dZD
  # -- Postgres Seed Job. Required at first install. Creates required user and databases.
  # @default -- See below
  postgresSeedJob:
    enabled: true
    image:
      registry: quay.io
      repository: codefresh/postgresql
      tag: 13
    # -- (optional) "postgres" admin user (required ONLY for seed job!)
    # Must be a privileged user allowed to create databases and grant roles.
    # If omitted, username and password from `.Values.global.postgresUser/postgresPassword` will be taken.
    postgresUser: ""
    # -- (optional) Password for "postgres" admin user (required ONLY for seed job!)
    postgresPassword: ""
  ttlSecondsAfterFinished: 300
  backoffLimit: 10
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  resources: {}
  tolerations: []

# -- Pre/post-upgrade Job hooks. Updates images in `system/default` runtime.
# @default -- See below
hooks:
  enabled: true
  image:
    registry: quay.io
    repository: codefresh/mongosh
    tag: 1.8.2
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  resources: {}
  tolerations: []

# -- DEPRECATED - Use `.Values.ingress.tls` instead
# TLS secret for Ingress
webTLS:
  enabled: false
  secretName: star.codefresh.io
  cert: ""
  key: ""

# -- Ingress
ingress:
  # -- Enable the Ingress
  enabled: true
  # -- Set the ingressClass that is used for the ingress.
  # Default `nginx-codefresh` is created from `ingress-nginx` controller subchart
  ingressClassName: nginx-codefresh
  tls:
    # -- Enable TLS
    enabled: false
    # -- Default secret name to be created with provided `cert` and `key` below
    secretName: "star.codefresh.io"
    # -- Certificate (base64 encoded)
    cert: ""
    # -- Private key (base64 encoded)
    key: ""
    # -- Existing `kubernetes.io/tls` type secret with TLS certificates (keys: `tls.crt`, `tls.key`)
    existingSecret: ""
  # -- Default services and corresponding paths
  # @default -- See below
  services:
    cfapi:
      - /api/
      - /ws
    cfui:
      - /
    nomios:
      - /nomios/
  # -- Set annotations for ingress.
  # @default -- See below
  annotations:
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.org/redirect-to-https: "false"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Request-ID: $request_id";
      proxy_set_header X-Request-ID $request_id;

# -- Global parameters
# @default -- See below
global:
  # -- Application root url. Will be used in Ingress objects as hostname
  appUrl: onprem.codefresh.local
  # -- Application protocol.
  appProtocol: https

  # -- Firebase URL for logs streaming.
  firebaseUrl: "https://codefresh-on-prem.firebaseio.com/on-prem"
  # -- Firebase Secret.
  firebaseSecret: ""

  # -- Global Docker image registry
  imageRegistry: ""

  # -- Global Docker registry secret names as array
  imagePullSecrets: []

  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""

  # -- Global Env vars
  env: {}

  # -- New Relic Key
  newrelicLicenseKey: ""

  # -- Definitions to set up internal-gateway nginx resolver
  dnsService: kube-dns
  dnsNamespace: kube-system
  clusterDomain: cluster.local

  # -- DEPRECATED - Use `.Values.gencerts`
  # Generate self-signed certificates for internal runtime. Used in on-prem environments.
  certsJobs: false

  # -- DEPRECATED - Use `.Values.seed.mongoSeedJob` and `.Values.seed.postgresSeedJob` and instead
  # Instantiate databases with seed data. Used in on-prem environments.
  seedJobs: false

  # -- DEPRECATED - Use `.Values.global.imageRegistry` instead
  privateRegistry: false
  dockerRegistry: ""

  # -- Keep `codefresh` as default!
  # Global codefresh chart name. All subcharts use this name to access secrets and configmaps.
  codefresh: codefresh
  # -- Keep `true` as default!
  onprem: true

#----------------------------------
# Codefresh services. Don't change!
#----------------------------------
  # -- Default API service name.
  cfapiService: cfapi
  # -- Default API service port.
  cfapiInternalPort: 3000
  # -- Default API endpoints service name
  cfapiEndpointsService: cfapi
  # -- Default builder service name.
  builderService: builder
  # -- Default runner service name.
  runnerService: runner
  # -- Default tls-sign service name.
  tlsSignService: cfsign
  # -- Default tls-sign service port.
  tlsSignPort: 4999
  # -- Default nats service name.
  natsService: nats
  # -- Default nats service port.
  natsPort: 4222
  # -- Default Consul service name.
  consulService: consul-headless
  # -- Default Consul service port.
  consulHttpPort: 8500
  # -- Default cluster-providers service name.
  clusterProvidersService: cluster-providers
  # -- Default cluster-providers service port.
  clusterProvidersPort: 9000
  # -- Default kube-integration service name.
  kubeIntegrationService: kube-integration
  # -- Default kube-integration service port.
  kubeIntegrationPort: 9000
  # -- Default charts-manager service name.
  chartsManagerService: charts-manager
  # -- Default chart-manager service port.
  chartsManagerPort: 9000
  # -- Default context-manager service name.
  contextManagerService: context-manager
  # -- Default context-manager service port.
  contextManagerPort: 9000
  # -- Default pipeline-manager service name.
  pipelineManagerService: pipeline-manager
  # -- Default pipeline-manager service port.
  pipelineManagerPort: 9000
  # -- Default gitops-dashboarad-manager service name.
  gitopsDashboardManagerService: gitops-dashboard-manager
  # -- Default gitops-dashboarad-manager service port.
  gitopsDashboardManagerPort: 9000
  # -- Default gitops-dashboarad-manager db collection.
  gitopsDashboardManagerDatabase: pipeline-manager
  # -- Default runtime-environment-manager service name.
  runtimeEnvironmentManagerService: runtime-environment-manager
  # -- Default runtime-environment-manager service port.
  runtimeEnvironmentManagerPort: 80
  # -- Default helm-repo-manager service name.
  helmRepoManagerService: helm-repo-manager
  # -- Default hermes service name.
  hermesService: hermes
  # -- Default broadcaster service name.
  broadcasterService: cf-broadcaster
  # -- Default broadcaster service port.
  broadcasterPort: 80
  # -- Default k8s-monitor service name.
  cfk8smonitorService: k8s-monitor
  # -- Default platform-analytics service name.
  platformAnalyticsService: platform-analytics
  # -- Default platform-analytics service port.
  platformAnalyticsPort: 80

#--------
# MongoDB
#--------
  # -- Default Internal MongoDB URI (from bitnami/mongodb subchart).. Change if you use external MongoDB. See "External MongoDB" example below.
  # Will be used by ALL services to communicate with MongoDB.
  # Ref: https://www.mongodb.com/docs/manual/reference/connection-string/
  # Note! `defaultauthdb` is omitted here on purpose (i.e. mongodb://.../[defaultauthdb]).
  # Mongo seed job will create and add `cfuser` (useraname and password are taken from `.Values.global.mongoURI`) with "ReadWrite" permissions to all of the required databases
  mongoURI: "mongodb://cfuser:mTiXcU2wafr9@cf-mongodb:27017"
  # -- Default MongoDB database name. Don't change!
  mongodbDatabase: codefresh
  # -- DEPRECATED - Use `.Values.seed.mongoSeedJob` instead.
  mongodbRootUser: ""
  # -- DEPRECATED - Use `.Values.seed.mongoSeedJob` instead.
  mongodbRootPassword: ""

  # Mongo parameters for OfflineLogging. Should match the parameters above.
  # -- Default Internal MongoDB URI
  runtimeMongoURI: mongodb://cfuser:mTiXcU2wafr9@cf-mongodb:27017
  # -- Default Internal MongoDB database name
  runtimeMongoDb: codefresh

  # # External MongoDB example
  # seed:
  #   mongoSeedJob:
  #     enabled: true
  #     mongodbRootUser: root
  #     mongodbRootPassword: password
  #
  # global:
  #   mongoURI: mongodb://cfuser:password@my-mongodb.prod.svc.cluster.local/?authSource=admin
  #   runtimeMongoURI: mongodb://cfuser:password@my-mongodb.prod.svc.cluster.local/?authSource=admin
  #
  # mongodb:
  #   enabled: false  # disable default mongodb subchart installation

#-----------
# Postgresql
#-----------
  # -- Default Internal Postgresql service address (from bitnami/postgresql subchart). Change if you use external PostreSQL. See "External Postgresql" example below.
  postgresService: postgresql
  # -- Default Postgresql username (from bitnami/postgresql subchart). Change if you use external PostreSQL. See "External Postgresql" example below.
  postgresUser: postgres
  # -- Default Postgresql password (from bitnami/postgresql subchart). Change if you use external PostreSQL. See "External Postgresql" example below.
  postgresPassword: eC9arYka4ZbH
  # -- Default Postgresql database name (from bitnami/postgresql subchart). Change if you use external PostreSQL. See "External Postgresql" example below.
  postgresDatabase: codefresh
  # -- Default Postgresql port number (from bitnami/postgresql subchart). Change if you use external PostreSQL. See "External Postgresql" example below.
  postgresPort: 5432
  # -- Set External Postgresql service address. Takes precedence over `global.postgresService`. See "External Postgresql" example below.
  postgresHostname: ""

  # -- DEPRECATED - Use `.Values.seed.postgresSeedJob` instead.
  postgresSeedJob: {}

  # # External Postgresql example
  # seed:
  #   postgresSeedJob:
  #     enabled: true
  #     postgresUser: postgres
  #     postgresPassword: password
  #
  # global:
  #   postgresHostname: my-postgres.ccjog7pqzunf.us-west-2.rds.amazonaws.com
  #   postgresUser: cf_user
  #   postgresPassword: password
  #   postgresDatabase: codefresh
  #   postgresPort: 5432
  #
  # postgresql:
  #   enabled: false    # disable default postgresql subchart installation

#---------
# RabbitMQ
#---------
  # -- Default Internal RabbitMQ service address (from bitnami/rabbitmq subchart).
  rabbitService: rabbitmq
  # -- Default RabbitMQ username (from bitnami/rabbitmq subchart). Change if you use external RabbitMQ. See "External RabbitMQ" example below.
  rabbitmqUsername: user
  # -- Default RabbitMQ password (from bitnami/rabbitmq subchart). Change if you use external RabbitMQ. See "External RabbitMQ" example below.
  rabbitmqPassword: cVz9ZdJKYm7u
  # -- Set External RabbitMQ service address. Takes precedence over `global.rabbitService`. See "External RabbitMQ" example below.
  rabbitmqHostname: ""

  # # External RabbitMQ example
  # global:
  #   rabbitmqHostname: my-rabbitmq.prod.svc.cluster.local
  #   rabbitmqUsername: user
  #   rabbitmqPassword: password
  #
  # rabbitmq:
  #   enabled: false    # disable default rabbitmq subchart installation

#------
# Redis
#------
  # -- Default Internal Redis service address (from bitnami/redis subchart).
  redisService: redis-master
  # -- Default Internal Redis service port (from bitnami/redis subchart). Change if you use external Redis. See "External Redis" example below.
  redisPort: 6379
  # -- Default Redis password (from bitnami/redis subchart). Change if you use external Redis. See "External Redis" example below.
  redisPassword: hoC9szf7NtrU
  # -- Set External Redis service address. Takes precedence over `global.redisService`
  redisUrl: ""

  # Redis parameters for Offline Logging. Should match the parameters above.
  # -- Default Internal Redis service address (from bitnami/redis subchart).
  runtimeRedisHost: cf-redis-master
  # -- Default Redis port number.
  runtimeRedisPort: "6379"
  # -- Default Redis password.
  runtimeRedisPassword: hoC9szf7NtrU
  # -- Default Redis keyspace number.
  runtimeRedisDb: "1"

  # # External Redis example
  # global:
  #   redisUrl: my-redis.prod.svc.cluster.local
  #   redisPort: 6379
  #   redisPassword: password

  #   runtimeRedisHost: my-redis.prod.svc.cluster.local
  #   runtimeRedisPassword: password
  #   runtimeRedisPort: 6379
  #   runtimeRedisDb: 2
  #
  # redis:
  #   enabled: false    # disable default redis subchart installation

  # Legacy values. Keep as is.
  gceProject: ""
  stepsCatalogOnPremise: "1"

# -- runtimeImages
# @default -- See below
runtimeImages:
  COMPOSE_IMAGE: quay.io/codefresh/compose:1.3.0
  CONTAINER_LOGGER_IMAGE: quay.io/codefresh/cf-container-logger:1.10.1
  DIND_IMAGE: quay.io/codefresh/dind:20.10.18-1.25.6
  DOCKER_BUILDER_IMAGE: quay.io/codefresh/cf-docker-builder:1.3.1
  DOCKER_PULLER_IMAGE: quay.io/codefresh/cf-docker-puller:8.0.9
  DOCKER_PUSHER_IMAGE: quay.io/codefresh/cf-docker-pusher:6.0.10
  DOCKER_TAG_PUSHER_IMAGE: quay.io/codefresh/cf-docker-tag-pusher:1.3.8
  ENGINE_IMAGE: quay.io/codefresh/engine:1.164.0
  FS_OPS_IMAGE: quay.io/codefresh/fs-ops:1.2.3
  GIT_CLONE_IMAGE: quay.io/codefresh/cf-git-cloner:10.1.18
  KUBE_DEPLOY: quay.io/codefresh/cf-deploy-kubernetes:16.1.11
  PIPELINE_DEBUGGER_IMAGE: quay.io/codefresh/cf-debugger:1.3.0
  TEMPLATE_ENGINE: quay.io/codefresh/pikolo:0.13.6

#--------------------
# Codefresh subcharts
#--------------------
# -- builder
builder:
  enabled: true

# -- cf-api
cfapi: &cf-api
  # -- Enable cf-api
  enabled: true
  # -- Controller configuration
  controller:
    # -- Replicas number
    replicas: 2
  # -- Container configuration
  container:
    # -- Image
    image:
      # -- Registry prefix
      registry: gcr.io/codefresh-enterprise
    # -- Env vars
    # @default -- See below
    env:
      AUDIT_AUTO_CREATE_DB: true
      GITHUB_API_PATH_PREFIX: /api/v3
      LOGGER_LEVEL: debug
      ON_PREMISE: true
      RUNTIME_MONGO_DB: codefresh
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 200m
      memory: "256Mi"
    limits: {}
  # -- Autoscaler configuration
  hpa:
    # -- Enable HPA
    enabled: false
    # -- Minimum number of replicas
    minReplicas: 2
    # -- Maximum number of replicas
    maxReplicas: 10
    # -- Average CPU utilization percentage
    targetCPUUtilizationPercentage: 70
  # -- Pod disruption budget configuration
  pdb:
    # -- Enable PDB
    enabled: false
    # -- Minimum number of replicas in percentage
    minAvailable: "50%"
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# cfapi roles
# @ignored internal
cfapi-internal:
  !!merge <<: *cf-api
  enabled: false
# @ignored ws
cfapi-ws:
  !!merge <<: *cf-api
  enabled: false
# @ignored admin
cfapi-admin:
  !!merge <<: *cf-api
  enabled: false
# @ignored endpoints
cfapi-endpoints:
  !!merge <<: *cf-api
  enabled: false
# @ignored terminators
cfapi-terminators:
  !!merge <<: *cf-api
  enabled: false
# @ignored sso-group-synchronizer
cfapi-sso-group-synchronizer:
  !!merge <<: *cf-api
  enabled: false
# @ignored buildmanager
cfapi-buildmanager:
  !!merge <<: *cf-api
  enabled: false
# @ignored cacheevictmanager
cfapi-cacheevictmanager:
  !!merge <<: *cf-api
  enabled: false
# @ignored eventsmanagersubscriptions
cfapi-eventsmanagersubscriptions:
  !!merge <<: *cf-api
  enabled: false
# @ignored kubernetesresourcemonitor
cfapi-kubernetesresourcemonitor:
  !!merge <<: *cf-api
  enabled: false
# @ignored environments
cfapi-environments:
  !!merge <<: *cf-api
  enabled: false
# @ignored gitops-resource-receiver
cfapi-gitops-resource-receiver:
  !!merge <<: *cf-api
  enabled: false
# @ignored downloadlogmanager
cfapi-downloadlogmanager:
  !!merge <<: *cf-api
  enabled: false
# @ignored teams
cfapi-teams:
  !!merge <<: *cf-api
  enabled: false
# @ignored kubernetes-endpoints
cfapi-kubernetes-endpoints:
  !!merge <<: *cf-api
  enabled: false
# @ignored test-reporting
cfapi-test-reporting:
  !!merge <<: *cf-api
  enabled: false

# -- broadcaster
# @default -- See below
cf-broadcaster:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  env:
    RUNTIME_MONGO_DB: codefresh
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- etl-starter
# @default -- See below
cf-platform-analytics-etlstarter:
  nameOverride: etl-starter
  redis:
    # -- Disable redis subchart
    enabled: false
  controller:
    # - Disable default deployment controller
    enabled: false
  # -- Only postgres ETL should be running in onprem~
  system-etl-postgres:
    enabled: true
  # @ignored
  system-etl-gitops:
    enabled: false
  # @ignored
  system-etl-metabase:
    enabled: false

  container:
    image:
      registry: gcr.io/codefresh-enterprise
    env:
      ENV: production
      DATASET_ID: etl
      MONGO_DB_DEFAULT_NAME: codefresh
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- platform-analytics
# @default -- See below
cf-platform-analytics-platform:
  nameOverride: platform-analytics
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  redis:
    enabled: true
    nameOverride: redis-platform-analytics
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  env:
    ENV: production
    DATASET_ID: etl
    NODE_ENV: production
    CUBEJS_LOG_LEVEL: trace
    CUBEJS_SCHEDULED_REFRESH_TIMER: 60
    CUBEJS_DEV_MODE: false
    SUPPORTED_DATA_SOURCE: 'CSDP_POSTGRES,CLASSIC_POSTGRES'

# -- tls-sign
# @default -- See below
cfsign:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  secrets:
    cf-ca:
      enabled: false

# -- cf-ui
# @default -- See below
cfui:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
    env:
      ON_PREMISE: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- charts-manager
# @default -- See below
charts-manager:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- cluster-providers
# @default -- See below
cluster-providers:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- consul
# @default -- See below
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/consul/values.yaml
consul:
  enabled: true
  datacenterName: codefresh-onprem
  replicaCount: 1

# -- context-manager
# @default -- See below
context-manager:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- cronus
# @default -- See below
cronus:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- gitops-dashboard-manager
# @default -- See below
gitops-dashboard-manager:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- helm-repo-manager
# @default -- See below
helm-repo-manager:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  chartmuseum:
    publicHelmRepo: true
    ingress:
      enabled: false
    image:
      registry: quay.io
      repository: codefresh/chartmuseum
      tag: a02769a5
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- hermes
# @default -- See below
hermes:
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  redis:
    # Deprecation of a separate redis for hermes (CR-705)
    enabled: false
    redisPassword: kj57kfwjeg
    db: 15
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- ingress-nginx
# @default -- See below
# Ref: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
ingress-nginx:
  enabled: true
  controller:
    ingressClassResource:
      enabled: true
      default: false
      controllerValue: "k8s.io/ingress-nginx-codefresh"
      name: nginx-codefresh
    ingressClass: nginx-codefresh
    ingressClassByName: true
    scope:
      enabled: false
    admissionWebhooks:
      enabled: false
    config:
      ssl-redirect: "false"
      disable-access-log: "false"
      enable-vts-status: "true"
      client-body-buffer-size: "16k"
      proxy-body-size: "5M"
      log-format-escape-json: "true"
      log-format-upstream: '{ "time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x-forward-for": "$proxy_add_x_forwarded_for", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time, "method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent", "http_x_github_delivery": "$http_x_github_delivery", "http_x_hook_uuid": "$http_x_hook_uuid", "metadata": { "correlationId": "$request_id", "service": "ingress", "time": "$time_iso8601" } }'

# -- k8s-monitor
# @default -- See below
k8s-monitor:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- kube-integration
# @default -- See below
kube-integration:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- mongodb
# @default -- See below
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
mongodb:
  image:
    tag: 4.4
  architecture: standalone
  useStatefulSet: true
  auth:
    enabled: true
    rootUser: root
    rootPassword: "XT9nmM8dZD"
  resources:
    requests:
      cpu: 200m
      memory: 256Mi

# -- nats
# @default -- See below
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/nats/values.yaml
nats:
  enabled: true
  replicaCount: 1
  auth:
    enabled: false
  cluster:
    auth:
      enabled: false

# -- nomios
# @default -- See below
nomios:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  ingress:
    main:
      enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- postgresql
# @default -- See below
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  enabled: true
  image:
    registry: quay.io
    repository: codefresh/postgresql
    tag: 13
  auth:
    enablePostgresUser: true
    postgresPassword: "eC9arYka4ZbH"
    database: "codefresh"
  architecture: standalone
  postgresqlSharedPreloadLibraries: pg_partman_bgw,pg_cron
  primary:
    extendedConfiguration: |
      pg_partman_bgw.interval = 3600
      pg_partman_bgw.role = 'postgres'
      pg_partman_bgw.dbname = 'postgres'
      cron.database_name = 'postgres'
    resources:
      requests:
        cpu: 200m
        memory: 256Mi

# -- redis
# @default -- See below
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true
  architecture: standalone
  auth:
    password: "hoC9szf7NtrU"
  master:
    count: 1
    resources:
      requests:
        cpu: 200m
        memory: 256Mi

# -- rabbitmq
# @default -- See below
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/rabbitmq/values.yaml
rabbitmq:
  enabled: true
  replicaCount: 1
  auth:
    username: user
    password: "cVz9ZdJKYm7u"
    erlangCookie: "WIWVHCDTCIUAWANLMQAW"
  resources:
    requests:
      cpu: 200m
      memory: 256Mi

# -- runner
# @default -- See below
runner:
  enabled: true

# -- pipeline-manager
# @default -- See below
pipeline-manager:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- runtime-environment-manager
# @default -- See below
runtime-environment-manager:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
    env:
      ON_PREMISE: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- tasker-kubernetes
tasker-kubernetes:
  enabled: true
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- argo-hub-platform
# @default -- See below
argo-hub-platform:
  fullnameOverride: argo-hub-platform
  controller:
    deployment:
      replicas: 1
  container:
    image:
      registry: gcr.io/codefresh-enterprise
  imagePullSecrets:
    - '{{ .Release.Name }}-registry'
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- argo-platform
# @default -- See below
argo-platform:
  enabled: true

  # -- Env anchors
  # @default -- See below
  env:
    RABBITMQ_PROTOCOL: &RABBITMQ_PROTOCOL amqp
    MONGODB_AUDIT_URI: &MONGODB_AUDIT_URI $(MONGODB_AUDIT_URI_SEC)
    MONGODB_READMODELS_URI: &MONGODB_READMODELS_URI $(MONGODB_READMODELS_URI_SEC)
    MONGODB_AUDIT_DBNAME: audit
    MONGODB_READMODELS_DBNAME: read-models
  # -- Use regular k8s secret object. Keep `false`!
  useExternalSecret: false
  # -- Secrets anchors
  # @default -- See below
  secrets:
    cache-host: &cache-host '{{ default (printf "%s-%s" .Release.Name .Values.global.redisService) .Values.global.redisUrl }}'
    cache-password: &cache-password '{{ .Values.global.redisPassword }}'
    mongodb-readmodels-uri-sec: &mongodb-readmodels-uri-sec '{{ include "codefresh.calculateMongoUri" (dict "dbName" .Values.env.MONGODB_READMODELS_DBNAME "mongoURI" .Values.global.mongoURI) }}'
    mongodb-audit-uri-sec: &mongodb-audit-uri-sec '{{ include "codefresh.calculateMongoUri" (dict "dbName" .Values.env.MONGODB_AUDIT_DBNAME  "mongoURI" .Values.global.mongoURI) }}'
    pg-db-name: &pg-db-name analytics
    pg-host-name: &pg-host-name '{{ default (printf "%s-%s" .Release.Name .Values.global.postgresService) .Values.global.postgresHostname }}'
    pg-password: &pg-password '{{ .Values.global.postgresPassword }}'
    pg-port: &pg-port '{{ .Values.global.postgresPort }}'
    pg-user-name: &pg-user-name '{{ .Values.global.postgresUser }}'
    rabbitmq-host: &rabbitmq-host '{{ default (printf "%s-%s" .Release.Name (coalesce .Values.global.rabbitService .Values.global.rabbitmqService )) .Values.global.rabbitmqHostname }}'
    rabbitmq-password: &rabbitmq-password '{{ .Values.global.rabbitmqPassword }}'
    rabbitmq-port: &rabbitmq-port 5672
    rabbitmq-user: &rabbitmq-user '{{ .Values.global.rabbitmqUsername }}'

  # -- api-graphql
  # @default -- See below
  # All other services under `.Values.argo-platform` follows the same values structure.
  api-graphql:
    enabled: true
    # -- Controller kind. Currently, only `Deployment` is supported
    kind: Deployment
    # -- Image
    image:
      # -- Image repository
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-api-graphql
    # -- Env vars
    # @default -- See below
    env:
      GRAPHQL_PLAYGROUND: true
      MONGODB_AUDIT_URI: *MONGODB_AUDIT_URI
      MONGODB_READMODELS_URI: *MONGODB_READMODELS_URI
      RABBITMQ_PROTOCOL: *RABBITMQ_PROTOCOL
    # -- Secrets
    # @default -- See below
    secrets:
      argo-hub-host: http://argo-hub-platform
      cache-host: *cache-host
      cache-password: *cache-password
      v1-host: http://{{ .Release.Name }}-{{ .Values.global.cfapiEndpointsService }}
      v1-internal-host: http://{{ .Release.Name }}-{{ .Values.global.cfapiService }}:{{ .Values.global.cfapiInternalPort }}
      mongodb-audit-uri-sec: *mongodb-audit-uri-sec
      mongodb-readmodels-uri-sec: *mongodb-readmodels-uri-sec
      rabbitmq-host: *rabbitmq-host
      rabbitmq-password: *rabbitmq-password
      rabbitmq-port: *rabbitmq-port
      rabbitmq-user: *rabbitmq-user
    # -- Resource limits and requests
    # @default -- See below
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        memory: 1Gi
    # -- HPA
    hpa:
      # -- Enable autoscaler
      enabled: false
    # -- PDB
    pdb:
      # -- Enable pod disruption budget
      enabled: false
    # -- Set pod's affinity
    affinity: {}
    # -- Set pod's tolerations
    tolerations: []

  # -- abac
  # @default -- See below
  abac:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-abac
    env:
      MONGODB_READMODELS_URI: *MONGODB_READMODELS_URI
    secrets:
      mongodb-readmodels-uri-sec: *mongodb-readmodels-uri-sec
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
    affinity: {}
    tolerations: []

  # -- analytics-reporter
  # @default -- See below
  analytics-reporter:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-analytics-reporter
    env:
      ENABLED_DATABASE_TYPES: POSTGRES
      MONGODB_READMODELS_URI: *MONGODB_READMODELS_URI
      RABBITMQ_PROTOCOL: *RABBITMQ_PROTOCOL
    secrets:
      mongodb-readmodels-uri-sec: *mongodb-readmodels-uri-sec
      pg-db-name: *pg-db-name
      pg-host-name: *pg-host-name
      pg-password: *pg-password
      pg-port: *pg-port
      pg-user-name: *pg-user-name
      rabbitmq-host: *rabbitmq-host
      rabbitmq-password: *rabbitmq-password
      rabbitmq-port: *rabbitmq-port
      rabbitmq-user: *rabbitmq-user
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []

  # -- api-events
  # @default -- See below
  api-events:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-api-events
    env:
      RABBITMQ_PROTOCOL: *RABBITMQ_PROTOCOL
    secrets:
      rabbitmq-host: *rabbitmq-host
      rabbitmq-password: *rabbitmq-password
      rabbitmq-port: *rabbitmq-port
      rabbitmq-user: *rabbitmq-user
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
    affinity: {}
    tolerations: []

  # -- argocd-hooks
  # @default -- See below
  # Don't enable! Not used in onprem!
  argocd-hooks:
    enabled: false

  # -- audit
  # @default -- See below
  audit:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-audit
    env:
      MONGODB_AUDIT_URI: *MONGODB_AUDIT_URI
      MONGODB_READMODELS_URI: *MONGODB_READMODELS_URI
      RABBITMQ_PROTOCOL: *RABBITMQ_PROTOCOL
    secrets:
      mongodb-audit-uri-sec: *mongodb-audit-uri-sec
      mongodb-readmodels-uri-sec: *mongodb-readmodels-uri-sec
      rabbitmq-host: *rabbitmq-host
      rabbitmq-password: *rabbitmq-password
      rabbitmq-port: *rabbitmq-port
      rabbitmq-user: *rabbitmq-user
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
    affinity: {}
    tolerations: []

  # -- cron-executor
  # @default -- See below
  cron-executor:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-cron-executor
    env:
      MONGODB_AUDIT_URI: *MONGODB_AUDIT_URI
      MONGODB_READMODELS_URI: *MONGODB_READMODELS_URI
      RABBITMQ_PROTOCOL: *RABBITMQ_PROTOCOL
    secrets:
      mongodb-audit-uri-sec: *mongodb-audit-uri-sec
      mongodb-readmodels-uri-sec: *mongodb-readmodels-uri-sec
      rabbitmq-host: *rabbitmq-host
      rabbitmq-password: *rabbitmq-password
      rabbitmq-port: *rabbitmq-port
      rabbitmq-user: *rabbitmq-user
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
    affinity: {}
    tolerations: []

  # -- event-handler
  # @default -- See below
  event-handler:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-event-handler
    env:
      MONGODB_READMODELS_URI: *MONGODB_READMODELS_URI
      RABBITMQ_PROTOCOL: *RABBITMQ_PROTOCOL
    secrets:
      mongodb-readmodels-uri-sec: *mongodb-readmodels-uri-sec
      rabbitmq-host: *rabbitmq-host
      rabbitmq-password: *rabbitmq-password
      rabbitmq-port: *rabbitmq-port
      rabbitmq-user: *rabbitmq-user
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
    affinity: {}
    tolerations: []

  # -- runtime-manager
  # @default -- See below
  # Don't enable! Not used in onprem!
  runtime-manager:
    enabled: false

  # -- runtime-monitor
  # @default -- See below
  # Don't enable! Not used in onprem!
  runtime-monitor:
    enabled: false

  # -- ui
  # @default -- See below
  ui:
    enabled: true
    kind: Deployment
    image:
      repository: gcr.io/codefresh-enterprise/codefresh-io/argo-platform-ui
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 512Mi
    hpa:
      enabled: false
    pdb:
      enabled: false
    affinity: {}
    tolerations: []

# -- internal-gateway
# @default -- See below
internal-gateway:
  enabled: true
  # -- Do not change this value! Breaks chart logic
  libraryMode: true

  # -- Controller configuration
  controller:
    # -- Replicas number
    replicas: 2

  # -- Internal-gateway Ingress
  ingress:
    main:
      enabled: true
      # -- Internal-gateway ingress class
      # No need to change it here. Value will be pushed from root context `.Values.ingress.ingressClassName`
      ingressClassName: nginx-codefresh
      # -- Internal gateway hosts
      # @default -- See below
      hosts:
        - host: '{{ .Values.global.appUrl }}'
          paths:
            - path: /2.0/api
              pathType: ImplementationSpecific
              service:
                name: "{{ .Release.Name }}-internal-gateway"
                port: "{{ .Values.service.main.ports.http.port }}"
            - path: /2.0
              pathType: ImplementationSpecific
              service:
                name: "{{ .Release.Name }}-internal-gateway"
                port: "{{ .Values.service.main.ports.http.port }}"
            - path: /argo/hub
              pathType: ImplementationSpecific
              service:
                name: "argo-hub-platform"
                port: "80"
      # -- Enable Internal-gateway Ingress TLS
      # Keep as empty list. Value will be pushed from root context `.Values.ingress.tls`
      tls: []

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  hpa:
    enabled: false
  pdb:
    enabled: false
  affinity: {}
  nodeSelector: {}
  podSecurityContext: {}
  tolerations: []

# -- codefresh-tunnel-server
# @default -- See below
# Don't enable! Not supported at the moment.
codefresh-tunnel-server:
  enabled: false
