## @section Tags
## @param tags.cf-infra Enable Codefresh Classic services(charts)
## @param tags.argo-platform (WIP) Enable Codefresh Argo-Platform services(charts)
tags:
  cf-infra: true
  argo-platform: false
### dockerconfigjson used to create imagePullSecret to pull Codefresh images
### obtain GCR Service Account JSON from Codefresh and replace `placeholder`
### `DOCKER_CFG_VAR=$(echo -n "_json_key:$(echo ${GCR_SA_KEY_B64} | base64 -d)" | base64 | tr -d '\n') && echo $DOCKER_CFG_VAR`
## @skip dockerconfigjson
dockerconfigjson:
  auths:
    gcr.io:
      auth: placeholder
## @section Root
## @param firebaseUrl Firebase URL for logs streaming
firebaseUrl: "https://codefresh-on-prem.firebaseio.com/on-prem"
## @param firebaseSecret Firebase Secret
firebaseSecret: placeholder
###
### TLS certificate for Ingress object
### Uncomment `webTLS` to create tls secret from existing certificate and private key, otherwise tls secret with self-signed certificate will be created.
# webTLS:
#   secretName: star.codefresh.io
#   cert: |
#     -----BEGIN CERTIFICATE-----
#     -----END CERTIFICATE-----
#   key: |
#     -----BEGIN RSA PRIVATE KEY-----
#     -----END RSA PRIVATE KEY-----
## @section Global parameters
global:
  ## @param global.appUrl Application root url
  appUrl: onprem.codefresh.local
  ## @skip global.appProtocol
  ## Application protocol
  appProtocol: https
  ## @param global.seedJobs Instantiate databases with seed data. Used in on-prem environments. `true/false`
  seedJobs: null
  ## @param global.certsJobs Generate self-signed certificates for Builder/Runner. Used in on-prem environments. `true/false`
  certsJobs: null
  ## @param global.privateRegistry When using private docker registry, enable this flag
  privateRegistry: false
  ## @param global.dockerRegistry Replaces/adds docker registry prefix for images when `privateRegistry` is enabled (has to be with trailing `/`)
  dockerRegistry: "" ## e.g. `dockerRegistry: my-registry.artifactory.com/`
  ## @skip global.codefresh
  ## Global codefresh chart name; all subcharts use this name to access secrets and configmaps
  codefresh: codefresh
  ## @skip global.onprem
  ## Keep true as default for now!
  onprem: true
  ## @skip global.cfapiService
  ## @skip global.cfapiInternalPort
  cfapiService: cfapi
  cfapiInternalPort: 3000
  ## @skip global.builderService
  builderService: builder
  ## @skip global.tlsSignService
  ## @skip global.tlsSignPort
  tlsSignService: cfsign
  tlsSignPort: 4999
  ## @skip global.natsService
  ## @skip global.natsPort
  natsService: nats
  natsPort: 4222
  ## @param global.rabbitService Default Internal RabbitMQ service address
  ## @param global.rabbitmqHostname External RabbitMQ service address
  ## @param global.rabbitmqUsername Default RabbitMQ username
  ## @param global.rabbitmqPassword Default RabbitMQ password
  rabbitService: rabbitmq
  rabbitmqHostname: null
  rabbitmqUsername: user
  rabbitmqPassword: cVz9ZdJKYm7u
  ## @param global.mongoURI Default Internal MongoDB URI
  ## @param global.mongodbDatabase Default MongoDB database name
  ## @param global.mongodbRootUser Default MongoDB root user
  ## @param global.mongodbRootPassword Default MongoDB root password
  ## @param global.mongodbImage Default Image used in seed-jobs
  mongoURI: "mongodb://cfuser:mTiXcU2wafr9@mongodb:27017"
  mongodbDatabase: codefresh
  mongodbRootUser: root
  mongodbRootPassword: XT9nmM8dZD
  mongodbImage: bitnami/mongodb:4.2
  ## @param global.redisService Default Internal Redis service address
  ## @param global.redisPort Default Redis port number
  ## @param global.redisUrl Default External Redis service address
  ## @param global.redisPassword Default Redis password
  redisService: redis-master
  redisPort: 6379
  redisUrl: null
  redisPassword: hoC9szf7NtrU
  ## @param global.runtimeRedisHost Default for OfflineLogging feature
  ## @param global.runtimeRedisPassword Default for OfflineLogging feature
  ## @param global.runtimeRedisDb Default for OfflineLogging feature
  ## @param global.runtimeRedisPort Default for OfflineLogging feature
  ## @param global.runtimeMongoURI Default for OfflineLogging feature
  ## @param global.runtimeMongoDb Default for OfflineLogging feature
  runtimeRedisHost: cf-redis-master
  runtimeRedisPassword: hoC9szf7NtrU
  runtimeRedisDb: "1"
  runtimeRedisPort: "6379"
  runtimeMongoURI: mongodb://cfuser:mTiXcU2wafr9@mongodb:27017
  runtimeMongoDb: codefresh
  ## @param global.postgresService Default Internal Postgresql service address
  ## @param global.postgresHostname Default External Postgresql service address
  ## @param global.postgresUser Default Postgresql username
  ## @param global.postgresPassword Default Postgresql password
  ## @param global.postgresDatabase Default Postgresql database name
  ## @param global.postgresPort Default Postgresql port number
  ## @skip global.postgresSeedJob
  postgresService: postgresql
  postgresHostname: null
  postgresUser: postgres
  postgresPassword: eC9arYka4ZbH
  postgresDatabase: codefresh
  postgresPort: 5432
  ## @skip global.consulService
  ## @skip global.consulHttpPort
  consulService: consul-headless
  consulHttpPort: 8500
  ## @skip global.clusterProvidersService
  ## @skip global.clusterProvidersPort
  clusterProvidersService: cluster-providers
  clusterProvidersPort: 9000
  ## @skip global.kubeIntegrationService
  ## @skip global.kubeIntegrationPort
  kubeIntegrationService: kube-integration
  kubeIntegrationPort: 9000
  ## @skip global.chartsManagerService
  ## @skip global.chartsManagerPort
  chartsManagerService: charts-manager
  chartsManagerPort: 9000
  ## @skip global.contextManagerService
  ## @skip global.contextManagerPort
  contextManagerService: context-manager
  contextManagerPort: 9000
  ## @skip global.pipelineManagerService
  ## @skip global.pipelineManagerPort
  pipelineManagerService: pipeline-manager
  pipelineManagerPort: 9000
  ## @skip global.gitopsDashboardManagerService
  ## @skip global.gitopsDashboardManagerDatabase
  ## @skip global.gitopsDashboardManagerPort
  gitopsDashboardManagerService: gitops-dashboard-manager
  gitopsDashboardManagerDatabase: pipeline-manager
  gitopsDashboardManagerPort: 9000
  ## @skip global.runtimeEnvironmentManagerService
  ## @skip global.runtimeEnvironmentManagerPort
  runtimeEnvironmentManagerService: runtime-environment-manager
  runtimeEnvironmentManagerPort: 80
  ## @skip global.helmRepoManagerService
  helmRepoManagerService: helm-repo-manager
  ## @skip global.hermesService
  hermesService: hermes
  ## @skip global.broadcasterService
  ## @skip global.broadcasterPort
  broadcasterService: cf-broadcaster
  broadcasterPort: 80
  ## @skip global.cfk8smonitorService
  cfk8smonitorService: k8s-monitor
  ### DEPRECATED
  ## @skip global.registryService
  ## @skip global.registryPort
  ## @skip global.runnerService
  registryService: registry
  registryPort: 5000
  runnerService: runner
  ## PLACEHOLDERS
  ## @skip global.githubInternalToken
  ## @skip global.githubClientSecret
  ## @skip global.githubClientID
  ## @skip global.gitlabClientID
  ## @skip global.gitlabClientSecret
  ## @skip global.bitbucketClientID
  ## @skip global.bitbucketClientSecret
  ## @skip global.cfcrDomain
  ## @skip global.gceProject
  ## @skip global.stepsCatalogOnPremise
  githubInternalToken: placeholder
  githubClientSecret: placeholder
  githubClientID: placeholder
  gitlabClientID: placeholder
  gitlabClientSecret: placeholder
  bitbucketClientID: invalid-id
  bitbucketClientSecret: invalid-secret
  cfcrDomain: ""
  gceProject: ""
  stepsCatalogOnPremise: "1"
## @skip rbacEnable
## create SA for gen-certs job (see global.certsJobs)
rbacEnable: true
## @skip certsJobsImage
## image for gen-certs job (see global.certsJobs)
certsJobsImage: quay.io/codefresh/generate-certs:latest
## @skip builder
builder:
  replicaCount: 1
  curlImage: quay.io/codefresh/curl:latest
  dindImage: docker:20.10.13-dind
  cleanerImage: quay.io/codefresh/cf-runtime-cleaner:latest
## @skip cfapi
cfapi:
  replicaCount: 2
  github:
    apiPathPrefix: /api/v3
  image: codefresh/cf-api
  dockerRegistry: gcr.io/codefresh-enterprise/
  expirationURL: https://codefresh.io/contact-sales
  rbacEnable: true
  env:
    ON_PREMISE: true
    AUDIT_AUTO_CREATE_DB: true
    LOGGER_LEVEL: debug
    RUNTIME_MONGO_DB: codefresh
## @skip cf-broadcaster
cf-broadcaster:
  replicaCount: 1
  image: codefresh/cf-broadcaster
  dockerRegistry: gcr.io/codefresh-enterprise/
  env:
    RUNTIME_MONGO_DB: codefresh
## @skip cfsign
cfsign:
  replicaCount: 1
  image: codefresh/cf-tls-sign
  dockerRegistry: gcr.io/codefresh-enterprise/
## @skip cfui
cfui:
  image: codefresh/cf-ui
  dockerRegistry: gcr.io/codefresh-enterprise/
  dockercfg: placeholder
  logglyToken: invalid-token
  segmentKey: invalid-key
  newrelicLicenseKey: invalid-key
  env:
    ON_PREMISE: true
## @skip charts-manager
charts-manager:
  replicaCount: 1
  image: codefresh/charts-manager
  dockerRegistry: gcr.io/codefresh-enterprise/
  environment:
    MONGO_URI: mongodb://mongodb:27017/charts-manager
    POSTGRES_HOST: cf-postgresql
    EVENTBUS_URI: amqp://cf-rabbitmq
    CONTEXT_MANAGER_URI: cf-context-manager
    API_URI: cf-cfapi
  disablePublicRepos: true
## @skip cluster-providers
cluster-providers:
  replicaCount: 1
  gcAuthClientID: ""
  gcAuthClientSecret: ""
  safeSecret: ""
  image: codefresh/cluster-providers
  dockerRegistry: gcr.io/codefresh-enterprise/
## @skip consul
consul:
  datacenterName: codefresh-onprem
  replicaCount: 1
## @skip context-manager
context-manager:
  safeSecret: ""
  replicaCount: 1
  image: codefresh/context-manager
  dockerRegistry: gcr.io/codefresh-enterprise/
  environment:
    MONGO_URI: mongodb://mongodb:27017/context-manager
    EVENTBUS_URI: amqp://cf-rabbitmq
    POSTGRES_HOST: cf-postgresql
## @skip cronus
cronus:
  event:
    action: "s"
  image:
    name: codefresh/cronus
    dockerRegistry: gcr.io/codefresh-enterprise/
## @skip gitops-dashboard-manager
gitops-dashboard-manager:
  imagePullPolicy: IfNotPresent
  image: codefresh/gitops-dashboard-manager
  dockerRegistry: gcr.io/codefresh-enterprise/
  env:
    LOGGER_LEVEL: "info"
    EVENTBUS_IGNORE_CREATE_SCHEMA: true
    INTERNAL_API_URI: http://cf-cfapi:9007
## @skip helm-repo-manager
helm-repo-manager:
  replicaCount: 1
  image:
    name: codefresh/helm-repo-manager
    dockerRegistry: gcr.io/codefresh-enterprise/
  chartmuseum:
    publicHelmRepo: true
    ingress:
      enabled: false
      # Used to create an Ingress record.
      hosts: []
      # - name: chartmuseum.local
      #   path: /
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    image:
      repository: ghcr.io/helm/chartmuseum
      tag: v0.15.0
    env:
      open:
        STORAGE: local
        DEPTH: 2
        DEBUG: "true"
        ALLOW_OVERWRITE: "true"
        DISABLE_API: "false"
        DISABLE_METRICS: "false"
        INDEX_LIMIT: 2500
## @skip hermes
hermes:
  image:
    name: codefresh/hermes
    dockerRegistry: gcr.io/codefresh-enterprise/
  redis:
    enabled: false # deprecation of a separate redis for hermes (CR-705)
    redisPassword: kj57kfwjeg
    db: 15
## @skip ingress-nginx
ingress-nginx:
  enabled: true
  controller:
    ingressClassResource:
      enabled: true
      default: false
      controllerValue: "k8s.io/ingress-nginx-codefresh"
      name: nginx-codefresh
    ingressClass: nginx-codefresh
    ingressClassByName: true
    scope:
      enabled: true
    admissionWebhooks:
      enabled: false
    config:
      disable-access-log: "false"
      enable-vts-status: "true"
      client-body-buffer-size: "16k"
      proxy-body-size: "5M"
      log-format-escape-json: "true"
      log-format-upstream: '{ "time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr",
        "x-forward-for": "$proxy_add_x_forwarded_for", "remote_user": "$remote_user",
        "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status,
        "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query":
        "$args", "request_length": $request_length, "duration": $request_time, "method":
        "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent",
        "http_x_github_delivery": "$http_x_github_delivery", "http_x_hook_uuid": "$http_x_hook_uuid",
        "metadata": { "correlationId": "$request_id", "service": "ingress", "time":
        "$time_iso8601" } }'
## @skip ingress
ingress:
  enabled: true
  # servicePort: default service port for Ingress objects
  servicePort: 80
  # annotations: ingress resource annotations
  annotations:
    # kubernetes.io/ingress.class: nginx-codefresh ### deprecated in favor of ingressClassName field
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.org/redirect-to-https: "false"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Request-ID: $request_id";
      proxy_set_header X-Request-ID $request_id;
## @skip k8s-monitor
k8s-monitor:
  image: codefresh/cf-k8s-monitor
  enabled: true
  replicaCount: 1
  dockerRegistry: gcr.io/codefresh-enterprise/
## @skip kube-integration
kube-integration:
  replicaCount: 1
  image: codefresh/kube-integration
  dockerRegistry: gcr.io/codefresh-enterprise/
## @skip mongodb
mongodb:
  image: bitnami/mongodb:4.2
  mongodbRootPassword: XT9nmM8dZD
  # version: "4.2" # default tag; overrides tag in `mongodb.image` field
  migration:
    enabled: false
    setFeatureCompat: "3.6"
  nodeSelector: {}
  resources:
    requests:
      memory: 64Mi
## @skip nats
nats:
  replicaCount: 1
  auth:
    enabled: false
  cluster:
    auth:
      enabled: false
## @skip nomios
nomios:
  image:
    name: codefresh/nomios
    dockerRegistry: gcr.io/codefresh-enterprise/
## @skip postgresql
postgresql:
  postgresDatabase: codefresh
  postgresUser: postgres
  postgresPassword: eC9arYka4ZbH
  cleanJob:
    enabled: true
  nodeSelector: {}
  resources:
    requests:
      memory: 128Mi
## @skip redis
redis:
  enabled: true
  architecture: standalone
  auth:
    password: "hoC9szf7NtrU"
  master:
    count: 1
    persistence:
      size: 8Gi
  pdb:
    create: true
  metrics:
    enabled: false
## @skip rabbitmq
rabbitmq:
  enabled: true
  replicaCount: 1
  pdb:
    create: true
  persistence:
    size: 8Gi
  metrics:
    enabled: false
  auth:
    username: user
    password: "cVz9ZdJKYm7u"
    erlangCookie: "WIWVHCDTCIUAWANLMQAW"
## @skip pipeline-manager
pipeline-manager:
  replicaCount: 1
  safeSecret: ""
  stepsCatalogGithubToken: ""
  image: codefresh/pipeline-manager
  dockerRegistry: gcr.io/codefresh-enterprise/
  environment:
    MONGO_URI: mongodb://mongodb:27017/pipeline-manager
    INTERNAL_API_URI: http://cf-cfapi:9007
## @skip runtime-environment-manager
runtime-environment-manager:
  enabled: true
  dockerRegistry: gcr.io/codefresh-enterprise/
  image: codefresh/runtime-environment-manager
  dockercfg: placeholder
  newrelicLicenseKey: invalid-key
  env:
    ON_PREMISE: true
## @skip tasker-kubernetes
tasker-kubernetes:
  replicaCount: 1
  image: codefresh/tasker-kubernetes
  dockerRegistry: gcr.io/codefresh-enterprise/
## @skip runtimeImages
runtimeImages:
  ENGINE_IMAGE: quay.io/codefresh/engine:1.148.5
  DIND_IMAGE: quay.io/codefresh/dind:20.10.13-1.25.2
  CONTAINER_LOGGER_IMAGE: quay.io/codefresh/cf-container-logger:1.8.3
  DOCKER_PUSHER_IMAGE: quay.io/codefresh/cf-docker-pusher:6.0.8
  DOCKER_TAG_PUSHER_IMAGE: quay.io/codefresh/cf-docker-tag-pusher:1.3.6
  DOCKER_PULLER_IMAGE: quay.io/codefresh/cf-docker-puller:8.0.8
  DOCKER_BUILDER_IMAGE: quay.io/codefresh/cf-docker-builder:1.1.19
  GIT_CLONE_IMAGE: quay.io/codefresh/cf-git-cloner:10.1.12
  COMPOSE_IMAGE: quay.io/codefresh/compose:1.2.5
  KUBE_DEPLOY: quay.io/codefresh/cf-deploy-kubernetes:16.1.8
  FS_OPS_IMAGE: quay.io/codefresh/fs-ops:1.2.1
  TEMPLATE_ENGINE: quay.io/codefresh/pikolo:0.13.4
  PIPELINE_DEBUGGER_IMAGE: quay.io/codefresh/cf-debugger:1.2.0
