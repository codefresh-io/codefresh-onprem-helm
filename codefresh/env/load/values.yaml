---
# records to /etc/hosts of the containers
# hostsApp: default empty

firebaseUrl: "https://codefresh-load-37330.firebaseio.com/load"

hostsApp: |
  50.56.64.16   stash.ironsrc.com

webTLS:
  secretName: star.codefresh.io
  #key:
  #cert:

postgresql:
  postgresHostname: postgres.default.svc
  #postgresUser:
  #postgresPassword:

redis:
  redisUrl: redis.default.svc
  #redisPassword:

rabbitmq:
  rabbitmqHostname: rabbit.default.svc
  #rabbitmqUsername:
  #rabbitmqPassword:

# use smaller registry storage
registry:
  storageSize: 10Gi

builder:
  replicaCount: 1

ingress:
  replicaCount: 2
  webTlsSecretName: "star.codefresh.io"
  # disableAccessLog: true

getRuntimeEnvs: files/load/runtimeEnvironments.json

# customize cfapi
cfapi:
  replicaCount: 2
  internalRegistryProtocol: https
  providersData: |
    {
       "azure":{
          "name":"azure",
          "settings":{
             "AppKeyFile":"/etc/admin/azure_creds.json",
             "dnsZoneResourceGroup":"general",
             "dnsZoneName":"az.codefresh.io"
          },
          "services":{
             "docker-node-central-us":{
                "name":"docker-node",
                "dnsPrefix":"cf-load-azuc-docker-node",
                "location":"centralus",
                "virtualNetworkResourceGroup":"docker-nodes-vnet-1",
                "virtualNetworkName":"docker-nodes-vnet",
                "networkSecurityGroupName":"docker-nodes-nsg",
                "diagnosticsStorageAccountName":"cfdockernodediagvnet1",
                "imageReference":{
                   "publisher":"Canonical",
                   "offer":"UbuntuServer",
                   "sku":"16.04-LTS",
                   "version":"latest"
                },
                "machineTypes":{
                   "all":[
                      "Standard_DS1_v2",
                      "Standard_DS2_v2",
                      "Standard_D2_v3",
                      "Standard_D4_v3",
                      "Standard_D2s_v3",
                      "Standard_D4s_v3",
                      "Standard_D8s_v3",
                      "Standard_B1s",
                      "Standard_B1ms",
                      "Standard_B2s",
                      "Standard_B2ms",
                      "Standard_B4ms",
                      "Standard_B8ms"
                   ],
                   "default":"Standard_DS1_v2"
                },
                "volumeTypes":{
                   "all":[
                      "Premium_LRS",
                      "Standard_LRS"
                   ],
                   "default":"Premium_LRS"
                },
                "VolumeSize":200,
                "adminUsername":"ubuntu",
                "adminPublicKey":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCastLfm9R7tVnCssIKMrB21PptPZXyoKB4Px5xKtJwriDsTAyfQouwwsWlv/jIgvlDioXL3Vmz8GtHZRrTnlv60afWvtsVMjDQzd+NoGPX2HlS07aHcOhWZPYJujtUaZHanb9gNTKHReQpHHpX//n6WEbewsfEOG3zrJQyJoQj0XmBJamxwpWLbPiGFdZx6HQ+0147WS9WJGBt2gzKMaPsFx4+9zoGON2FH9odl384EQTwK6PUxeaIEhwtl4ZUJM8MILD4GglQ278y7N1B7yiJbCjwWUeoLdBDCUnA7U/03t55PIEEGy/nCVBWcnu0ZovmaHI4pk5wx+1oufSXyRLZ",
                "metadata":{
                   "kind":"docker-node",
                   "environment":"azure-load"
                }
             }
          }
       },
      "aws": {
        "name": "aws",
        "settings": {
          "KeyName": "cf-test-1",
          "route53Zone": "ZVG87U9HV33SS"
        },
        "services": {
          "docker-node-us-east-1": {
            "region": "us-east-1",
            "name": "docker-node",
            "dnsPrefix": "cf-load-aue1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-e33d40f5",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "c4.large"
            },
           "volumeTypes": {
                  "all": [
                    "standard",
                    "gp2"
                  ],
                  "default": "gp2"
            },
            "securityGroupIds": [
              "sg-ef5ed293", "sg-2b117e57"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "standard"
                }
              }
            ],
            "subnetId": [
              "subnet-66def54e",
              "subnet-12bddd28"
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-load"
            }
          }
        }
      },
      "gce": {
          "name": "gce",
          "settings": {
            "keyFilename": "/etc/admin/gce_creds.json",
            "projectId": "codefresh-load"
          },
          "services": {}
      }
    }
  env:
    ON_PREMISE: ""
    APP_ENV: load
    ADMIN_FEATURES_DELETE_ACCOUNT_DISABLED: ""
    ADMIN_FEATURES_DELETE_USER_WHITELIST: ""
    GOOGLE_KUBE_SERVICE_URI: "http://cf-google-auth"
    PROGRESS_BUILDLOGS_BUCKETNAME: progress-logs-load

cfui:

payments:
  mongoURI: "mongodb://mongo.default.svc:27017/payments"

context-manager:
  mongoURI: "mongodb://mongo.default.svc:27017/context-manager"

pipeline-manager:
  mongoURI: "mongodb://mongo.default.svc:27017/pipeline-manager"

cluster-providers:
  replicaCount: 1
  # We won't use Chart's installed mongo instance for load, instead, we'll use
  # an already deployed mongodb pod.
  mongoURI: "mongodb://mongo.default.svc:27017/cluster-providers"

internal-status-page:

kube-integration:
  replicaCount: 1
  mongoURI: "mongodb://mongo.default.svc:27017/cluster-providers"

accounts-referrals:
  replicaCount: 1
  mongoURI: "mongodb://mongo.default.svc:27017/accounts-referrals"

charts-manager:
  replicaCount: 1

mailer:
  replicaCount: 1

segment-reporter:

workflow-baseline-invoker:

salesforce-reporter:
  active: ""
  oauthEndpoint: "https://login.salesforce.com/services/oauth2/token"
  host: "https://3513510456354.my.salesforce.com"
  clientId: "3MVG9g9rbsTkKnAWYUH3_kcQ9b4COqHyFdSi_B_TB3BQQKyB9W0ykwe5eghwle2YFnwv3hi3p5lzu5NLmoubx"
  username: "itai@codefresh.io"
  env:
    HTTP_LOGGER_LEVEL: error

global:
  appProtocol: https
  postgresDatabase: postgres
#  queueServers: nats://queue.default.svc:4222
  consulHost: consul.default.svc
  rabbitmqHostname: rabbit.default.svc
  postgresHostname: postgres.default.svc
  redisUrl: redis.default.svc
  seedJobs: false
  cfcrDomain: load.cfcr.io
  gceProject: codefresh-load
  agent: io.codefresh.load

tags:
  saas: true
  infra: false
  old-scheduler: false
