---
# on-prem values
imagePullPolicy: IfNotPresent

dockercfg: placeholder

# default service port
servicePort: 80

# image with kubectl that can work with our K8s version
kubectlImage: lachlanevenson/k8s-kubectl:v1.6.7

slackAppID: "4027524866.65820083427"
slackAppSecret: placeholder

stripeSecretKey: sk_test_8AnaAlccXXkcPXP7vrgKZQyy
stripePublicKey: ""
stripeWebhookSecret: ""

rollbarAccessToken: ""

logglyToken: invalid-token

firebaseUrl: "https://codefresh-on-prem.firebaseio.com/on-prem"
firebaseSecret: placeholder

ingress:
  enabled: true
  domain: '*'

consul:
  DatacenterName: codefresh-onprem
  Replicas: 1
  Memory: 64Mi

postgresql:
  postgresDatabase: codefresh
  postgresUser: postgres
  postgresPassword: eC9arYka4ZbH
  resources:
    requests:
      memory: 128Mi

mongodb:
  image: bitnami/mongodb:3.4.6-r0
  mongodbRootPassword: XT9nmM8dZD
  resources:
    requests:
      memory: 64Mi

redis:
  redisPassword: hoC9szf7NtrU
  resources:
    requests:
      memory: 64Mi

rabbitmq:
  rabbitmqUsername: user
  rabbitmqPassword: cVz9ZdJKYm7u

registry:
  mainChart: codefresh
  storageSize: 4Gi

builder:
  replicaCount: 1

runtimeEnvBlob: |
  {
      "default": {
        "dockerDaemonScheduler": {
           "type": "ConsulNodes",
           "cluster": {
              "name": "",
              "type": "builder",
              "returnRunnerIfNoBuilder": true
           }
        },
        "runtimeScheduler": {
           "type": "KubernetesPod",
           "cluster": {
              "inCluster": true,
              "namespace": "codefresh"
           },
           "image": "codefresh/engine:v2",
           "envVars": {
              "RESOURCE_LIMITATIONS_JSON": "/etc/admin/resource-limitations.json",
              "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
              "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
              "LOGGER_LEVEL": "debug",
              "NODE_ENV": "kubernetes",
              "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
              "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
              "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v9",
              "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
              "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v1",
              "NODE_TLS_REJECT_UNAUTHORIZED": "0"
           },
           "volumeMounts": {
              "internal-registry": {
                 "name": "internal-registry",
                 "mountPath": "/etc/admin/internal-registry.json",
                 "subPath": "internal-registry.json",
                 "readOnly": true
              },
              "additional-internal-registries": {
                 "name": "additional-internal-registries",
                 "mountPath": "/etc/admin/additional-internal-registries.json",
                 "subPath": "additional-internal-registries.json",
                 "readOnly": true
              },
              "resource-limitations": {
                 "name": "resource-limitations",
                 "mountPath": "/etc/admin/resource-limitations.json",
                 "subPath": "resource-limitations.json",
                 "readOnly": true
              },
              "cf-certs": {
                 "name": "cf-certs",
                 "mountPath": "/etc/ssl/cf",
                 "readOnly": true
              }
           },
           "volumes": {
              "internal-registry": {
                 "name": "internal-registry",
                 "configMap": {
                    "name": "cf-codefresh-registry"
                 }
              },
              "additional-internal-registries": {
                 "name": "additional-internal-registries",
                 "configMap": {
                    "name": "cf-codefresh-registry"
                 }
              },
              "resource-limitations": {
                 "name": "resource-limitations",
                 "configMap": {
                    "name": "cf-codefresh-resource-limitations"
                 }
              },
              "cf-certs": {
                 "name": "cf-certs",
                 "secret": {
                    "secretName": "cf-codefresh-cf-certs"
                 }
              }
           }
        }
     }
  }

runtime_envs:
  - name: codefresh-inc
    inCluster: true
    selectorRuntimeEnv: codefresh-inc
    namespace: dinds

cfui:
  image: gcr.io/codefresh-enterprise/cf-ui
  imageTag: onprem-v237

cfapi:
  image: gcr.io/codefresh-enterprise/cf-api
  imageTag: onprem-v207
  mongodbImage: bitnami/mongodb:3.4.6-r0
  env:
    ON_PREMISE: true
    LOGGER_LEVEL: debug
  deploymentTemplateImages: |
    [
      {
        "image": "codefresh/remote-docker:latest",
        "description": "Deploy image to Swarm",
        "link": "https://docs.codefresh.io/docs/docker-swarm",
        "code": " # Required Environment Variables:\n #\n # SSH_KEY - private SSH key, used to access Docker swarm master machine.\n #           need to replace 'newline' character with SPLIT_CHAR character.\n # SPLIT_CHAR - split character, you've used to replace newline in SSH key. Recommendation: use ',' (comma character).\n #\n # Swarm delpoy command arguments:\n #\n # RDOCKER_HOST - remote Docker swarm master machine, accessible over SSH (for example, ubuntu@ec2-public-ip)\n # STACK_NAME - is new Docker stack name\n #\n # Use command below to deploy compose application to a Swarm cluster\n # rdocker ${{RDOCKER_HOST}} docker stack deploy --compose-file docker-stack.yml ${{STACK_NAME}}\n #\n # read more here: https://docs.codefresh.io/docs/docker-swarm"
      },
      {
        "image": "codefresh/cf-deploy-ecs:latest",
        "description": "Deploy image to ECS",
        "link": "https://docs.codefresh.io/docs/amazon-ecs",
        "code": " # Required Environment Variables:\n #\n # AWS_ACCESS_KEY_ID - AWS access key\n # AWS_SECRET_ACCESS_KEY - AWS secret access key\n #\n # ECS deploy command arguments:\n #\n # AWS_REGION - target AWS region\n # CLUSTER_NAME - ECS cluster name\n # SERVICE_NAME - ECS service names\n #\n # Use command below to deploy application to AWS ECS\n \n # cfecs-update ${{AWS_REGION}} ${{CLUSTER_NAME}} ${{SERVICE_NAME}}\n #\n # read more here: https://docs.codefresh.io/docs/amazon-ecs"
      },
      {
        "image": "codefresh/cf-deploy-kubernetes:latest",
        "description": "Deploy image to Kubernetes",
        "link": "https://docs.codefresh.io/docs/kubernetes",
        "code": " # Required Environment Variables:\n #\n # KUBERNETES_USER - The user for the Kubernetes cluster.\n # KUBERNETES_PASSWORD - The password for the Kubernetes cluster.\n # KUBERNETES_SERVER - The server (HTTPS endpoint) of the Kubernetes cluster's API\n #\n # Use command below to deploy compose application to kubernetes\n #\n # /cf-deploy-kubernetes deployment.yml\n #\n # Make sure you change the path of 'deployment.yml' to the path in your repository\n #\n # read more about how to obtain the kubernetes credentials and using the codefresh deploy here: https://docs.codefresh.io/docs/kubernetes\n"
      }
    ]


cfruntime:
  image: gcr.io/codefresh-enterprise/cf-runtime
  imageTag: onprem-v119

cluster-providers:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/cluster-providers
  imageTag: onprem-v18

multiple-clusters:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/multiple-clusters
  imageTag: onprem-v12

kube-integration:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/kube-integration
  imageTag: onprem-v30

global:
  # Instantiate databases with seed data. Usually used in dynamic and on-prem environments.
  seedJobs: true

  #appUrl: app-url
  githubInternalToken: placeholder
  githubClientSecret: placeholder
  githubClientID: placeholder

  gitlabClientID: placeholder
  gitlabClientSecret: placeholder

  bitbucketClientID: invalid-id
  bitbucketClientSecret: invalid-secret

  # Global codefresh chart name; all subcharts use this name to access secrets and configmaps
  codefresh: codefresh

  # default application protocol
  appProtocol: http

  # Codefresh Payments service
  paymentsService: payments
  paymentsServicePort: 9000

  # cfapi service name
  cfapiService: cfapi

  # cfapi internal service port
  cfapiInternalPort: 3000

  # Builder service
  builderService: builder

  # Runner service
  runnerService: runner

  # dind image with tag
  dindImage: docker:17.06-dind

  # dind cpu requests
  dindCPU: 100m

  # dind memory requests
  dindMemory: 256Mi

  # dind cpu limits
  dindCPULimits: 1000m

  # dind memory limits
  dindMemoryLimits: 4096Mi

  # tls-sign service
  tlsSignService: cfsign
  tlsSignPort: 4999

  # nats service
  natsService: nats
  natsPort: 4222

  # rabbitmq service name
  rabbitService: rabbitmq

  # mongodb service
  mongoService: mongodb
  mongoPort: 27017
  mongodbDatabase: codefresh
  mongodbPassword: mTiXcU2wafr9
  mongodbUsername: cfuser

  # consul service
  consulService: consul

  # consul http port
  consulHttpPort: 8500

  # Redis service
  redisService: redis

  # Docker Registry service
  registryService: registry

  # registry port
  registryPort: 5000

  # PostgresSQL service
  postgresService: postgresql

  # database
  postgresDatabase: codefresh

  # k8s-beta
  clusterProvidersService: cluster-providers
  clusterProvidersPort: 9000
  kubeIntegrationService: kube-integration
  kubeIntegrationPort: 9000
  multipleClustersService: multiple-clusters
  multipleClustersPort: 9000
  accountsReferralsService: accounts-referrals
  accountsReferralsPort: 9000

tags:
  saas: false
  infra: true
  old-scheduler: false

