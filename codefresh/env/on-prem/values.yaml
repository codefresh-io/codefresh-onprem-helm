---
# on-prem values
imagePullPolicy: IfNotPresent

dockercfg: placeholder

# default service port
servicePort: 80

# image with kubectl that can work with our K8s version
kubectlImage: lachlanevenson/k8s-kubectl:v1.9.9

slackAppID: "4027524866.65820083427"
slackAppSecret: placeholder

stripeSecretKey: sk_test_8AnaAlccXXkcPXP7vrgKZQyy
stripePublicKey: ""
stripeWebhookSecret: ""

rollbarAccessToken: ""

logglyToken: invalid-token

firebaseUrl: "https://codefresh-on-prem.firebaseio.com/on-prem"
firebaseSecret: placeholder

rbacEnable: true
#webTLS:
#  secretName: star.codefresh.io

ingress:
  enabled: true
  rbacEnable: true
#  domain: '*'
  webTlsSecretName: "star.codefresh.io"

# ingress resource annotations:
annotations:
  kubernetes.io/ingress.class: nginx-codefresh
  nginx.ingress.kubernetes.io/service-upstream: "true"
  nginx.ingress.kubernetes.io/ssl-redirect: "false"
  nginx.org/redirect-to-https: "false"
  nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Request-ID: $request_id";
        proxy_set_header X-Request-ID $request_id;

consul:
  DatacenterName: codefresh-onprem
  Replicas: 1
  Memory: 64Mi
  nodeSelector: {}


postgresql:
  postgresDatabase: codefresh
  postgresUser: postgres
  postgresPassword: eC9arYka4ZbH
  nodeSelector: {}
  resources:
    requests:
      memory: 128Mi

mongodb:
  image: bitnami/mongodb:3.4.6-r0
  mongodbRootPassword: XT9nmM8dZD
  nodeSelector: {}
  resources:
    requests:
      memory: 64Mi

redis:
  redisPassword: hoC9szf7NtrU
  nodeSelector: {}
  resources:
    requests:
      memory: 64Mi

rabbitmq:
  rabbitmqUsername: user
  rabbitmqPassword: cVz9ZdJKYm7u
  nodeSelector: {} 

registry:
  mainChart: codefresh
  nodeSelector: {}

builder:
  replicaCount: 1

getRuntimeEnvs: files/on-prem/runtimeEnvironments.json
mongoSeedJobScript: files/on-prem/mongoSeedJobScript

runtime_envs:
  - name: codefresh-inc
    inCluster: true
    selectorRuntimeEnv: codefresh-inc
    namespace: dinds

cfui:
  image: gcr.io/codefresh-enterprise/codefresh/cf-ui
  dockercfg: placeholder
  logglyToken: invalid-token
  segmentKey: invalid-key
  newrelicLicenseKey: invalid-key
#  webTLS:
#    secretName: star.codefresh.io  

onboarding-status:
  enabled: false
  image: gcr.io/codefresh-enterprise/codefresh/onboarding-status
  dockercfg: placeholder
  newrelicLicenseKey: invalid-key

runtime-environment-manager:
  enabled: true
  image: gcr.io/codefresh-enterprise/codefresh/runtime-environment-manager
  dockercfg: placeholder
  newrelicLicenseKey: invalid-key

cfanalytic:
  image: gcr.io/codefresh-enterprise/codefresh/cf-analytic

cfapi:
  github:
    apiPathPrefix: /api/v3
  image: gcr.io/codefresh-enterprise/codefresh/cf-api
  expirationURL: https://codefresh.io/contact-sales
  rbacEnable: true
  env:
    ON_PREMISE: true
    LOGGER_LEVEL: debug
  deploymentTemplateImages: |
    [
      {
        "image": "codefresh/remote-docker:latest",
        "description": "Deploy image to Swarm",
        "link": "https://docs.codefresh.io/docs/docker-swarm",
        "code": " # Required Environment Variables:\n #\n # SSH_KEY - private SSH key, used to access Docker swarm master machine.\n #           need to replace 'newline' character with SPLIT_CHAR character.\n # SPLIT_CHAR - split character, you've used to replace newline in SSH key. Recommendation: use ',' (comma character).\n #\n # Swarm delpoy command arguments:\n #\n # RDOCKER_HOST - remote Docker swarm master machine, accessible over SSH (for example, ubuntu@ec2-public-ip)\n # STACK_NAME - is new Docker stack name\n #\n # Use command below to deploy compose application to a Swarm cluster\n # rdocker ${{RDOCKER_HOST}} docker stack deploy --compose-file docker-stack.yml ${{STACK_NAME}}\n #\n # read more here: https://docs.codefresh.io/docs/docker-swarm"
      },
      {
        "image": "codefresh/cf-deploy-ecs:latest",
        "description": "Deploy image to ECS",
        "link": "https://docs.codefresh.io/docs/amazon-ecs",
        "code": " # Required Environment Variables:\n #\n # AWS_ACCESS_KEY_ID - AWS access key\n # AWS_SECRET_ACCESS_KEY - AWS secret access key\n #\n # ECS deploy command arguments:\n #\n # AWS_REGION - target AWS region\n # CLUSTER_NAME - ECS cluster name\n # SERVICE_NAME - ECS service names\n #\n # Use command below to deploy application to AWS ECS\n \n # cfecs-update ${{AWS_REGION}} ${{CLUSTER_NAME}} ${{SERVICE_NAME}}\n #\n # read more here: https://docs.codefresh.io/docs/amazon-ecs"
      },
      {
        "image": "codefresh/cf-deploy-kubernetes:latest",
        "description": "Deploy image to Kubernetes",
        "link": "https://docs.codefresh.io/docs/kubernetes",
        "code": " # Required Environment Variables:\n #\n # KUBERNETES_USER - The user for the Kubernetes cluster.\n # KUBERNETES_PASSWORD - The password for the Kubernetes cluster.\n # KUBERNETES_SERVER - The server (HTTPS endpoint) of the Kubernetes cluster's API\n #\n # Use command below to deploy compose application to kubernetes\n #\n # /cf-deploy-kubernetes deployment.yml\n #\n # Make sure you change the path of 'deployment.yml' to the path in your repository\n #\n # read more about how to obtain the kubernetes credentials and using the codefresh deploy here: https://docs.codefresh.io/docs/kubernetes\n"
      }
    ]

cluster-providers:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/codefresh/cluster-providers

charts-manager:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/codefresh/charts-manager
  environment:
    MONGO_URI: mongodb://cf-mongodb:27017/charts-manager
    POSTGRES_HOST: cf-postgresql
    EVENTBUS_URI: amqp://cf-rabbitmq
    CONTEXT_MANAGER_URI: cf-context-manager
    API_URI: cf-cfapi
  
context-manager:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/codefresh/context-manager
  environment:
    MONGO_URI: mongodb://cf-mongodb:27017/context-manager
    EVENTBUS_URI: amqp://cf-rabbitmq
    POSTGRES_HOST: cf-postgresql
  
pipeline-manager:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/codefresh/pipeline-manager
  environment:
    MONGO_URI: mongodb://cf-mongodb:27017/pipeline-manager
    INTERNAL_API_URI: http://cf-cfapi:9007

kube-integration:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/codefresh/kube-integration

tasker-kubernetes:
  replicaCount: 1
  image: gcr.io/codefresh-enterprise/codefresh/tasker-kubernetes

helm-repo-manager:
  replicaCount: 1
  image:
    repository: gcr.io/codefresh-enterprise/codefresh/helm-repo-manager
    tag: 0.2.18

global:
  # Instantiate databases with seed data. Usually used in dynamic and on-prem environments.
  #seedJobs: true
  #certsJobs: true

  #appUrl: app-url
  githubInternalToken: placeholder
  githubClientSecret: placeholder
  githubClientID: placeholder

  gitlabClientID: placeholder
  gitlabClientSecret: placeholder

  bitbucketClientID: invalid-id
  bitbucketClientSecret: invalid-secret

  # Global codefresh chart name; all subcharts use this name to access secrets and configmaps
  codefresh: codefresh

  # default application protocol
  appProtocol: http

  # Codefresh Payments service
  paymentsService: payments
  paymentsServicePort: 9000

  # cfapi service name
  cfapiService: cfapi

  # cfapi internal service port
  cfapiInternalPort: 3000

  # Builder service
  builderService: builder

  # Runner service
  runnerService: runner

  # dind image with tag
  #dindImage: docker:17.06-dind
  dindImage: docker:18.09-dind
  #dindImage: eugenecodefresh/cf-dind-with-cleaner:17.05.0-ce-dind

  # dind cpu requests
  dindCPU: 100m

  # dind memory requests
  dindMemory: 256Mi

  # dind cpu limits
  dindCPULimits: 1000m

  # dind memory limits
  dindMemoryLimits: 4096Mi

  # tls-sign service
  tlsSignService: cfsign
  tlsSignPort: 4999

  # nats service
  natsService: nats
  natsPort: 4222

  # rabbitmq service name
  rabbitService: rabbitmq

  # mongodb service
  mongoService: mongodb
  mongoPort: 27017
  mongodbDatabase: codefresh
  mongodbPassword: mTiXcU2wafr9
  mongodbUsername: cfuser
  mongodbImage: bitnami/mongodb:3.4.6-r0
  mongodbRootPassword: XT9nmM8dZD

  # consul service
  consulService: consul

  # consul http port
  consulHttpPort: 8500

  # Redis service
  redisService: redis

  # Docker Registry service
  registryService: registry

  # registry port
  registryPort: 5000

  # PostgresSQL service
  postgresService: postgresql

  # PostgresSQL user name
  postgresUser: postgres
  # PostgresSQL password
  postgresPassword: eC9arYka4ZbH

  # database
  postgresDatabase: codefresh

  # k8s-beta
  clusterProvidersService: cluster-providers
  clusterProvidersPort: 9000
  kubeIntegrationService: kube-integration
  kubeIntegrationPort: 9000
  accountsReferralsService: accounts-referrals
  accountsReferralsPort: 9000
  chartsManagerService: charts-manager
  chartsManagerPort: 9000
  contextManagerService: context-manager
  contextManagerPort: 9000
  pipelineManagerService: pipeline-manager
  pipelineManagerPort: 9000
  onboardingStatusService: onboarding-status
  onboardingStatusPort: 80
  runtimeEnvironmentManagerService: runtime-environment-manager
  runtimeEnvironmentManagerPort: 80
  helmRepoManagerService: helm-repo-manager
  hermesService: hermes
  dindProviderService: dind-provider
  dindProviderPort: 9000


  internalServiceTolerations:
  - effect: NoSchedule
    key: nodeType
    operator: Equal
    value: internal

tags:
  saas: false
  infra: true
  old-scheduler: false


# versions:

