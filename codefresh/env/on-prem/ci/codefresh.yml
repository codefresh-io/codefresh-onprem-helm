version: '1.0'
mode: parallel
stages:
  - clone
  - prepare
  - create package
  - security report
  - create test infra
  - install
  - test
  - delete test infra
  - git_tag
  - notifications

steps:
  main_clone:
    stage: clone
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    git: ${{GIT_CONTEXT}}
    revision: ${{CF_BRANCH}}

  validate_and_export_version:
    description: "Runs a few validation checks"
    image: codefreshio/ci-helpers
    stage: prepare
    shell: bash
    commands:
      - source ./codefresh/env/on-prem/ci/validate.sh
      - cf_export ONPREM_VERSION
    when:
      steps:
      - name: main_clone
        on:
        - success

  prepare_values_file:
    description: "Prepares the chart main values file"
    image: codefreshio/ci-helpers
    stage: prepare
    shell: bash
    when:
      steps:
      - name: main_clone
        on:
        - success
    commands:
      - |-
        set -e

        echo -e "\e[33m$(cat codefresh/env/on-prem/versions.yaml)\e[0m"
        yq m -x codefresh/env/on-prem/values.yaml codefresh/env/on-prem/versions.yaml > codefresh/values.yaml

  build_chart:
    description: "Builds a sem-versioned Helm package. Adds a feature branch tag to the chart version, when built from non-master"
    image: alpine/helm:3.5.4
    stage: create package
    when:
      steps:
      - name: validate_and_export_version
        on:
        - success
      - name: prepare_values_file
        on:
        - success
    commands:
      - |-
        set -u

        if [[ "${CF_BRANCH}" != "${ONPREM_MASTER_BRANCH}" ]]; then
           ONPREM_VERSION="${ONPREM_VERSION}-${CF_BRANCH}"
        fi

        cf_export ONPREM_VERSION

        # the line below is a workaround for CR-2459 and https://github.com/helm/helm/issues/8036
        ./codefresh/env/on-prem/ci/add_helm_repos.sh

        helm dependency build --debug codefresh
        cf_export PACKAGE=$(echo $(helm package codefresh -d ${{CF_VOLUME_PATH}}/cf_chart --version $ONPREM_VERSION) | awk -F ': ' '{print $2}')

  push_chart:
    description: "Pushes the build chart to one of the onprem Helm repos"
    image: codefresh/helm-onprem-package
    stage: create package
    working_directory: ${{CF_VOLUME_PATH}}/cf_chart
    commands:
      - if [[ "${CF_BRANCH}" == "${ONPREM_MASTER_BRANCH}" ]]; then export CHANNEL=${CHANNEL:-prod}; else export CHANNEL=${CHANNEL:-dev}; fi
      - cf_export CHANNEL
      - echo -e "\e[33mPushing onprem chart of version \"${ONPREM_VERSION}\" to onprem \"${CHANNEL}\" repo\n\e[0m"
      - aws s3 cp s3://charts.codefresh.io/${CHANNEL}/index.yaml .
      - helm repo index . --merge index.yaml --url http://charts.codefresh.io/${CHANNEL}/
      - aws s3 cp index.yaml s3://charts.codefresh.io/${CHANNEL}/
      - aws s3 cp ${PACKAGE} s3://charts.codefresh.io/${CHANNEL}/
    when:
      steps:
      - name: build_chart
        on:
        - success

  security_scan_report:
    image: codefresh/cli
    description: Scans all onprem images and sends a report to S3
    fail_fast: false
    stage: security report
    commands:
      - codefresh run --variable CHANNEL=${CHANNEL} --variable ONPREM_VERSION=${ONPREM_VERSION} on-prem/onprem-security-report
    when:
      branch:
        only: [ "${{ONPREM_MASTER_BRANCH}}" ]
      steps:
      - name: push_chart
        on:
        - success

  prepare_test_clusters:
    stage: create test infra
    description: "Prepares a GKE cluster for the tests"
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.8
    shell: bash
    working_directory: IMAGE_WORK_DIR
    matrix:
      environment:
        - [TEST_CASE_ID=01,USE_EXISTING_CLUSTER=true]
        - [TEST_CASE_ID=02,USE_EXISTING_CLUSTER=true]
        - [TEST_CASE_ID=03,USE_EXISTING_CLUSTER=true]
        - [TEST_CASE_ID=04,USE_EXISTING_CLUSTER=true]
    commands:
      - source ./prepare_test_cluster.sh
    when:
      steps:
        - name: validate_and_export_version
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  extract_chrome_vers:
    title: Extract chrome versions
    stage: create test infra
    type: parallel
    steps:
      latest_chrome_version_step:
        title: Get latest chrome version
        type: freestyle
        image: alpine
        commands:
          - >
            apk update

            apk add jq curl

            result=$(curl -sk http://omahaproxy.appspot.com/all.json)

            export LATEST_CHROME_VERSION=$(echo $result | jq -c '.[] | select(.os == "linux") | .versions[] | select(.channel == "stable") | .version' | cut -d'"' -f 2)

            cf_export STABLE_MAJOR_VERSION=$(echo "$LATEST_CHROME_VERSION" | cut -d'.' -f1)

            echo $LATEST_CHROME_VERSION

            cf_export LATEST_CHROME_VERSION
      image_chrome_version_step:
        title: Get chrome version inside an e2e image
        type: freestyle
        image: codefresh/ui-e2e-image
        commands:
          - >
            export CURRENT_CHROME_VERSION=$(google-chrome --product-version)

            cf_export LOCAL_MAJOR_VERSION=$(echo "$CURRENT_CHROME_VERSION" | cut -d'.' -f1)

            echo $CURRENT_CHROME_VERSION

            cf_export CURRENT_CHROME_VERSION

  helm_install:
    stage: install
    title: "[Classic] Helm Install"
    description: "Verifies if the chart built from the current branch can be successfully installed with Helm"
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.8
    shell: bash
    working_directory: IMAGE_WORK_DIR
    commands:
      - export LOCAL_CHART_PATH=${{PACKAGE}}
      - source ./test-cases/install_pure_helm.sh
    when:
      steps:
        - name: build_chart
          on:
          - success
        - name: prepare_test_clusters
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  helm_upgrade:
    stage: install
    title: "[Classic] Helm Upgrade"
    description: |-
      Verifies if the latest onprem release can be successfully upgraded
      with the chart built from the current branch. Seeds the data for the E2E tests
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.8
    shell: bash
    working_directory: IMAGE_WORK_DIR
    commands:
      - export LOCAL_CHART_PATH=${{PACKAGE}}
      - source ./test-cases/upgrade_pure_helm.sh
      - cf_export CF_APP_HOST_V1=$CF_APP_HOST
      - cf_export CLUSTER_NAME
    when:
      steps:
        - name: build_chart
          on:
          - success
        - name: prepare_test_clusters
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  helm_install_argo_platform:
    stage: install
    title: "[Argo-Platform] Helm Install"
    description: "Verifies if the chart built from the current branch can be successfully installed with Helm"
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.8
    shell: bash
    working_directory: IMAGE_WORK_DIR
    commands:
      - export LOCAL_CHART_PATH=${{PACKAGE}}
      - source ./test-cases/install_argo_platform_helm.sh
    when:
      steps:
        - name: build_chart
          on:
          - success
        - name: prepare_test_clusters
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  helm_upgrade_argo_platform:
    stage: install
    title: "[Argo-Platform] Helm Upgrade"
    description: |-
      Verifies if the latest onprem release can be successfully upgraded
      with the chart built from the current branch. Seeds the data for the E2E tests
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.8
    shell: bash
    working_directory: IMAGE_WORK_DIR
    commands:
      - export LOCAL_CHART_PATH=${{PACKAGE}}
      - source ./test-cases/upgrade_argo_platform_helm.sh
      - cf_export CF_APP_HOST_V2=$CF_APP_HOST
      - cf_export CLUSTER_NAME
    when:
      steps:
        - name: build_chart
          on:
          - success
        - name: prepare_test_clusters
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  export_cf_projs_ver:
    stage: test
    description: "Gets the cfapi version of the current onprem release for E2E tests"
    image: codefreshio/ci-helpers
    commands:
      - cf_export CF_API_VERSION=$(yq r codefresh/requirements.lock 'dependencies(name==cfapi).version')
      - cf_export CF_UI_VERSION=$(yq r codefresh/requirements.lock 'dependencies(name==cfui).version')
    when:
      steps:
        - name: validate_and_export_version
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'
          skipE2ETests: '"${{SKIP_E2E_TESTS}}" != "true"'

  api_clone:
    type: git-clone
    stage: test
    repo: codefresh-io/cf-api
    revision: "${{CF_API_VERSION}}"
    git: "${{GIT_CONTEXT}}"
    when:
      steps:
      - name: export_cf_projs_ver
        on:
        - success

  ui_clone:
    type: git-clone
    stage: test
    repo: codefresh-io/cf-ui
    revision: "${{CF_UI_VERSION}}"
    git: "${{GIT_CONTEXT}}"
    when:
      steps:
        - name: export_cf_projs_ver
          on:
            - success

  e2e_api_test:
    title: "[Classic] Running API E2E Tests"
    stage: test
    type: parallel
    steps:
      sequential_e2e_api_test:
        title: Sequential Running API E2E Tests
        type: freestyle
        stage: test
        working_directory: /app
        fail_fast: true
        image: codefresh/cf-api-testing
        commands:
          - set -eu
          - export NODE_TLS_REJECT_UNAUTHORIZED=0 HOST=${{E2E_K8S_HOST}} CLIENT_CA=${{E2E_K8S_CLIENT_CA}} TOKEN=${{E2E_K8S_TOKEN}}
          - export AWS_ACCESS_KEY=${{UI_E2E_AWS_ACCESS_KEY}} AWS_SECRET_ACCESS_KEY=${{UI_E2E_AWS_SECRET_ACCESS_KEY}}
          - yarn cli test --user-token ${{E2E_API_KEY}} --report html --api-url https://${CF_APP_HOST_V1} --report-path ${{CF_VOLUME_PATH}}/e2e_api_test --tests-source ${{CF_VOLUME_PATH}}/cf-api/e2e-tests --sequential --tag !onprem_bug
      parallel_e2e_api_test:
        title: Parallel Running API E2E Tests
        type: freestyle
        stage: test
        working_directory: /app
        fail_fast: true
        image: codefresh/cf-api-testing
        commands:
          - set -eu
          - export NODE_TLS_REJECT_UNAUTHORIZED=0 HOST=${{E2E_K8S_HOST}} CLIENT_CA=${{E2E_K8S_CLIENT_CA}} TOKEN=${{E2E_K8S_TOKEN}}
          - export AWS_ACCESS_KEY=${{UI_E2E_AWS_ACCESS_KEY}} AWS_SECRET_ACCESS_KEY=${{UI_E2E_AWS_SECRET_ACCESS_KEY}}
          - yarn cli test --user-token ${{E2E_API_KEY}} --report html --api-url https://${CF_APP_HOST_V1} --report-path ${{CF_VOLUME_PATH}}/e2e_api_test --tests-source ${{CF_VOLUME_PATH}}/cf-api/e2e-tests --parallel --tag !onprem_bug
    when:
      steps:
        - name: api_clone
          on:
          - success
        - name: helm_upgrade
          on:
          - success

  e2e_ui_test:
    title: "[Classic] Running UI E2E Tests"
    type: freestyle
    stage: test
    fail_fast: true
    arguments:
      image: codefresh/ui-e2e-image
      working_directory: '${{ui_clone}}'
      environment:
        - ENVIROMENT=${{ENVIRONMENT}}
        - BASE_URL=https://${{CF_APP_HOST_V1}}
        - SLACK_URI=${{UI_E2E_SLACK}}
        - TEST_USER=${{UI_USER_NAME}}
        - TEST_PASSWORD=${{UI_USER_PWD}}
        - TEST_PUBLIC_PIPELINE_ID=${{PUBLIC_PIPELINE_ID}}
        - AWS_ACCESS_KEY=${{UI_E2E_AWS_ACCESS_KEY}}
        - AWS_SECRET_ACCESS_KEY=${{UI_E2E_AWS_SECRET_ACCESS_KEY}}
    commands:
      - set -eu
      - export NODE_TLS_REJECT_UNAUTHORIZED=0 HOST=${{E2E_K8S_HOST}} CLIENT_CA=${{E2E_K8S_CLIENT_CA}} TOKEN=${{E2E_K8S_TOKEN}}
      - export AWS_ACCESS_KEY=${{UI_E2E_AWS_ACCESS_KEY}} AWS_SECRET_ACCESS_KEY=${{UI_E2E_AWS_SECRET_ACCESS_KEY}} BASE_URL=https://${{CF_APP_HOST_V1}}
      - export ON_PREM=yes
      - yarn install
      - yarn e2e
    when:
      steps:
        - name: ui_clone
          on:
            - success
        - name: helm_upgrade
          on:
            - success
        - name: extract_chrome_vers
          on:
            - success

  e2e_argo_platform:
    title: "[Argo-Platfrom] Running E2E Tests"
    stage: test
    type: codefresh-run
    arguments:
      PIPELINE_ID: argo-platform/e2e-onprem
      VARIABLE:
        - CODEFRESH_API_URL_BASE=https://${{CF_APP_HOST_V2}}
        - CF_API_KEY=${{E2E_API_KEY}}
    when:
      steps:
        - name: helm_upgrade_argo_platfrom
          on:
            - success 
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'
          skipE2ETests: '"${{SKIP_E2E_TESTS}}" != "true"'            

  failed_e2e_notifications:
    stage: notifications
    title: E2E failures notification
    type: slack-message-sender
    arguments:
        WEBHOOK_URL: ${{UI_E2E_SLACK}}
        MESSAGE: "E2E has failed in the build ${{CF_BUILD_URL}}"
    when:
      steps:
        any:
        - name: e2e_api_test_on_upgrade
          on:
            - failure            

  delete_test_clusters:
    stage: delete test infra
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.8
    working_directory: IMAGE_WORK_DIR
    matrix:
      environment:
        - [TEST_CASE_ID=01]
        - [TEST_CASE_ID=02]
        - [TEST_CASE_ID=03]
        - [TEST_CASE_ID=04]
    commands:
      - ./delete-cluster.sh
    when:
      steps:
        - name: helm_install
          on:
          - success
        - name: helm_upgrade
          on:
          - success
        - name: helm_install_argo_platform
          on:
          - success
        - name: helm_upgrade_argo_platform
          on:
          - success         
        - name: e2e_api_test
          on:
          - success
        - name: e2e_ui_test
          on:
            - success
        # - name: e2e_argo_platform
        #   on:
        #     - success


  create_git_tag:
    image: codefreshio/ci-helpers
    stage: git_tag
    commands:
      - |-
        source /get-token/get-gh-token.sh
        curl --fail -X POST -d "{\"ref\": \"refs/tags/onprem-${ONPREM_VERSION}\", \"sha\": \"${CF_REVISION}\"}" -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${CF_REPO_OWNER}/${CF_REPO_NAME}/git/refs
    when:
      branch:
        only: [ "${{ONPREM_MASTER_BRANCH}}" ]
      steps:
      - name: push_chart
        on:
        - success
