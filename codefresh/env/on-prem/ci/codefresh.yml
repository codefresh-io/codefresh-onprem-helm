version: '1.0'
mode: parallel
stages:
  - clone
  - prepare
  - create package
  - security report
  - create test infra
  - test
  - delete test infra
  - git_tag

steps:
  main_clone:
    stage: clone
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    git: ${{GIT_CONTEXT}}
    revision: ${{CF_BRANCH}}

  validate_and_export_version:
    description: "Runs a few validation checks"
    image: codefreshio/ci-helpers
    stage: prepare
    shell: bash
    commands:
      - source ./codefresh/env/on-prem/ci/validate.sh
      - cf_export ONPREM_VERSION
    when:
      steps:
      - name: main_clone
        on:
        - success

  prepare_values_file:
    description: "Prepares the chart main values file"
    image: codefreshio/ci-helpers
    stage: prepare
    shell: bash
    when:
      steps:
      - name: main_clone
        on:
        - success
    commands:
      - |-
        set -e
        
        echo -e "\e[33m$(cat codefresh/env/on-prem/versions.yaml)\e[0m"
        yq m codefresh/env/on-prem/values.yaml codefresh/env/on-prem/versions.yaml > codefresh/values.yaml

  build_chart:
    description: "Builds a sem-versioned Helm package. Adds a feature branch tag to the chart version, when built from non-master"
    image: alpine/helm:3.2.1
    stage: create package
    when:
      steps:
      - name: validate_and_export_version
        on:
        - success
      - name: prepare_values_file
        on:
        - success
    commands:
      - |-
        set -u

        if [[ "${CF_BRANCH}" != "${ONPREM_MASTER_BRANCH}" ]]; then
           ONPREM_VERSION="${ONPREM_VERSION}-${CF_BRANCH}"
        fi

        cf_export ONPREM_VERSION

        helm repo add codefresh http://chartmuseum.codefresh.io
        helm repo add codefresh-dev http://chartmuseum-dev.codefresh.io
        helm dependency build --debug codefresh
        cf_export PACKAGE=$(echo $(helm package codefresh -d ${{CF_VOLUME_PATH}}/cf_chart --version $ONPREM_VERSION) | awk -F ': ' '{print $2}')

  push_chart:
    description: "Pushes the build chart to one of the onprem Helm repos"
    image: codefresh/helm-onprem-package
    stage: create package
    working_directory: ${{CF_VOLUME_PATH}}/cf_chart
    commands:
      - if [[ "${CF_BRANCH}" == "${ONPREM_MASTER_BRANCH}" ]]; then export CHANNEL=${CHANNEL:-prod}; else export CHANNEL=${CHANNEL:-dev}; fi
      - cf_export CHANNEL
      - echo -e "\e[33mPushing onprem chart of version \"${ONPREM_VERSION}\" to onprem \"${CHANNEL}\" repo\n\e[0m"
      - aws s3 cp s3://charts.codefresh.io/${CHANNEL}/index.yaml .
      - helm repo index . --merge index.yaml --url http://charts.codefresh.io/${CHANNEL}/
      - aws s3 cp index.yaml s3://charts.codefresh.io/${CHANNEL}/
      - aws s3 cp ${PACKAGE} s3://charts.codefresh.io/${CHANNEL}/
    when:
      steps:
      - name: build_chart
        on:
        - success

  security_scan_report:
    image: codefresh/cli
    description: Scans all onprem images and sends a report to S3
    fail_fast: false
    stage: security report
    commands:
      - codefresh run --variable CHANNEL=${CHANNEL} --variable ONPREM_VERSION=${ONPREM_VERSION} on-prem/onprem-security-report
    when:
      branch:
        only: [ "${{ONPREM_MASTER_BRANCH}}" ]
      steps:
      - name: push_chart
        on:
        - success

  prepare_test_clusters:
    stage: create test infra
    description: "Prepares a GKE cluster for the tests"
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.3
    shell: bash
    working_directory: IMAGE_WORK_DIR
    matrix:
      environment:
        - [TEST_CASE_ID=01]
        - [TEST_CASE_ID=02]
    commands:
      - source ./prepare_test_cluster.sh
    when:
      steps:
        - name: validate_and_export_version
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  helm_install:
    stage: test
    description: "Verifies if the chart built from the current branch can be successfully installed with Helm"
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.3
    shell: bash
    working_directory: IMAGE_WORK_DIR
    commands:
      - export LOCAL_CHART_PATH=${{PACKAGE}}
      - source ./test-cases/install_pure_helm.sh
    when:
      steps:
        - name: build_chart
          on:
          - success
        - name: prepare_test_clusters
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  helm_upgrade:
    stage: test
    description: |-
      Verifies if the latest onprem release can be successfully upgraded
      with the chart built from the current branch. Seeds the data for the E2E tests
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.3
    shell: bash
    working_directory: IMAGE_WORK_DIR
    commands:
      - export LOCAL_CHART_PATH=${{PACKAGE}}
      - source ./test-cases/upgrade_pure_helm.sh
      - cf_export CF_APP_HOST CLUSTER_NAME
    when:
      steps:
        - name: build_chart
          on:
          - success
        - name: prepare_test_clusters
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'

  export_cfapi_ver:
    stage: test
    description: "Gets the cfapi version of the current onprem release for E2E tests"
    image: codefreshio/ci-helpers
    commands:
      - cf_export CF_API_VERSION=$(yq r codefresh/requirements.lock 'dependencies(name==cfapi).version')
    when:
      steps:
        - name: validate_and_export_version
          on:
          - success
      branch:
        ignore: [ "${{ONPREM_MASTER_BRANCH}}" ]
      condition:
        all:
          skipTests: '"${{SKIP_TESTS}}" != "true"'
          skipE2ETests: '"${{SKIP_E2E_TESTS}}" != "true"'

  api_clone:
    type: git-clone
    stage: test
    repo: codefresh-io/cf-api
    revision: "${{CF_API_VERSION}}"
    git: "${{GIT_CONTEXT}}"
    when:
      steps:
      - name: export_cfapi_ver
        on:
        - success

  e2e_api_test:
    stage: test
    description: Runs API E2E Tests
    shell: bash
    working_directory: /app
    retry:
      maxAttempts: 2
    image: codefresh/cf-api-testing
    commands:
      - set -eu
      - export NODE_TLS_REJECT_UNAUTHORIZED=0 HOST=${{E2E_K8S_HOST}} CLIENT_CA=${{E2E_K8S_CLIENT_CA}} TOKEN=${{E2E_K8S_TOKEN}}
      - yarn cli test --user-token ${{E2E_API_KEY}} --api-url https://${CF_APP_HOST} --tests-source ${{CF_VOLUME_PATH}}/cf-api/e2e-tests
    when:
      steps:
      - name: api_clone
        on:
        - success
      - name: helm_install
        on:
        - success
      - name: helm_upgrade
        on:
        - success

  delete_test_cluster:
    stage: delete test infra
    image: gcr.io/codefresh-inc/codefresh/onprem-tester:0.1.3
    working_directory: IMAGE_WORK_DIR
    matrix:
      environment:
        - [TEST_CASE_ID=01]
        - [TEST_CASE_ID=02]
    commands:
      - ./delete-cluster.sh
    when:
      condition:
        any:
          e2eFinished: steps.e2e_api_test.result == "success"
          skipE2ETests: '"${{SKIP_E2E_TESTS}}" == "true" && steps.prepare_test_clusters.result == "success"'

  create_git_tag:
    image: codefreshio/ci-helpers
    stage: git_tag
    commands:
      - |-
        source /get-token/get-gh-token.sh
        curl --fail -X POST -d "{\"ref\": \"refs/tags/onprem-${ONPREM_VERSION}\", \"sha\": \"${CF_REVISION}\"}" -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${CF_REPO_OWNER}/${CF_REPO_NAME}/git/refs
    when:
      branch:
        only: [ "${{ONPREM_MASTER_BRANCH}}" ]
      steps:
      - name: push_chart
        on:
        - success