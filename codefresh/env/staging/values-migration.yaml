---
# records to /etc/hosts of the containers
# hostsApp: default empty

firebaseUrl: "https://codefresh-staging-75bd2.firebaseio.com/staging"

hostsApp: |
  50.56.64.16   stash.ironsrc.com

webTLS:
  secretName: star.codefresh.io
  #key:
  #cert:

postgresql:
  postgresHostname: postgres.default.svc
  #postgresUser:
  #postgresPassword:

redis:
  redisUrl: redis.default.svc
  #redisPassword:

rabbitmq:
  rabbitmqHostname: rabbit.default.svc
  #rabbitmqUsername:
  #rabbitmqPassword:

# use smaller registry storage
registry:
  storageSize: 10Gi

builder:
  replicaCount: 1

runtimeEnvBlob: |
  {
      "default": {
        "dockerDaemonScheduler": {
           "type": "ConsulNodes",
           "cluster": {
              "name": "",
              "type": "builder",
              "returnRunnerIfNoBuilder": true
           }
        },
        "runtimeScheduler": {
           "type": "KubernetesPod",
           "cluster": {
              "name": "cluster-dev-1.cf-cd.com",
              "namespace": "default",
              "kubeconfigFilePath": "/root/.kube/config",
              "nodeSelector": {"codefresh/node-type": "app"}
           },
           "image": "codefresh/engine:54",
           "resources": {
              "requests": {
                 "cpu": "100m",
                 "memory": "100Mi"
              },
              "limits": {
                 "cpu": "1000m",
                 "memory": "2048Mi"
              }
           },
           "envVars": {
              "RESOURCE_LIMITATIONS_JSON": "/etc/admin/resource-limitations.json",
              "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
              "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
              "LOGGER_LEVEL": "debug",
              "NODE_ENV": "kubernetes",
              "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
              "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
              "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
              "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
              "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v5"
           },
           "volumeMounts": {
              "internal-registry": {
                 "name": "internal-registry",
                 "mountPath": "/etc/admin/internal-registry.json",
                 "subPath": "internal-registry.json",
                 "readOnly": true
              },
              "additional-internal-registries": {
                 "name": "additional-internal-registries",
                 "mountPath": "/etc/admin/additional-internal-registries.json",
                 "subPath": "additional-internal-registries.json",
                 "readOnly": true
              },
              "resource-limitations": {
                 "name": "resource-limitations",
                 "mountPath": "/etc/admin/resource-limitations.json",
                 "subPath": "resource-limitations.json",
                 "readOnly": true
              }
           },
           "volumes": {
              "internal-registry": {
                 "name": "internal-registry",
                 "secret": {
                    "secretName": "staging-internal-registry"
                 }
              },
              "additional-internal-registries": {
                 "name": "additional-internal-registries",
                 "secret": {
                    "secretName": "staging-internal-registry"
                 }
              },
              "resource-limitations": {
                 "name": "resource-limitations",
                 "configMap": {
                    "name": "resource-limitations"
                 }
              }
           }
        }
     },
      "defaultUserProvidedCluster": {
          "runtimeScheduler": {
                              	"type": "KubernetesPod",
                              	"cluster": {
                              		"namespace": "default"
                              	},
                              	"image": "codefresh/engine:54",
                              	"resources": {
                              		"requests": {
                              			"cpu": "100m",
                              			"memory": "100Mi"
                              		},
                              		"limits": {
                              			"cpu": "1900m",
                              			"memory": "4096Mi"
                              		}
                              	},
                              	"envVars": {
                              		"RESOURCE_LIMITATIONS_JSON": "/etc/admin/resource-limitations.json",
                              		"RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
                              		"RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
                              		"LOGGER_LEVEL": "debug",
                              		"NODE_ENV": "kubernetes",
                              		"DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
                              		"DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
                              		"DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
                              		"CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
                              		"GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v5"
                              	},
                              	"volumeMounts": {
                              		"internal-registry": {
                              			"name": "internal-registry",
                              			"mountPath": "/etc/admin/internal-registry.json",
                              			"subPath": "internal-registry.json",
                              			"readOnly": true
                              		},
                              		"additional-internal-registries": {
                              			"name": "additional-internal-registries",
                              			"mountPath": "/etc/admin/additional-internal-registries.json",
                              			"subPath": "additional-internal-registries.json",
                              			"readOnly": true
                              		},
                              		"resource-limitations": {
                              			"name": "resource-limitations",
                              			"mountPath": "/etc/admin/resource-limitations.json",
                              			"subPath": "resource-limitations.json",
                              			"readOnly": true
                              		}
                              	},
                              	"volumes": {
                              		"internal-registry": {
                              			"name": "internal-registry",
                              			"secret": {
                              				"secretName": "internal-registry"
                              			}
                              		},
                              		"additional-internal-registries": {
                              			"name": "additional-internal-registries",
                              			"secret": {
                              				"secretName": "internal-registry"
                              			}
                              		},
                              		"resource-limitations": {
                              			"name": "resource-limitations",
                              			"configMap": {
                              				"name": "resource-limitations"
                              			}
                              		}
                              	}
                              },
          "dockerDaemonScheduler": {
                                   	"type": "DindKubernetesPod",
                                   	"cluster": {
                                   		"namespace": "default"
                                   	},
                                   	"dindImage": "codefresh/cf-dind:v5",
                                   	"connectByPodIp": true,
                                   	"defaultDindResources": {
                                   		"requests": {
                                   			"cpu": "390m",
                                   			"memory": "256Mi"
                                   		},
                                   		"limits": {
                                   			"cpu": "2500m",
                                   			"memory": "4096Mi"
                                   		}
                                   	},
                                   	"envVars": {},
                                   	"volumeMounts": {
                                   		"cf-certs-dind": {
                                   			"name": "cf-certs-dind",
                                   			"mountPath": "/etc/ssl/cf",
                                   			"readOnly": true
                                   		},
                                   		"dind-config": {
                                   			"name": "dind-config",
                                   			"mountPath": "/etc/docker/daemon.json",
                                   			"subPath": "daemon.json",
                                   			"readOnly": true
                                   		}
                                   	},
                                   	"volumes": {
                                   		"cf-certs-dind": {
                                   			"name": "cf-certs-dind",
                                   			"secret": {
                                   				"secretName": "cf-certs-dind"
                                   			}
                                   		},
                                   		"dind-config": {
                                   			"name": "dind-config",
                                   			"configMap": {
                                   				"name": "dind-config"
                                   			}
                                   		}
                                   	},
                                   	"tolerations": {
                                   		"dind": {
                                   			"key": "codefresh/dind",
                                   			"operator": "Exists",
                                   			"effect": "NoSchedule"
                                   		}
                                   	}
          }
      },
      "codefresh": {
        "dockerDaemonScheduler": {
           "type": "DindKubernetesPod",
           "cluster": {
              "name": "cluster-dev-1.cf-cd.com",
              "namespace": "default",
              "kubeconfigFilePath": "/root/.kube/config",
              "nodeSelector": {"codefresh/node-type": "dind",
                  "codefresh/runtime-environment": "codefresh"}
           },
           "dindImage": "codefresh/cf-dind:v5",
           "connectByPodIp": true,
           "defaultDindResources": {
              "requests": {
                 "cpu": "390m",
                 "memory": "256Mi"
              },
              "limits": {
                 "cpu": "2500m",
                 "memory": "2048Mi"
              }
           },
           "volumeMounts": {
              "cf-certs-dind": {
                 "name": "cf-certs-dind",
                 "mountPath": "/etc/ssl/cf",
                 "readOnly": true
              },
              "dind-config": {
                 "name": "dind-config",
                 "mountPath": "/etc/docker/daemon.json",
                 "subPath": "daemon.json",
                 "readOnly": true
              }
           },
           "volumes": {
              "cf-certs-dind": {
                 "name": "cf-certs-dind",
                 "secret": {
                    "secretName": "cf-certs-dind"
                 }
              },
              "dind-config": {
                 "name": "dind-config",
                 "configMap": {
                    "name": "dind-config"
                 }
              }
           }
        }
     },
      "codefresh-inc": {
        "dockerDaemonScheduler": {
           "type": "DindKubernetesPod",
           "cluster": {
              "name": "cluster-dev-1.cf-cd.com",
              "namespace": "default",
              "kubeconfigFilePath": "/root/.kube/config",
              "nodeSelector": {"codefresh/node-type": "dind",
                  "codefresh/runtime-environment": "codefresh"}
           },
           "dindImage": "codefresh/cf-dind:v5",
           "connectByPodIp": true,
           "defaultDindResources": {
              "requests": {
                 "cpu": "390m",
                 "memory": "256Mi"
              },
              "limits": {
                 "cpu": "2500m",
                 "memory": "2048Mi"
              }
           },
           "volumeMounts": {
              "cf-certs-dind": {
                 "name": "cf-certs-dind",
                 "mountPath": "/etc/ssl/cf",
                 "readOnly": true
              },
              "dind-config": {
                 "name": "dind-config",
                 "mountPath": "/etc/docker/daemon.json",
                 "subPath": "daemon.json",
                 "readOnly": true
              }
           },
           "volumes": {
              "cf-certs-dind": {
                 "name": "cf-certs-dind",
                 "secret": {
                    "secretName": "cf-certs-dind"
                 }
              },
              "dind-config": {
                 "name": "dind-config",
                 "configMap": {
                    "name": "dind-config"
                 }
              }
           }
        }
     }
  }

# customize cfapi
cfapi:
  imageTag: staging
  replicaCount: 2
  internalRegistryProtocol: https
  providersData: |
    {
      "aws": {
        "name": "aws",
        "settings": {
          "KeyName": "cf-test-1",
          "route53Zone": "ZVG87U9HV33SS"
        },
        "services": {
          "docker-node-us-east-1": {
            "region": "us-east-1",
            "name": "docker-node",
            "dnsPrefix": "cf-staging-aue1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-e33d40f5",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "c4.large"
            },
           "volumeTypes": {
                  "all": [
                    "standard",
                    "gp2"
                  ],
                  "default": "gp2"
            },
            "securityGroupIds": [
              "sg-ef5ed293", "sg-95fa54e9"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "standard"
                }
              }
            ],
            "subnetId": [
              "subnet-66def54e",
              "subnet-12bddd28"
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-staging"
            }
          }
        }
      },
      "gce": {
          "name": "gce",
          "settings": {
            "keyFilename": "/etc/admin/gce_creds.json",
            "projectId": "savvy-badge-103912"
          },
          "services": {}
      }
    }

  env:
    ON_PREMISE: ""
    APP_ENV: staging
    ADMIN_FEATURES_DELETE_ACCOUNT_DISABLED: ""
    ADMIN_FEATURES_DELETE_USER_WHITELIST: ""
    GOOGLE_KUBE_SERVICE_URI: "http://cf-google-auth"
    PROGRESS_BUILDLOGS_BUCKETNAME: progress-logs-staging

cfui:
  imageTag: staging

payments:
  imageTag: staging
  mongoURI: "mongodb://mongo.default.svc:27017/payments"

cluster-providers:
  imageTag: staging
  replicaCount: 1
  # We won't use Chart's installed mongo instance for staging, instead, we'll use
  # an already deployed mongodb pod.
  mongoURI: "mongodb://mongo.default.svc:27017/cluster-providers"

internal-status-page:
  imageTag: staging

kube-integration:
  imageTag: staging
  replicaCount: 1
  mongoURI: "mongodb://mongo.default.svc:27017/cluster-providers"

accounts-referrals:
  imageTag: staging
  replicaCount: 1
  mongoURI: "mongodb://mongo.default.svc:27017/accounts-referrals"

charts-manager:
  imageTag: staging
  replicaCount: 1
  mongoURI: "mongodb://mongo.default.svc:27017/charts-manager"

mailer:
  imageTag: staging
  replicaCount: 1
  active: ""

segment-reporter:
  imageTag: staging

workflow-baseline-invoker:
  imageTag: staging

salesforce-reporter:
  imageTag: master
  active: ""
  oauthEndpoint: "https://login.salesforce.com/services/oauth2/token"
  host: "https://3513510456354.my.salesforce.com"
  clientId: "3MVG9g9rbsTkKnAWYUH3_kcQ9b4COqHyFdSi_B_TB3BQQKyB9W0ykwe5eghwle2YFnwv3hi3p5lzu5NLmoubx"
  username: "itai@codefresh.io"
  env:
    HTTP_LOGGER_LEVEL: error

nats:
  replicaCount: 3

global:
  appProtocol: https
  postgresDatabase: postgres
#  queueServers: nats://queue.default.svc:4222
  consulHost: consul.default.svc
  rabbitmqHostname: rabbit.default.svc
  postgresHostname: postgres.default.svc
  redisUrl: redis.default.svc
  seedJobs: false
  cfcrDomain: staging.cfcr.io
  agent: io.codefresh.load

tags:
  saas: true
  infra: false
  old-scheduler: false
