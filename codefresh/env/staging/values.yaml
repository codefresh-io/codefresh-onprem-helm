---
# records to /etc/hosts of the containers
# hostsApp: default empty

firebaseUrl: "https://codefresh-staging-75bd2.firebaseio.com/staging"

webTLS:
  secretName: star.codefresh.io
  #key:
  #cert:

postgresql:
  postgresHostname: postgres.default.svc
  #postgresUser:
  #postgresPassword:

redis:
  redisUrl: redis.default.svc
  #redisPassword:

rabbitmq:
  rabbitmqHostname: rabbit.default.svc
  #rabbitmqUsername:
  #rabbitmqPassword:

# use smaller registry storage
registry:
  storageSize: 10Gi

builder:
  replicaCount: 1

# cstomize runtime environments
runtime_envs:
  - name: codefresh-inc
    inCluster: true
    selectorRuntimeEnv: codefresh-inc
    namespace: dinds

# customize cfapi
cfapi:
  replicaCount: 2

  internalRegistryProtocol: https
  providersData: |
    {
      "aws": {
        "name": "aws",
        "settings": {
          "KeyName": "cf-test-1",
          "route53Zone": "ZVG87U9HV33SS"
        },
        "services": {
          "docker-node-us-east-1": {
            "region": "us-east-1",
            "name": "docker-node",
            "dnsPrefix": "cf-staging-aue1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-e33d40f5",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "c4.large"
            },
           "volumeTypes": {
                  "all": [
                    "standard",
                    "gp2"
                  ],
                  "default": "gp2"
            },
            "securityGroupIds": [
              "sg-ef5ed293", "sg-95fa54e9"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "standard"
                }
              }
            ],
            "subnetId": [
              "subnet-66def54e",
              "subnet-12bddd28"
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-staging"
            }
          }
        }
      },
      "gce": {
          "name": "gce",
          "settings": {
            "keyFilename": "/etc/admin/gce_creds.json",
            "projectId": "savvy-badge-103912"
          },
          "services": {}
      }
    }

  env:
    ON_PREMISE: ""
    APP_ENV: staging

cluster-providers:
  replicaCount: 2
  # We won't use Chart's installed mongo instance for staging, instead, we'll use
  # an already deployed mongodb pod.
  mongoURI: "mongodb://mongo.default.svc:27017/cluster-providers"

multiple-clusters:
  replicaCount: 2

kube-integration:
  replicaCount: 2
  mongoURI: "mongodb://mongo.default.svc:27017/cluster-providers"

accounts-referrals:
  replicaCount: 2
  mongoURI: "mongodb://mongo.default.svc:27017/accounts-referrals"

mailer:
  replicaCount: 2

global:
  appProtocol: https
  postgresDatabase: postgres
  queueServers: nats://queue.default.svc:4222
  seedJobs: false

tags:
  saas: true
  infra: false

