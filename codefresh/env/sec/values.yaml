---

tasker-kubernetes:
  imagePullPolicy: IfNotPresent

context-manager:
  replicaCount: 1
  imagePullPolicy: IfNotPresent

pipeline-manager:
  replicaCount: 1
  imagePullPolicy: IfNotPresent

##-sec- firebaseUrl copied from staging/dynamic
firebaseUrl: "https://codefresh-staging-75bd2.firebaseio.com/staging"

hostsApp: |
  50.56.64.16   stash.ironsrc.com

webTLS:
  secretName: star.codefresh.io
  #key:
  #cert:

postgresql:
  postgresHostname: postgres.default.svc
  #postgresUser:
  #postgresPassword:

redis:
  redisUrl: redis.default.svc
  #redisPassword:

rabbitmq:
  rabbitmqHostname: rabbit.default.svc
  #rabbitmqUsername:
  #rabbitmqPassword:

ingress:
  replicaCount: 1
  webTlsSecretName: "star.codefresh.io"
 # disableAccessLog: "true"

getRuntimeEnvs: files/production/runtimeEnvironments.json

# customize cfapi
cfapi:
  formatLogsToElk: false
  postStart: true
  replicaCount: 1
  internalRegistryProtocol: https
  providersData: |
    {
      "azure":{
          "name":"azure",
          "settings":{
             "AppKeyFile":"/etc/admin/azure_creds.json",
             "dnsZoneResourceGroup":"general",
             "dnsZoneName":"az.codefresh.io"
          },
          "services":{
             "docker-node-central-us":{
                "name":"docker-node",
                "dnsPrefix":"cf-sec-azuc-docker-node",
                "location":"centralus",
                "virtualNetworkResourceGroup":"docker-nodes-vnet-1",
                "virtualNetworkName":"docker-nodes-vnet",
                "networkSecurityGroupName":"docker-nodes-dev-nsg",
                "diagnosticsStorageAccountName":"cfdockernodediagvnet1",
                "imageReference":{
                   "publisher":"Canonical",
                   "offer":"UbuntuServer",
                   "sku":"16.04-LTS",
                   "version":"latest"
                },
                "machineTypes":{
                   "all":[
                      "Standard_DS1_v2",
                      "Standard_DS2_v2",
                      "Standard_D2s_v3",
                      "Standard_D4s_v3",
                      "Standard_D8s_v3",
                      "Standard_D16s_v3",
                      "Standard_B1s",
                      "Standard_B1ms",
                      "Standard_B2s",
                      "Standard_B2ms",
                      "Standard_B4ms",
                      "Standard_B8ms"
                   ],
                   "default":"Standard_DS1_v2"
                },
                "volumeTypes":{
                   "all":[
                      "Premium_LRS",
                      "Standard_LRS"
                   ],
                   "default":"Premium_LRS"
                },
                "VolumeSize":256,
                "adminUsername":"ubuntu",
                "adminPublicKey":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCastLfm9R7tVnCssIKMrB21PptPZXyoKB4Px5xKtJwriDsTAyfQouwwsWlv/jIgvlDioXL3Vmz8GtHZRrTnlv60afWvtsVMjDQzd+NoGPX2HlS07aHcOhWZPYJujtUaZHanb9gNTKHReQpHHpX//n6WEbewsfEOG3zrJQyJoQj0XmBJamxwpWLbPiGFdZx6HQ+0147WS9WJGBt2gzKMaPsFx4+9zoGON2FH9odl384EQTwK6PUxeaIEhwtl4ZUJM8MILD4GglQ278y7N1B7yiJbCjwWUeoLdBDCUnA7U/03t55PIEEGy/nCVBWcnu0ZovmaHI4pk5wx+1oufSXyRLZ",
                "metadata":{
                   "kind":"docker-node",
                   "environment":"azure-sec"
                }
             }
          }
       },
      "aws": {
        "name": "aws",
        "settings": {
          "KeyName": "cf-test-1",
          "route53Zone": "ZVG87U9HV33SS"
        },
        "services": {
          "docker-node-us-east-1": {
            "region": "us-east-1",
            "name": "docker-node",
            "dnsPrefix": "cf-sec-aue1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-e33d40f5",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "m4.large"
            },
            "volumeTypes": {
              "all": [
                "standard",
                "gp2"
              ],
              "default": "gp2"
            },
            "securityGroupIds": [
              "sg-ef5ed293", "sg-95fa54e9"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "subnetId": [
              "subnet-66def54e",
              "subnet-12bddd28"
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-sec"
            }
          }
        }
      },
      "gce": {
          "name": "gce",
          "settings": {
            "keyFilename": "/etc/admin/gce_creds.json",
            "projectId": "savvy-badge-103912"
          },
          "services": {}
      }
    }
  env:
    ON_PREMISE: ""
    APP_ENV: sec
    ADMIN_FEATURES_DELETE_ACCOUNT_DISABLED: ""
    ADMIN_FEATURES_DELETE_USER_WHITELIST: ""
    GOOGLE_KUBE_SERVICE_URI: "http://cf-google-auth"
    PROGRESS_BUILDLOGS_BUCKETNAME: progress-logs-staging
    NO_HELM_INSTALL_PIPELINE_REPO_CONTEXT_PATH: "true"
    GCS_CLIENT_EMAIL: "gcs-17@local-codefresh.iam.gserviceaccount.com"

    # EVENT_REPORTING_URL: "https://app.codefresh.io/api/workflow/"

  imagePullPolicy: IfNotPresent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
            - elk
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - sec-cfapi
          topologyKey: kubernetes.io/hostname

cfui:
  replicaCount: 1
  webTLS:
    secretName: star.codefresh.io
  ##-sec- commented slackAppID
  #slackAppID: "4027524866.79900649782"

onboarding-status:
  replicaCount: 1

runtime-environment-manager:
  replicaCount: 1

payments:
  replicaCount: 1
  env:
    HTTP_LOGGER_LEVEL: error

cluster-providers:
  replicaCount: 1

internal-status-page:
  enabled: false

kube-integration:
  replicaCount: 1

accounts-referrals:
  replicaCount: 1

charts-manager:
  replicaCount: 1

##-sec- as on staging
mailer:
  replicaCount: 1
  active: ""

segment-reporter:
#  replicaCount: 2

workflow-baseline-invoker:
  replicaCount: 0
  env:
    API_URL: sec.codefresh.io

salesforce-reporter:
  replicaCount: 0
  active: ""
  oauthEndpoint: "https://login.salesforce.com/services/oauth2/token"
  host: "https://3513510456354.my.salesforce.com"
  clientId: "3MVG9g9rbsTkKnAWYUH3_kcQ9b4COqHyFdSi_B_TB3BQQKyB9W0ykwe5eghwle2YFnwv3hi3p5lzu5NLmoubx"
  username: "itai@codefresh.io"
  env:
    HTTP_LOGGER_LEVEL: error

##-sec- need to create buckets
helm-repo-manager:
  replicaCount: 1
  logLevel: debug
  logJSON: true
  RepoUrlPrefix: "cm://h-sec.cfcr.io"

  chartmuseum:
    image:
      tag: v0.7.0
    env:
      open:
        MAX_STORAGE_OBJECTS: 50
        STORAGE: amazon
        STORAGE_AMAZON_BUCKET: chartmuseum.codefresh.io-sec
        STORAGE_AMAZON_PREFIX:
        STORAGE_AMAZON_REGION: us-east-1
        CACHE: redis
        CACHE_REDIS_ADDR: "sec-store:6379"
        CACHE_REDIS_DB: "1"

hermes:
  logLevel: debug
  logJSON: true
  backup:
    env: sec
    enabled: false
  # nodeSelector:
  #   cloud.google.com/gke-nodepool: main-pool

nomios:
  logLevel: debug
  logJSON: true
  ingress:
    webTlsSecretName: "star.codefresh.io"
  # nodeSelector:
  #   cloud.google.com/gke-nodepool: main-pool

cronus:
  logLevel: debug
  logJSON: true
  backup:
    env: sec
    enabled: false
  # nodeSelector:
  #   cloud.google.com/gke-nodepool: main-pool

nats:
  replicaCount: 1
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
            - elk
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - sec-nats
          topologyKey: kubernetes.io/hostname



global:
  appProtocol: https
  postgresDatabase: eventbus
#  queueServers: nats://queue.default.svc:4222
  consulHost: consul.default.svc
  rabbitmqHostname: rabbit.default.svc
  postgresHostname: postgres.default.svc
  redisUrl: redis.default.svc
  seedJobs: false
  cfcrDomain: staging.cfcr.io
  gceProject: savvy-badge-103912
  agent: io.codefresh.load
#  externalUrl: https://app.codefresh.io

  appServiceAffinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
            - elk

  internalServiceAffinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: cloud.google.com/gke-nodepool
            operator: In
            values:
            - default-pool

  internalServiceTolerations:
  - effect: NoSchedule
    key: nodeType
    operator: Equal
    value: internal

tags:
  saas: true
  infra: false
  old-scheduler: false

# slackAppID production application id for slack integration
#slackAppID: "4027524866.79900649782"
