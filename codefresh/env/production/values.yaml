---

tasker-kubernetes:
  imagePullPolicy: IfNotPresent

context-manager:
  replicaCount: 2
  imagePullPolicy: IfNotPresent

pipeline-manager:
  replicaCount: 2
  imagePullPolicy: IfNotPresent

firebaseUrl: "https://codefresh-production-backup.firebaseio.com/production"

hostsApp: |
  50.56.64.16   stash.ironsrc.com

webTLS:
  secretName: star.codefresh.io
  #key:
  #cert:

postgresql:
  postgresHostname: 35.188.141.216
  #postgresUser:
  #postgresPassword:

redis:
  redisUrl: redis.default.svc
  #redisPassword:

rabbitmq:
  rabbitmqHostname: rabbit.default.svc
  #rabbitmqUsername:
  #rabbitmqPassword:

ingress:
  replicaCount: 4
  webTlsSecretName: "star.codefresh.io"
  disableAccessLog: "true"

getRuntimeEnvs: files/production/runtimeEnvironments.json

# customize cfapi
cfapi:
  postStart: true
  replicaCount: 8
  internalRegistryProtocol: https
  providersData: |
    {
      "azure":{
          "name":"azure",
          "settings":{
             "AppKeyFile":"/etc/admin/azure_creds.json",
             "dnsZoneResourceGroup":"general",
             "dnsZoneName":"az.codefresh.io"
          },
          "services":{
             "docker-node-central-us":{
                "name":"docker-node",
                "dnsPrefix":"cf-azuc-docker-node",
                "location":"centralus",
                "virtualNetworkResourceGroup":"docker-nodes-vnet-1",
                "virtualNetworkName":"docker-nodes-vnet",
                "networkSecurityGroupName":"docker-nodes-nsg",
                "diagnosticsStorageAccountName":"cfdockernodediagvnet1",
                "imageReference":{
                   "publisher":"Canonical",
                   "offer":"UbuntuServer",
                   "sku":"16.04-LTS",
                   "version":"latest"
                },
                "machineTypes":{
                   "all":[
                      "Standard_DS1_v2",
                      "Standard_DS2_v2",
                      "Standard_D2s_v3",
                      "Standard_D4s_v3",
                      "Standard_D8s_v3",
                      "Standard_D16s_v3",
                      "Standard_B1s",
                      "Standard_B1ms",
                      "Standard_B2s",
                      "Standard_B2ms",
                      "Standard_B4ms",
                      "Standard_B8ms"
                   ],
                   "default":"Standard_D2s_v3"
                },
                "volumeTypes":{
                   "all":[
                      "Premium_LRS"
                   ],
                   "default":"Premium_LRS"
                },
                "VolumeSize":256,
                "adminUsername":"ubuntu",
                "adminPublicKey":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCoiYIBs94+0+So+nN1Y5kR1RpHDTOmf+MWAZg2DiKn51D3xT8wV3gzgNUcfvtx01xo05Gle27mOuBeKeGA/x/AS5ciqCvqSHDoTXlW0hBDFhdj6xrxDNa7FwX3OtV75vCsHoHpnW9U+mcrH6A/KiMMm+LJfRLqREL3brntAVFC+MwJXIkUkT7/F0r1z8UWfMKRAOswWNd0BwGV5MxhaxKYMgYi2zSgwzT4XwzZ5iWF7M3jtmxZSIbW2zNIjp+AW0f/zuUmp9l7I3kNlco/h5lD+dkHjjZT0NPNtuoB1qEi9tG5Q45hC1K0b32a1x/yRRdjXVVuL2h3WujL+k29vUId",
                "metadata":{
                   "kind":"docker-node",
                   "environment":"azure-production"
                }
             }
          }
       },
      "aws": {
        "name": "aws",
        "settings": {
          "KeyName": "cf-prod-1",
          "route53Zone": "ZVG87U9HV33SS"
        },
        "services": {
          "docker-node-us-east-1": {
            "region": "us-east-1",
            "name": "docker-node",
            "dnsPrefix": "cf-aue1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-e33d40f5",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "m4.large"
            },
            "volumeTypes": {
              "all": [
                "standard",
                "gp2"
              ],
              "default": "gp2"
            },
            "securityGroupIds": [
              "sg-ef5ed293", "sg-075bd77b"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "subnetId": [
              "subnet-af5bb5d8",
              "subnet-d1363d97"
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-production"
            }
          },
          "docker-node-eu-central-1": {
            "region": "eu-central-1",
            "name": "docker-node",
            "dnsPrefix": "cf-aec1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-b6fd24d9",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "m4.large"
            },
            "volumeTypes": {
                  "all": [
                    "standard",
                    "gp2"
                  ],
                  "default": "gp2"
            },
            "securityGroupIds": [
              "sg-9e3a22f6", "sg-003c2468"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws_production"
            }
          }
        }
      },
      "gce": {
          "name": "gce",
          "settings": {
            "keyFilename": "/etc/admin/gce_creds.json",
            "projectId": "codefresh-production"
          },
          "services": {}
      }
    }
  env:
    ON_PREMISE: ""
    APP_ENV: production
    ADMIN_FEATURES_DELETE_ACCOUNT_DISABLED: "true"
    ADMIN_FEATURES_DELETE_USER_WHITELIST: "superfresh,superfresh_github,Superfresh"
    GOOGLE_KUBE_SERVICE_URI: "http://cf-google-auth"
    PROGRESS_BUILDLOGS_BUCKETNAME: progress-logs-production
    NO_HELM_INSTALL_PIPELINE_REPO_CONTEXT_PATH: "true"

    # EVENT_REPORTING_URL: "https://app.codefresh.io/api/workflow/"

  imagePullPolicy: IfNotPresent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
            - elk
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - production-cfapi
          topologyKey: kubernetes.io/hostname

cfui:
  replicaCount: 4
  webTLS:
    secretName: star.codefresh.io
  slackAppID: "4027524866.79900649782"

onboarding-status:
  replicaCount: 2

payments:
  replicaCount: 2
  env:
    HTTP_LOGGER_LEVEL: error

cluster-providers:
  replicaCount: 2

internal-status-page:
  enabled: false

kube-integration:
  replicaCount: 2

accounts-referrals:
  replicaCount: 2

charts-manager:
  replicaCount: 2

mailer:
  replicaCount: 2
  active: "true"

segment-reporter:
  replicaCount: 2

workflow-baseline-invoker:
  replicaCount: 0
  env:
    API_URL: g.codefresh.io

salesforce-reporter:
  replicaCount: 1
  active: "true"
  oauthEndpoint: "https://login.salesforce.com/services/oauth2/token"
  host: "https://3513510456354.my.salesforce.com"
  clientId: "3MVG9g9rbsTkKnAWYUH3_kcQ9b4COqHyFdSi_B_TB3BQQKyB9W0ykwe5eghwle2YFnwv3hi3p5lzu5NLmoubx"
  username: "itai@codefresh.io"
  env:
    HTTP_LOGGER_LEVEL: error

helm-repo-manager:
  logLevel: debug
  logJSON: true
  RepoUrlPrefix: "cm://h.cfcr.io"

  chartmuseum:
    image:
      tag: v0.7.0
    env:
      open:
        MAX_STORAGE_OBJECTS: 50
        STORAGE: amazon
        STORAGE_AMAZON_BUCKET: chartmuseum.codefresh.io
        STORAGE_AMAZON_PREFIX:
        STORAGE_AMAZON_REGION: us-east-1
        CACHE: redis
        CACHE_REDIS_ADDR: "production-store:6379"
        CACHE_REDIS_DB: "1"

hermes:
  logLevel: debug
  logJSON: true
  backup:
    env: production
    enabled: true

nomios:
  logLevel: debug
  logJSON: true

cronus:
  logLevel: debug
  logJSON: true
  backup:
    env: production
    enabled: true

nats:
  replicaCount: 3
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
            - elk
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - production-nats
          topologyKey: kubernetes.io/hostname



global:
  appProtocol: https
  postgresDatabase: eventbus
#  queueServers: nats://queue.default.svc:4222
  consulHost: consul.default.svc
  rabbitmqHostname: rabbit.default.svc
  postgresHostname: 35.188.141.216
  redisUrl: redis.default.svc
  seedJobs: false
  cfcrDomain: r.cfcr.io
  gceProject: codefresh-production
  agent: io.codefresh.production
#  externalUrl: https://app.codefresh.io

  appServiceAffinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
            - elk

  internalServiceAffinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: In
            values:
            - internal

  internalServiceTolerations:
  - effect: NoSchedule
    key: nodeType
    operator: Equal
    value: internal

tags:
  saas: true
  infra: false
  old-scheduler: false

# slackAppID production application id for slack integration
slackAppID: "4027524866.79900649782"
