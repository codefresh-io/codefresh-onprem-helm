---

background-job-manager:
  imagePullPolicy: IfNotPresent

context-manager:
  imagePullPolicy: IfNotPresent

firebaseUrl: "https://codefresh-production-backup.firebaseio.com/production"

hostsApp: |
  50.56.64.16   stash.ironsrc.com

webTLS:
  secretName: star.codefresh.io
  #key:
  #cert:

postgresql:
  postgresHostname: 35.188.141.216
  #postgresUser:
  #postgresPassword:

redis:
  redisUrl: redis.default.svc
  #redisPassword:

rabbitmq:
  rabbitmqHostname: rabbit.default.svc
  #rabbitmqUsername:
  #rabbitmqPassword:

ingress:
  replicaCount: 4
  webTlsSecretName: "star.codefresh.io"
  disableAccessLog: "true"

runtimeEnvBlob: |
  {
    "default": {
      "environmentCertPath": "/etc/ssl/cf/",
      "dockerDaemonScheduler": {
        "type": "ConsulNodes",
        "cluster": {
          "name": "",
          "type": "builder",
          "returnRunnerIfNoBuilder": true
        },
        "clientCertPath": "/etc/ssl/cf/"
      },
      "runtimeScheduler": {
        "type": "KubernetesPod",
        "cluster": {
          "name": "cluster-cf-1.cf-cd.com",
          "namespace": "workflow",
          "kubeconfigFilePath": "/root/.kube/config",
          "nodeSelector": {
            "codefresh/node-type": "app"
          }
        },
        "image": "codefresh/engine:v17",
        "resources": {
          "requests": {
            "cpu": "60m",
            "memory": "100Mi"
          },
          "limits": {
            "cpu": "1000m",
            "memory": "2048Mi"
          }
        },
        "envVars": {
          "RESOURCE_LIMITATIONS_JSON": "/etc/admin/resource-limitations.json",
          "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
          "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
          "LOGGER_LEVEL": "debug",
          "NODE_ENV": "kubernetes",
          "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
          "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
          "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
          "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
          "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v3"
        },
        "volumeMounts": {
          "internal-registry": {
            "name": "internal-registry",
            "mountPath": "/etc/admin/internal-registry.json",
            "subPath": "internal-registry.json",
            "readOnly": true
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "mountPath": "/etc/admin/additional-internal-registries.json",
            "subPath": "additional-internal-registries.json",
            "readOnly": true
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "mountPath": "/etc/admin/resource-limitations.json",
            "subPath": "resource-limitations.json",
            "readOnly": true
          }
        },
        "volumes": {
          "internal-registry": {
            "name": "internal-registry",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "configMap": {
              "name": "resource-limitations"
            }
          }
        }
      }
    },
    "defaultUserProvidedCluster": {
      "runtimeScheduler": {
        "type": "KubernetesPod",
        "cluster": {
          "namespace": "default"
        },
        "image": "codefresh/engine:v17",
        "resources": {
          "requests": {
            "cpu": "100m",
            "memory": "100Mi"
          },
          "limits": {
            "cpu": "1000m",
            "memory": "2048Mi"
          }
        },
        "envVars": {
          "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
          "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
          "LOGGER_LEVEL": "debug",
          "NODE_ENV": "kubernetes",
          "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
          "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
          "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
          "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
          "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v3"
        },
        "volumeMounts": {
          "internal-registry": {
            "name": "internal-registry",
            "mountPath": "/etc/admin/internal-registry.json",
            "subPath": "internal-registry.json",
            "readOnly": true
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "mountPath": "/etc/admin/additional-internal-registries.json",
            "subPath": "additional-internal-registries.json",
            "readOnly": true
          }
        },
        "volumes": {
          "internal-registry": {
            "name": "internal-registry",
            "secret": {
              "secretName": "codefresh-internal-registry"
            }
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "secret": {
              "secretName": "codefresh-internal-registry"
            }
          }
        }
      },
      "dockerDaemonScheduler": {
        "type": "DindKubernetesPod",
        "cluster": {
          "namespace": "default"
        },
        "dindImage": "codefresh/cf-dind:v6",
        "connectByPodIp": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "390m",
            "memory": "256Mi"
          },
          "limits": {
            "cpu": "2500m",
            "memory": "4096Mi"
          }
        },
        "envVars": {},
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": true
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "codefresh-certs-server"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "codefresh-dind-config"
            }
          }
        },
        "tolerations": {
          "dind": {
            "key": "codefresh/dind",
            "operator": "Exists",
            "effect": "NoSchedule"
          }
        }
      }
    },
    "codefresh": {
      "dockerDaemonScheduler": {
        "type": "DindKubernetesPod",
        "cluster": {
          "name": "cluster-cf-1.cf-cd.com",
          "namespace": "workflow",
          "kubeconfigFilePath": "/root/.kube/config",
          "nodeSelector": {
            "codefresh/node-type": "dind",
            "codefresh/runtime-environment": "codefresh"
          }
        },
        "clientCertPath": "/etc/ssl/cf/",
        "dindImage": "codefresh/cf-dind:v6",
        "connectByPodIp": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "390m",
            "memory": "512Mi"
          },
          "limits": {
            "cpu": "2500m",
            "memory": "3072Mi"
          }
        },
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": true
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "cf-certs-dind"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "dind-config"
            }
          }
        }
      }
    },
    "codefresh-inc": {
      "dockerDaemonScheduler": {
        "type": "DindKubernetesPod",
        "cluster": {
          "name": "cluster-cf-1.cf-cd.com",
          "namespace": "workflow",
          "kubeconfigFilePath": "/root/.kube/config",
          "nodeSelector": {
            "codefresh/node-type": "dind",
            "codefresh/runtime-environment": "codefresh-inc"
          }
        },
        "clientCertPath": "/etc/ssl/cf/",
        "dindImage": "codefresh/cf-dind:v6",
        "connectByPodIp": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "390m",
            "memory": "256Mi"
          },
          "limits": {
            "cpu": "2500m",
            "memory": "4096Mi"
          }
        },
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": true
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "cf-certs-dind"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "dind-config"
            }
          }
        }
      }
    },
    "secful": {
      "dockerDaemonScheduler": {
        "type": "DindKubernetesPod",
        "cluster": {
          "name": "cluster-cf-1.cf-cd.com",
          "namespace": "workflow",
          "kubeconfigFilePath": "/root/.kube/config",
          "nodeSelector": {
            "codefresh/node-type": "dind",
            "codefresh/runtime-environment": "codefresh"
          }
        },
        "clientCertPath": "/etc/ssl/cf/",
        "dindImage": "codefresh/cf-dind:v6",
        "connectByPodIp": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "390m",
            "memory": "512Mi"
          },
          "limits": {
            "cpu": "2500m",
            "memory": "4096Mi"
          }
        },
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": true
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "cf-certs-dind"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "dind-config"
            }
          }
        }
      }
    },
    "sctechdevservice": {
      "runtimeScheduler": {
        "type": "KubernetesPod",
        "cluster": {
          "namespace": "default",
          "inCluster": true,
          "nodeSelector": {
            "nodeType": "worker",
            "codefresh/node-type": "app"
          }
        },
        "image": "codefresh/engine:v17",
        "resources": {
          "requests": {
            "cpu": "100m",
            "memory": "100Mi"
          },
          "limits": {
            "cpu": "500m",
            "memory": "1024Mi"
          }
        },
        "envVars": {
          "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
          "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
          "LOGGER_LEVEL": "debug",
          "NODE_ENV": "kubernetes",
          "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
          "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
          "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
          "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
          "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v3"
        },
        "volumeMounts": {
          "internal-registry": {
            "name": "internal-registry",
            "mountPath": "/etc/admin/internal-registry.json",
            "subPath": "internal-registry.json",
            "readOnly": true
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "mountPath": "/etc/admin/additional-internal-registries.json",
            "subPath": "additional-internal-registries.json",
            "readOnly": true
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "mountPath": "/etc/admin/resource-limitations.json",
            "subPath": "resource-limitations.json",
            "readOnly": true
          }
        },
        "volumes": {
          "internal-registry": {
            "name": "internal-registry",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "configMap": {
              "name": "resource-limitations"
            }
          }
        }
      }
    },
    "ironsource": {
      "runtimeScheduler": {
        "type": "KubernetesPod",
        "cluster": {
          "namespace": "default",
          "inCluster": true,
          "nodeSelector": {
            "nodeType": "worker",
            "codefresh/node-type": "app"
          }
        },
        "image": "codefresh/engine:v17",
        "resources": {
          "requests": {
            "cpu": "100m",
            "memory": "100Mi"
          },
          "limits": {
            "cpu": "500m",
            "memory": "1024Mi"
          }
        },
        "envVars": {
          "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
          "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
          "LOGGER_LEVEL": "debug",
          "NODE_ENV": "kubernetes",
          "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
          "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
          "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
          "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
          "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v3"
        },
        "volumeMounts": {
          "internal-registry": {
            "name": "internal-registry",
            "mountPath": "/etc/admin/internal-registry.json",
            "subPath": "internal-registry.json",
            "readOnly": true
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "mountPath": "/etc/admin/additional-internal-registries.json",
            "subPath": "additional-internal-registries.json",
            "readOnly": true
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "mountPath": "/etc/admin/resource-limitations.json",
            "subPath": "resource-limitations.json",
            "readOnly": true
          }
        },
        "volumes": {
          "internal-registry": {
            "name": "internal-registry",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "configMap": {
              "name": "resource-limitations"
            }
          }
        }
      }
    },
    "giphy": {
      "dockerDaemonScheduler": {
        "type": "DindKubernetesPod",
        "cluster": {
          "clusterProvider": {
            "selector": "k8s-qa1",
            "accountId": "59a0f26e6a0ccc000197173a"
          },
          "namespace": "default",
          "nodeSelector": {
            "codefresh/node-type": "worker"
          }
        },
        "clientCertPath": "/etc/ssl/cf/giphy-",
        "dindImage": "codefresh/cf-dind:v6",
        "connectByPodIp": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "500m",
            "memory": "1024Mi"
          }
        },
        "tolerations": {
           "codefreshWorker": {
              "key": "codefresh",
              "value": "worker",
              "operator": "Equal",
              "effect": "NoSchedule"
           },
           "imaging": {
              "key": "imaging",
              "operator": "Exists",
              "effect": "NoSchedule"
           }
        },
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": true
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "cf-certs-dind"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "dind-config"
            }
          }
        }
      },
      "runtimeScheduler": {
        "type": "KubernetesPod",
        "cluster": {
          "clusterProvider": {
            "selector": "k8s-qa1",
            "accountId": "59a0f26e6a0ccc000197173a"
          },
          "namespace": "default",
          "nodeSelector": {
            "codefresh/node-type": "worker"
          }
        },
        "image": "codefresh/engine:v17",
        "resources": {
          "requests": {
            "cpu": "100m",
            "memory": "100Mi"
          },
          "limits": {
            "cpu": "1000m",
            "memory": "2048Mi"
          }
        },
        "envVars": {
          "RUNTIME_INTERNAL_REGISTRY_JSON": "/etc/admin/internal-registry.json",
          "RUNTIME_ADDITIONAL_INTERNAL_REGISTRIES_JSON": "/etc/admin/additional-internal-registries.json",
          "LOGGER_LEVEL": "debug",
          "NODE_ENV": "kubernetes",
          "DOCKER_PUSHER_IMAGE": "codefresh/cf-docker-pusher:v2",
          "DOCKER_PULLER_IMAGE": "codefresh/cf-docker-puller:v2",
          "DOCKER_BUILDER_IMAGE": "codefresh/cf-docker-builder:v10",
          "CONTAINER_LOGGER_IMAGE": "codefresh/cf-container-logger:0.0.18",
          "GIT_CLONE_IMAGE": "codefresh/cf-git-cloner:v3"
        },
        "tolerations": {
           "codefreshWorker": {
              "key": "codefresh",
              "value": "worker",
              "operator": "Equal",
              "effect": "NoSchedule"
           },
           "imaging": {
              "key": "imaging",
              "operator": "Exists",
              "effect": "NoSchedule"
           }
        },
        "volumeMounts": {
          "internal-registry": {
            "name": "internal-registry",
            "mountPath": "/etc/admin/internal-registry.json",
            "subPath": "internal-registry.json",
            "readOnly": true
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "mountPath": "/etc/admin/additional-internal-registries.json",
            "subPath": "additional-internal-registries.json",
            "readOnly": true
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "mountPath": "/etc/admin/resource-limitations.json",
            "subPath": "resource-limitations.json",
            "readOnly": true
          }
        },
        "volumes": {
          "internal-registry": {
            "name": "internal-registry",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "additional-internal-registries": {
            "name": "additional-internal-registries",
            "secret": {
              "secretName": "internal-registry"
            }
          },
          "resource-limitations": {
            "name": "resource-limitations",
            "configMap": {
              "name": "resource-limitations"
            }
          }
        }
      }
    },
    "dind-ebs-pro": {
      "dockerDaemonScheduler": {
        "type": "DindPodPvc",
        "cluster": {
          "name": "cluster-cf-1.cf-cd.com",
          "namespace": "workflow",
          "kubeconfigFilePath": "/root/.kube/config",
          "nodeSelector": {
            "codefresh/node-type": "dind"
          }
        },
        "storageClassName": "dind-ebs-provisioner",
        "volumeSize": "200Gi",
        "reuseVolumeSelector": "app_env,runtime_env,account_name,repo_name",
        "clientCertPath": "/etc/ssl/cf/",
        "dindImage": "codefresh/dind:17.06-v4",
        "notCheckServerCa": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "390m",
            "memory": "256Mi"
          },
          "limits": {
            "cpu": "2500m",
            "memory": "4096Mi"
          }
        },
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": false
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "cf-certs-dind"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "dind-config"
            }
          }
        }
      }
    },
    "dind-local-pro": {
      "dockerDaemonScheduler": {
        "type": "DindPodPvc",
        "cluster": {
          "name": "cluster-cf-1.cf-cd.com",
          "namespace": "workflow",
          "kubeconfigFilePath": "/root/.kube/config",
          "nodeSelector": {
            "codefresh/node-type": "dind"
          }
        },
        "storageClassName": "dind-local-provisioner",
        "volumeSize": "15Gi",
        "reuseVolumeSelector": "app_env,runtime_env",
        "clientCertPath": "/etc/ssl/cf/",
        "dindImage": "codefresh/dind:17.06-v4",
        "notCheckServerCa": true,
        "defaultDindResources": {
          "requests": {
            "cpu": "390m",
            "memory": "256Mi"
          },
          "limits": {
            "cpu": "2500m",
            "memory": "4096Mi"
          }
        },
        "volumeMounts": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "mountPath": "/etc/ssl/cf",
            "readOnly": false
          },
          "dind-config": {
            "name": "dind-config",
            "mountPath": "/etc/docker/daemon.json",
            "subPath": "daemon.json",
            "readOnly": true
          }
        },
        "volumes": {
          "cf-certs-dind": {
            "name": "cf-certs-dind",
            "secret": {
              "secretName": "cf-certs-dind"
            }
          },
          "dind-config": {
            "name": "dind-config",
            "configMap": {
              "name": "dind-config"
            }
          }
        }
      }
    }
  }



# customize cfapi
cfapi:
  replicaCount: 8
  internalRegistryProtocol: https
  providersData: |
    {
      "aws": {
        "name": "aws",
        "settings": {
          "KeyName": "cf-prod-1",
          "route53Zone": "ZVG87U9HV33SS"
        },
        "services": {
          "docker-node-us-east-1": {
            "region": "us-east-1",
            "name": "docker-node",
            "dnsPrefix": "cf-aue1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-e33d40f5",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "m4.large"
            },
            "volumeTypes": {
              "all": [
                "standard",
                "gp2"
              ],
              "default": "gp2"
            },
            "securityGroupIds": [
              "sg-ef5ed293", "sg-075bd77b"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "subnetId": [
              "subnet-af5bb5d8",
              "subnet-d1363d97"
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-production"
            }
          },
          "docker-node-eu-central-1": {
            "region": "eu-central-1",
            "name": "docker-node",
            "dnsPrefix": "cf-aec1-docker-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-b6fd24d9",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "m4.large"
            },
            "volumeTypes": {
                  "all": [
                    "standard",
                    "gp2"
                  ],
                  "default": "gp2"
            },
            "securityGroupIds": [
              "sg-9e3a22f6", "sg-003c2468"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws_production"
            }
          },
          "docker-node-jfrog-eu-central-1a": {
            "region": "eu-central-1",
            "name": "docker-node",
            "dnsPrefix": "jfrog-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-071eca68",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "c4.large"
            },
            "volumeTypes": {
              "all": [
                "standard",
                "gp2"
              ],
              "default": "gp2"
            },
            "securityGroupIds": [
              "sg-c33b23ab", "sg-0731296f"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "KeyName": "cf-customers-1",
            "subnetId": "subnet-66e7280e",
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-production"
            }
          },
          "docker-node-jfrog-eu-central-1b": {
            "region": "eu-central-1",
            "name": "docker-node",
            "dnsPrefix": "jfrog-node",
            "dnsDomain": "cf-cd.com.",
            "iface": "public",
            "imageName": "ami-071eca68",
            "machineTypes": {
              "all": [
                "c4.large",
                "c4.xlarge",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium"
              ],
              "default": "c4.large"
            },
            "volumeTypes": {
              "all": [
                "standard",
                "gp2"
              ],
              "default": "gp2"
            },
            "securityGroupIds": [
              "sg-c33b23ab", "sg-0731296f"
            ],
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": 200,
                  "VolumeType": "gp2"
                }
              }
            ],
            "KeyName": "cf-customers-1",
            "subnetId": "subnet-53839f28",
            "metadata": {
              "autoscale": "docker-node",
              "environment": "aws-production"
            }
          }
        }
      },
      "gce": {
          "name": "gce",
          "settings": {
            "keyFilename": "/etc/admin/gce_creds.json",
            "projectId": "codefresh-production"
          },
          "services": {}
      }
    }
  env:
    ON_PREMISE: ""
    APP_ENV: production
    ADMIN_FEATURES_DELETE_ACCOUNT_DISABLED: "true"
    ADMIN_FEATURES_DELETE_USER_WHITELIST: "superfresh,superfresh_github,Superfresh"
    GOOGLE_KUBE_SERVICE_URI: "http://cf-google-auth"
    PROGRESS_BUILDLOGS_BUCKETNAME: progress-logs-production
    LOGGER_LEVEL: error
    # EVENT_REPORTING_URL: "https://app.codefresh.io/api/workflow/"

  imagePullPolicy: IfNotPresent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - production-cfapi
          topologyKey: kubernetes.io/hostname

cfui:
  replicaCount: 4

payments:
  replicaCount: 2
  env:
    HTTP_LOGGER_LEVEL: error

cluster-providers:
  replicaCount: 2

internal-status-page:
  enabled: false

kube-integration:
  replicaCount: 2

accounts-referrals:
  replicaCount: 2

charts-manager:
  replicaCount: 2

mailer:
  replicaCount: 2
  active: "true"

segment-reporter:
  replicaCount: 2

workflow-baseline-invoker:
  env:
    API_URL: g.codefresh.io

dind-provider:
  replicaCount: 0

salesforce-reporter:
  replicaCount: 1
  active: "true"
  oauthEndpoint: "https://login.salesforce.com/services/oauth2/token"
  host: "https://3513510456354.my.salesforce.com"
  clientId: "3MVG9g9rbsTkKnAWYUH3_kcQ9b4COqHyFdSi_B_TB3BQQKyB9W0ykwe5eghwle2YFnwv3hi3p5lzu5NLmoubx"
  username: "itai@codefresh.io"
  env:
    HTTP_LOGGER_LEVEL: error

nats:
  replicaCount: 3

global:
  appProtocol: https
  postgresDatabase: eventbus
#  queueServers: nats://queue.default.svc:4222
  consulHost: consul.default.svc
  rabbitmqHostname: rabbit.default.svc
  postgresHostname: 35.188.141.216
  redisUrl: redis.default.svc
  seedJobs: false
  cfcrDomain: r.cfcr.io
  gceProject: codefresh-production
  agent: io.codefresh.production
#  externalUrl: https://app.codefresh.io

  appServiceAffinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: NotIn
            values:
            - internal
            - worker

  internalServiceAffinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodeType
            operator: In
            values:
            - internal

tags:
  saas: true
  infra: false
  old-scheduler: false
