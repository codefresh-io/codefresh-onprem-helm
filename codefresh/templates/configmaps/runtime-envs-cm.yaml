{{- $queueServer := printf "nats://%s-%s.%s.svc:%v" .Release.Name .Values.global.natsService .Release.Namespace .Values.global.natsPort }}
{{- $dindImage := printf "%s" .Values.global.dindImage }}
{{- $dindCPULimits := printf "%s" .Values.global.dindCPULimits }}
{{- $dindMemoryLimits := printf "%s" .Values.global.dindMemoryLimits }}
{{- $dindCPU := printf "%s" .Values.global.dindCPU }}
{{- $dindMemory := printf "%s" .Values.global.dindMemory }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: runtime-environments
  name: {{ template "fullname" . }}-runtime-envs
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service  | quote }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "2"
data:
  runtimeEnvironments.json: |
    {
        {{- range $i, $env := .Values.runtime_envs }}{{if $i}},{{end}}
        "{{ $env.name }}": {
            "cluster": {
                "type": "{{ default "Kubernetes" $env.type }}",
                "name": "{{ default "" $env.clusterName }}",
                "inCluster": {{ default false $env.inCluster }},
                "namespace": "{{ default "default" $env.namespace }}",
                "nodeSelector": {"codefresh/node-type": "dind",
                    "codefresh/runtime-environment": "{{ $env.selectorRuntimeEnv }}"}
            },
            "dindImage": "{{ default $dindImage $env.dindImage }}",
            "command": "{{ default "dockerd" $env.command }}",
            "defaultDindResources": {
                "limits": {
                    "cpu": "{{ default $dindCPULimits $env.dindCPULimits}}",
                    "memory": "{{ default $dindMemoryLimits $env.dindMemoryLimits }}"
                },
                "requests": {
                    "cpu": "{{ default $dindCPU $env.dindCPU }}",
                    "memory": "{{ default $dindMemory $env.dindMemory }}"
                }
            },
            "queue": {
                "workers": {{ default 50 $env.queueWorkers }},
                "servers": ["{{ default $queueServer $env.queueServer }}"],
                "tls": {
                    {{- range $key, $value := $env.tls }}
                    "{{ $key }}": "{{ $value }}"{{if (ne $key "key")}},{{end}}
                    {{- end }}
                }
            }
        }{{- end }}
    }
