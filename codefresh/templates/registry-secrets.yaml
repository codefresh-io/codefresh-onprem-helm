apiVersion: v1
kind: Secret
metadata:
    name: '{{ .Release.Name }}-registry-key'
    # This declares the resource to be a hook. By convention, we also name the
    # file "pre-install-XXX.yaml", but Helm itself doesn't care about file names.
    annotations:
        helm.sh/hook: pre-install
type: kubernetes.io/dockercfg
data:
    .dockercfg: eyJodHRwczovL2djci5pbyI6eyJ1c2VybmFtZSI6Il9qc29uX2tleSIsInBhc3N3b3JkIjoie1xuICBcInR5cGVcIjogXCJzZXJ2aWNlX2FjY291bnRcIixcbiAgXCJwcm9qZWN0X2lkXCI6IFwiY29kZWZyZXNoLWVudGVycHJpc2VcIixcbiAgXCJwcml2YXRlX2tleV9pZFwiOiBcIjhjNDM1YWNmYTE3YTNmYTJjYTdkM2ViN2EzZjc3Nzk0YWRiY2MxOGRcIixcbiAgXCJwcml2YXRlX2tleVwiOiBcIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRFh6eUZiRGxTLzBVRHlcXG5nYzR6SFNEVGlpU2hqT1puRi93Y1pBTW54NU42U05Pa25IZFBZblA3YUU5cHMyWHhrTjE1SzAyOUZLdWkxeEo2XFxuUHlnTUhyV2Vya2JsR2FYTzA3UHhmcEdLUDl5SnRUakxySUIzSWpjMnZ1dDJJSW1wL0pjMGxPTWR3UVRKUXNYS1xcbmJLbG1wY0lDTXVGYmJSWUNmZHBhb011YkZYYkd6bDVYaER0d2JTYjg4dTNXeEI3YXZQdmNva2FxSUpiYXpjdTFcXG5ESXI1dkdCeDJiRm9EdlRIMy9nZHVORHB5QkdvRGsyS2FOYVZHY3I4TXJKdWFWQmZUM1pGcDF5eitvSGEybkF1XFxueXZNOUg0Tzg5bGRvd09IOXd5bHFWVVF1WFRkZGlLRFZjMGhPU1JtZ0d0L29FV052WnFodjJ4eWQraXRlc3d2NVxcbkN4ay9nOGFWQWdNQkFBRUNnZ0VCQUozYWV4cUFmQXNtZzJ3ZStIVzR5NmNQOThWWEs3eWk5WnpLcHVnMCtqSExcXG5EVXZ0eXZOOUh6cjR6SVdUWEhENnRwVUgwTUFLVzVVcjNlOGZQU3JJVjY2dTZWcHdqVENnOTVFZ05GSzhiWk1vXFxueEZkdVlUVkRDTUg1bW45NFExbmNVYmw3WWprRVUzem5ZNGV5UGFMQWdnMWJyQzFVdUhHd0hzU0Zzd2hJQmU1WlxcbjhoZTA5QXF5a3BQVnZFTFMzUGYwS08zSGEzbDBNSUNYODJmSEFWRnFwUG8xL09oSy9nWWd2VUVGN2NuS1lDalNcXG51K2wyeFYwRzBhQldPb3lrK3NpVGxES2l6dDMraS9qdUtGbGtRaGljeTcwQ2xsTlRqdGYvU0tPSjlIbG4rN25ZXFxuS1g0TmRXTG9uS29EWVFVdTBYeUpiU1paRlBDQTd1SWxMcHQ4ZVV5TjZrRUNnWUVBL2NyYW9ZWVZuYjJGWWlFSlxcbkROTGQ1YjY0Mzl2ZVVjQ2hqcmk0bk00VmNvZUdEc2RaUHAySUV1MGRmTUdlbVMyNjZiWFUwTkM4RnlqWWdXbEhcXG5ubTl1cU0zdWl4MHlDZWlzSVpQdnFPQmY5eWpRK095QWNlaFE1OWg0V25iSi9QZGVaUjVmbmt6VWFHK2M3eHBnXFxuYW5vTS9MbFppSDZzOHJqckIvUzFPaTJQTU1VQ2dZRUEyYSt4NVdpSlNtYURJQ1JIejVrTnBPV0ZiSFk0UXlvelxcbnZHOHpweDdQQ2Q5d0cvMnJjTDdpNENwMjRjU3JxR0tPYzBId2Z5K29hbXFhTGhsOGRtdll6eStrc0RKblh1QTdcXG5OcElIOXhYdmxXbWo5R3ZZeCtjYUpkUGdpSnlaUFpxdFdsZEN1ZWJrbWU4cHp3YzFLSTRTNkZVVXdHYTVYSFJEXFxuNnhXcmRQTzQrNUVDZ1lFQTJyY2FLWDlqVzVoN3ZiQ1ltd3VTbmE3NnBqbFdZLy90ZXhEb1VJSXQ2NUN0MEVpdVxcbk9ZOExPTHhONERrQVZDUWI0OU9HL3hvVUxxVk55R0VSanBHYnZUQVR0cUhIZ05DYW55bGRyWjBJTnZsZTlsYmlcXG43c2QyQ2dmODJJRnMyMnZYVnErUldkditaYTVpZ1pDcXJMaFlQdWdCSitkN1pvWkVUb3Z1THFBYXViMENnWUJWXFxuc1lOZllzcUEvbC9xSEQ0a3JBU2lBRFNJNFBUL0E3TUFIK3AraEhOT1dLWWlicmE1bUh0cGNXNEJMRkhDNUtGZFxcbkgvMFRwR2d4RkN3RHI4YStPM0JMQjE5V2VWRVdHVUZXRnlDSmxSb09nRnFwa25ieElybTVZSElJZFZVaDJpMFpcXG4zallIUnF5QktKUVZ5cW1UZ0hKVEFZTTh4bk43d00wbjB3eis2aDdNOFFLQmdEa2lhQUxSdFVHdWV1b2o3ZCtJXFxuRmJGYSt6T0FYQzd3Z243bVdMd0o4emdFS2t0bjE1aVJFWFhCNDhNSm5UeE15U1RtUHZXazRCR09kOHlCbUpXYVxcbmZiUXJCa3VWaGJtSzhRMkJ0Rkp6eElJdEEyNCtuVW1BcXpDSDNPdFFaMmN2NHNOd1gwamxmMTFNZmE4RHdlR21cXG5jQzJVbXp0MjZhbHdIMjlUdVp3dmpTaStcXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXFxuXCIsXG4gIFwiY2xpZW50X2VtYWlsXCI6IFwiY3VzdG9tZXItYWNjZXNzLWdjckBjb2RlZnJlc2gtZW50ZXJwcmlzZS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbVwiLFxuICBcImNsaWVudF9pZFwiOiBcIjEwNDg1MzIxMDI5NjAwOTUzODM3OFwiLFxuICBcImF1dGhfdXJpXCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGhcIixcbiAgXCJ0b2tlbl91cmlcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdG9rZW5cIixcbiAgXCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmxcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvY2VydHNcIixcbiAgXCJjbGllbnRfeDUwOV9jZXJ0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvY3VzdG9tZXItYWNjZXNzLWdjciU0MGNvZGVmcmVzaC1lbnRlcnByaXNlLmlhbS5nc2VydmljZWFjY291bnQuY29tXCJcbn0iLCJlbWFpbCI6Im9sZWdAY29kZWZyZXNoLmlvIiwiYXV0aCI6IlgycHpiMjVmYTJWNU9uc0tJQ0FpZEhsd1pTSTZJQ0p6WlhKMmFXTmxYMkZqWTI5MWJuUWlMQW9nSUNKd2NtOXFaV04wWDJsa0lqb2dJbU52WkdWbWNtVnphQzFsYm5SbGNuQnlhWE5sSWl3S0lDQWljSEpwZG1GMFpWOXJaWGxmYVdRaU9pQWlPR00wTXpWaFkyWmhNVGRoTTJaaE1tTmhOMlF6WldJM1lUTm1OemMzT1RSaFpHSmpZekU0WkNJc0NpQWdJbkJ5YVhaaGRHVmZhMlY1SWpvZ0lpMHRMUzB0UWtWSFNVNGdVRkpKVmtGVVJTQkxSVmt0TFMwdExWeHVUVWxKUlhablNVSkJSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVTBOQ1MyZDNaMmRUYTBGblJVRkJiMGxDUVZGRVdIcDVSbUpFYkZNdk1GVkVlVnh1WjJNMGVraFRSRlJwYVZOb2FrOWFia1l2ZDJOYVFVMXVlRFZPTmxOT1QydHVTR1JRV1c1UU4yRkZPWEJ6TWxoNGEwNHhOVXN3TWpsR1MzVnBNWGhLTmx4dVVIbG5UVWh5VjJWeWEySnNSMkZZVHpBM1VIaG1jRWRMVURsNVNuUlVha3h5U1VJelNXcGpNbloxZERKSlNXMXdMMHBqTUd4UFRXUjNVVlJLVVhOWVMxeHVZa3RzYlhCalNVTk5kVVppWWxKWlEyWmtjR0Z2VFhWaVJsaGlSM3BzTlZob1JIUjNZbE5pT0RoMU0xZDRRamRoZGxCMlkyOXJZWEZKU21KaGVtTjFNVnh1UkVseU5YWkhRbmd5WWtadlJIWlVTRE12WjJSMVRrUndlVUpIYjBSck1rdGhUbUZXUjJOeU9FMXlTblZoVmtKbVZETmFSbkF4ZVhvcmIwaGhNbTVCZFZ4dWVYWk5PVWcwVHpnNWJHUnZkMDlJT1hkNWJIRldWVkYxV0ZSa1pHbExSRlpqTUdoUFUxSnRaMGQwTDI5RlYwNTJXbkZvZGpKNGVXUXJhWFJsYzNkMk5WeHVRM2hyTDJjNFlWWkJaMDFDUVVGRlEyZG5SVUpCU2pOaFpYaHhRV1pCYzIxbk1uZGxLMGhYTkhrMlkxQTVPRlpZU3pkNWFUbGFla3R3ZFdjd0sycElURnh1UkZWMmRIbDJUamxJZW5JMGVrbFhWRmhJUkRaMGNGVklNRTFCUzFjMVZYSXpaVGhtVUZOeVNWWTJOblUyVm5CM2FsUkRaemsxUldkT1JrczRZbHBOYjF4dWVFWmtkVmxVVmtSRFRVZzFiVzQ1TkZFeGJtTlZZbXczV1dwclJWVXplbTVaTkdWNVVHRk1RV2RuTVdKeVF6RlZkVWhIZDBoelUwWnpkMmhKUW1VMVdseHVPR2hsTURsQmNYbHJjRkJXZGtWTVV6TlFaakJMVHpOSVlUTnNNRTFKUTFnNE1tWklRVlpHY1hCUWJ6RXZUMmhMTDJkWlozWlZSVVkzWTI1TFdVTnFVMXh1ZFN0c01uaFdNRWN3WVVKWFQyOTVheXR6YVZSc1JFdHBlblF6SzJrdmFuVkxSbXhyVVdocFkzazNNRU5zYkU1VWFuUm1MMU5MVDBvNVNHeHVLemR1V1Z4dVMxZzBUbVJYVEc5dVMyOUVXVkZWZFRCWWVVcGlVMXBhUmxCRFFUZDFTV3hNY0hRNFpWVjVUalpyUlVObldVVkJMMk55WVc5WldWWnVZakpHV1dsRlNseHVSRTVNWkRWaU5qUXpPWFpsVldORGFHcHlhVFJ1VFRSV1kyOWxSMFJ6WkZwUWNESkpSWFV3WkdaTlIyVnRVekkyTm1KWVZUQk9RemhHZVdwWloxZHNTRnh1Ym0wNWRYRk5NM1ZwZURCNVEyVnBjMGxhVUhaeFQwSm1PWGxxVVN0UGVVRmpaV2hSTlRsb05GZHVZa292VUdSbFdsSTFabTVyZWxWaFJ5dGpOM2h3WjF4dVlXNXZUUzlNYkZwcFNEWnpPSEpxY2tJdlV6RlBhVEpRVFUxVlEyZFpSVUV5WVN0NE5WZHBTbE50WVVSSlExSkllalZyVG5CUFYwWmlTRmswVVhsdmVseHVka2M0ZW5CNE4xQkRaRGwzUnk4eWNtTk1OMmswUTNBeU5HTlRjbkZIUzA5ak1FaDNabmtyYjJGdGNXRk1hR3c0WkcxMldYcDVLMnR6UkVwdVdIVkJOMXh1VG5CSlNEbDRXSFpzVjIxcU9VZDJXWGdyWTJGS1pGQm5hVXA1V2xCYWNYUlhiR1JEZFdWaWEyMWxPSEI2ZDJNeFMwazBVelpHVlZWM1IyRTFXRWhTUkZ4dU5uaFhjbVJRVHpRck5VVkRaMWxGUVRKeVkyRkxXRGxxVnpWb04zWmlRMWx0ZDNWVGJtRTNObkJxYkZkWkx5OTBaWGhFYjFWSlNYUTJOVU4wTUVWcGRWeHVUMWs0VEU5TWVFNDBSR3RCVmtOUllqUTVUMGN2ZUc5VlRIRldUbmxIUlZKcWNFZGlkbFJCVkhSeFNFaG5Ua05oYm5sc1pISmFNRWxPZG14bE9XeGlhVnh1TjNOa01rTm5aamd5U1Vaek1qSjJXRlp4SzFKWFpIWXJXbUUxYVdkYVEzRnlUR2haVUhWblFrb3JaRGRhYjFwRlZHOTJkVXh4UVdGMVlqQkRaMWxDVmx4dWMxbE9abGx6Y1VFdmJDOXhTRVEwYTNKQlUybEJSRk5KTkZCVUwwRTNUVUZJSzNBcmFFaE9UMWRMV1dsaWNtRTFiVWgwY0dOWE5FSk1Sa2hETlV0R1pGeHVTQzh3VkhCSFozaEdRM2RFY2poaEswOHpRa3hDTVRsWFpWWkZWMGRWUmxkR2VVTktiRkp2VDJkR2NYQnJibUo0U1hKdE5WbElTVWxrVmxWb01ta3dXbHh1TTJwWlNGSnhlVUpMU2xGV2VYRnRWR2RJU2xSQldVMDRlRzVPTjNkTk1HNHdkM29yTm1nM1RUaFJTMEpuUkd0cFlVRk1VblJWUjNWbGRXOXFOMlFyU1Z4dVJtSkdZU3Q2VDBGWVF6ZDNaMjQzYlZkTWQwbzRlbWRGUzJ0MGJqRTFhVkpGV0ZoQ05EaE5TbTVVZUUxNVUxUnRVSFpYYXpSQ1IwOWtPSGxDYlVwWFlWeHVabUpSY2tKcmRWWm9ZbTFMT0ZFeVFuUkdTbnA0U1VsMFFUSTBLMjVWYlVGeGVrTklNMDkwVVZveVkzWTBjMDUzV0RCcWJHWXhNVTFtWVRoRWQyVkhiVnh1WTBNeVZXMTZkREkyWVd4M1NESTVWSFZhZDNacVUya3JYRzR0TFMwdExVVk9SQ0JRVWtsV1FWUkZJRXRGV1MwdExTMHRYRzRpTEFvZ0lDSmpiR2xsYm5SZlpXMWhhV3dpT2lBaVkzVnpkRzl0WlhJdFlXTmpaWE56TFdkamNrQmpiMlJsWm5KbGMyZ3RaVzUwWlhKd2NtbHpaUzVwWVcwdVozTmxjblpwWTJWaFkyTnZkVzUwTG1OdmJTSXNDaUFnSW1Oc2FXVnVkRjlwWkNJNklDSXhNRFE0TlRNeU1UQXlPVFl3TURrMU16Z3pOemdpTEFvZ0lDSmhkWFJvWDNWeWFTSTZJQ0pvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjB2Ynk5dllYVjBhREl2WVhWMGFDSXNDaUFnSW5SdmEyVnVYM1Z5YVNJNklDSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMHZieTl2WVhWMGFESXZkRzlyWlc0aUxBb2dJQ0poZFhSb1gzQnliM1pwWkdWeVgzZzFNRGxmWTJWeWRGOTFjbXdpT2lBaWFIUjBjSE02THk5M2QzY3VaMjl2WjJ4bFlYQnBjeTVqYjIwdmIyRjFkR2d5TDNZeEwyTmxjblJ6SWl3S0lDQWlZMnhwWlc1MFgzZzFNRGxmWTJWeWRGOTFjbXdpT2lBaWFIUjBjSE02THk5M2QzY3VaMjl2WjJ4bFlYQnBjeTVqYjIwdmNtOWliM1F2ZGpFdmJXVjBZV1JoZEdFdmVEVXdPUzlqZFhOMGIyMWxjaTFoWTJObGMzTXRaMk55SlRRd1kyOWtaV1p5WlhOb0xXVnVkR1Z5Y0hKcGMyVXVhV0Z0TG1kelpYSjJhV05sWVdOamIzVnVkQzVqYjIwaUNuMD0ifX0=
