{{- $consulService := printf "http://%s-%s.%s.svc:%v" .Release.Name .Values.global.consulService .Release.Namespace .Values.global.consulHttpPort }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
data:
  # daemon configuration
  daemon.json: |
    {
      "hosts": [ "unix:///var/run/docker.sock",
                 "tcp://0.0.0.0:{{ .Values.containerPort }}"],
      "storage-driver": "overlay",
      "tlsverify": true,
      "tls": true,
      "tlscacert": "/etc/ssl/cf/ca.pem",
      "tlscert": "/etc/ssl/cf/cert.pem",
      "tlskey": "/etc/ssl/cf/key.pem",
      "insecure-registries" : [ {{- range $i, $e := .Values.global.insecureRegistries }} {{- if $i }},{{ end }} {{ $e | quote }} {{- end }} ]
    }
  docker-cleaner: |
    #!/bin/sh
    echo "$0 - $(date)" | tee -a /var/log/cleaner.log
    docker pull {{ .Values.global.dockerRegistry }}codefresh/cf-runtime-cleaner:latest
    docker run --rm --name rt-cleaner -v /var/run/docker.sock:/var/run/docker.sock:rw --label io.codefresh.owner=codefresh -e GRACE_PERIOD_SECONDS=86400 --cpu-shares=10 {{ .Values.global.dockerRegistry }}codefresh/cf-runtime-cleaner:latest ./docker-gc >> /var/log/cleaner.log 2>&1
  
  # register runner
  register: |
    #!/bin/sh
    set -e
    NODE_NAME="$1"
    NODE_ADDRESS="$1.$2"
    PUBLIC_IP="$3"
    CONSUL="{{ $consulService }}"
    ACCOUNT=codefresh
    ROLE=runner
    PROVIDER='
    {
      "name": "kube-nodes", 
      "type": "internal"
    }'
    SYSTEM_DATA='{"os_name": "dind"}'
    NODE_SERVICE='
    {
      "Node": "'${NODE_NAME}'",
      "Address": "'${NODE_ADDRESS}'",
      "Service": {
        "Service": "docker-node",
        "Tags": [
          "dind",
          "noagent",
          "account_codefresh",
          "type_runner"
        ],
        "Address": "'${NODE_ADDRESS}'",
        "Port": {{ .Values.containerPort }}
      },
      "Check": {
        "Node": "",
        "CheckID": "service:docker-node",
        "Name": "Remote Node Check",
        "Notes": "Check runner is up and running",
        "Output": "Runner alive and reachable",
        "Status": "passing",
        "ServiceID": "docker-node"
      }
    }'
    echo "Registering dind node ($NODE_NAME) in consul. Configuration: ${NODE_SERVICE}"
    curl -X PUT -d "${NODE_SERVICE}" ${CONSUL}/v1/catalog/register
    curl -X PUT -d "${PUBLIC_IP}" ${CONSUL}/v1/kv/services/docker-node/${NODE_NAME}/publicAddress
    curl -X PUT -d "${ACCOUNT}" ${CONSUL}/v1/kv/services/docker-node/${NODE_NAME}/account
    curl -X PUT -d "${ROLE}" ${CONSUL}/v1/kv/services/docker-node/${NODE_NAME}/role
    curl -X PUT -d "${PROVIDER}" ${CONSUL}/v1/kv/services/docker-node/${NODE_NAME}/systemData
    curl -X PUT -d "${SYSTEM_DATA}" ${CONSUL}/v1/kv/services/docker-node/${NODE_NAME}/provider
