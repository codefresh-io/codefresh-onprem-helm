{{- $registryService := printf "%s-%s.%s.svc:%v" .Release.Name .Values.global.registryService .Release.Namespace .Values.global.registryPort }}

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ default 1 .Values.replicaCount }}
  template:
    metadata:
      annotations:
      {{- if .Values.redeploy }}
        forceRedeployUniqId: {{ now | quote }}
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/runner-cm.yaml") . | sha256sum }}
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
      {{- if .Values.tolerations }}
      tolerations:
        - key: {{ .Values.tolerations.key | quote }}
          operator: {{ .Values.tolerations.operator | quote }}
          value: {{ .Values.tolerations.value | quote }}
          effect: {{ .Values.tolerations.effect | quote }}
      {{- end }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
      - name: register-runner-container
        image: alexeiled/curl:3.6
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        command: ["/bin/sh", "-c", "chmod +x /opt/dind/register && /opt/dind/register ${POD_NAME} {{ template "fullname" . }}.{{ .Release.Namespace }}.svc {{ .Values.global.appUrl }}"]
        volumeMounts:
        - name: runner-config
          mountPath: /opt/dind/register
          subPath: register
      containers:
      - image: {{ .Values.global.dindImage | quote }}
        name: {{ template "fullname" . }}
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        resources:
          limits:
            cpu: {{ .Values.global.dindCPULimits }}
            memory: {{ .Values.global.dindMemoryLimits }}
          requests:
            cpu: {{ .Values.global.dindCPU }}
            memory: {{ .Values.global.dindMemory }}
        securityContext:
          privileged: true
        ports:
        - containerPort: {{ .Values.containerPort }}
          protocol: TCP
        env:
        {{- if .Values.global.env }}
        {{- range $key, $value := .Values.global.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end}}
        {{- end}}
        {{- with .Values.global.tlsRejectUnauthorized }}
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: {{ .Values.global.tlsRejectUnauthorized | quote }}
        {{- end }}
        - name: RUNTIME_LOCAL_REGISTRY_NAME
          value: {{ $registryService | quote }}
        command:
          - "/bin/sh"
          - "-c"
          - |
            rm -fv /var/run/docker.pid
            mkdir /var/run/codefresh
            mkdir -p /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/
            cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/${RUNTIME_LOCAL_REGISTRY_NAME}/ca.crt
            dockerd
        volumeMounts:
        - mountPath: /etc/ssl/cf
          readOnly: true
          name: cf-certs
        - mountPath: /etc/docker/daemon.json
          name: runner-config
          readOnly: true
          subPath: daemon.json
        {{- if .Values.global.addResolvConf }}
        - mountPath: /etc/resolv.conf
          name: resolvconf
          subPath: resolv.conf
          readOnly: true
        {{- end }}
      volumes:
      - name: cf-certs
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-certs-client"
      - name: runner-config
        configMap:
          name: {{ template "fullname" . }}
      {{- if .Values.global.addResolvConf }}
      - name: resolvconf
        configMap:
          name: {{ .Release.Name }}-{{ .Values.global.codefresh }}-resolvconf
      {{- end }}