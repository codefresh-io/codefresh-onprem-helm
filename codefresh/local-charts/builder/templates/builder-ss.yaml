{{- $registryService := printf "%s-%s.%s.svc:%v" .Release.Name .Values.global.registryService .Release.Namespace .Values.global.registryPort }}

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ default 2 .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}  
  template:
    metadata:
      annotations:
      {{- if .Values.redeploy }}
        forceRedeployUniqId: {{ now | quote }}
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/builder-cm.yaml") . | sha256sum }}
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name  | quote }}
        heritage: {{ .Release.Service  | quote }}
    spec:
      {{- if .Values.tolerations }}
      tolerations:
        - key: {{ .Values.tolerations.key | quote }}
          operator: {{ .Values.tolerations.operator | quote }}
          value: {{ .Values.tolerations.value | quote }}
          effect: {{ .Values.tolerations.effect | quote }}
      {{- end }}
      initContainers:
      - name: register-builder-container
        image: alexeiled/curl:3.6
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        command: ["/bin/sh", "-c", "cp -L /opt/dind/register /usr/local/bin/ && chmod +x /usr/local/bin/register && /usr/local/bin/register ${POD_NAME} {{ template "fullname" . }}.{{ .Release.Namespace}}.svc"]
        volumeMounts:
        - name: builder-config
          mountPath: /opt/dind/register
          subPath: register
      containers:
      - image: {{ .Values.global.dindImage | quote }}
        name:  {{ template "fullname" . }}
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        resources:
          limits:
            cpu: {{ .Values.global.dindCPULimits }}
            memory: {{ .Values.global.dindMemoryLimits }}
          requests:
            cpu: {{ .Values.global.dindCPU }}
            memory: {{ .Values.global.dindMemory }}
        securityContext:
          privileged: true
        ports:
        - containerPort: {{ .Values.containerPort }}
          protocol: TCP
        env:
        {{- if .Values.global.env }}
        {{- range $key, $value := .Values.global.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end}}
        {{- end}}
        {{- with .Values.global.tlsRejectUnauthorize }}
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: {{ .Values.global.tlsRejectUnauthorized | quote }}
        {{- end }}
        - name: RUNTIME_LOCAL_REGISTRY_NAME
          value: {{ $registryService | quote }}
        {{- if .Values.dockerCleanerCron }}
        - name: DOCKER_CLEANER_CRON
          value: {{ .Values.dockerCleanerCron | quote }}
        {{- end }}
        command:
          - "/bin/sh"
          - "-c"
          - |
            rm -fv /var/run/docker.pid
            mkdir /var/run/codefresh
            mkdir -p /etc/docker/certs.d/$(RUNTIME_LOCAL_REGISTRY_NAME)/
            cp /etc/ssl/cf/ca.pem /etc/docker/certs.d/$(RUNTIME_LOCAL_REGISTRY_NAME)/ca.crt
            dockerd {{ if .Values.global.mtu }}--mtu {{ .Values.global.mtu }}{{ end }}
        volumeMounts:
        - mountPath: /etc/ssl/cf
          readOnly: true
          name: cf-certs
        - mountPath: /etc/docker/daemon.json
          name: builder-config
          readOnly: true
          subPath: daemon.json
        {{- if .Values.global.addResolvConf }}
        - mountPath: /etc/resolv.conf
          name: resolvconf
          subPath: resolv.conf
          readOnly: true
        {{- end }}
        {{- if .Values.varLibDockerVolume }}
        - mountPath: /var/lib/docker
          name: varlibdocker
        {{- end }}
      volumes:
      - name: cf-certs
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-certs-client"
      - name: builder-config
        configMap:
          name: {{ template "fullname" . }}
      {{- if .Values.global.addResolvConf }}
      - name: resolvconf
        configMap:
          name: {{ .Release.Name }}-{{ .Values.global.codefresh }}-resolvconf
      {{- end }}
  {{- if .Values.varLibDockerVolume }}
  volumeClaimTemplates:
  - metadata:
      name: varlibdocker
    spec:
      accessModes: [ {{ .Values.varLibDockerVolume.accessMode | quote }} ]
      storageClassName: {{ .Values.varLibDockerVolume.storageClass | quote }}
      resources:
        requests:
          storage: {{ .Values.varLibDockerVolume.storageSize }}
  {{- end }}
