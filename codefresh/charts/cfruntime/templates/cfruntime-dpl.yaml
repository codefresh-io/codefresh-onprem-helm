{{- $registryService := printf "%s-%s.%s.svc:%v" .Release.Name .Values.global.registryService .Release.Namespace .Values.global.registryPort }}
{{- $natsService := printf "nats://%s-%s.%s.svc:%v" .Release.Name .Values.global.natsService .Release.Namespace .Values.global.natsPort }}

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name  | quote }}
    heritage: {{ .Release.Service  | quote }}
    version: {{ .Values.imageTag | quote }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name  | quote }}
        heritage: {{ .Release.Service  | quote }}
        version: {{ .Values.imageTag | quote }}
    spec:
      imagePullSecrets:
        - name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-registry"
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: FIREBASE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: firebase-secret
        - name: FIREBASE_URL
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: firebase-url
        - name: NEWRELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: newrelic-license-key
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: {{ .Values.global.tlsRejectUnauthorized | quote }}
        - name: LOGGLY_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: loggly-token
        - name: CONSUL_HOST
          value: "{{ .Release.Name }}-{{ .Values.global.consulService }}"
        - name: QUEUE_SERVERS
          value: {{ $natsService | quote }}
        - name: RABBIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: rabbitmq-password
        - name: RABBIT_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: rabbitmq-username
        - name: RABBIT_URL
          value: "amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@{{ .Release.Name }}-{{ .Values.global.rabbitService }}"
        - name: POSTGRES_HOST
          value: "{{ .Release.Name }}-{{ .Values.global.postgresService }}" 
        - name: POSTGRES_DATABASE
          value: {{ .Values.global.postgresDatabase }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: postgres-password
        - name: REDIS_URL
          value: "{{ .Release.Name }}-{{ .Values.global.redisService }}" 
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: redis-password 
        - name: DOCKER_PUSHER_IMAGE
          value: "{{ .Values.pusherImage }}:{{ .Values.pusherImageTag }}"
        - name: DOCKER_PULLER_IMAGE
          value: "{{ .Values.pullerImage }}:{{ .Values.pullerImageTag }}"
        - name: DOCKER_BUILDER_IMAGE
          value: "{{ .Values.builderImage }}:{{ .Values.builderImageTag }}"
        - name: CONTAINER_LOGGER_IMAGE
          value: "{{ .Values.loggerImage }}:{{ .Values.loggerImageTag }}"
        - name: GIT_CLONE_IMAGE
          value: "{{ .Values.gitCloneImage }}:{{ .Values.gitCloneImageTag }}"
        - name: RUNTIME_LOCAL_REGISTRY_NAME
          value: {{ $registryService | quote }}
        volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: cf-certs
          mountPath: /etc/ssl/cf/
          readOnly: true
        - name: internal-registry
          mountPath: /etc/admin/internal-registry.json
          subPath: internal-registry.json
        - name: additional-internal-registries
          mountPath: /etc/admin/additional-internal-registries.json
          subPath: additional-internal-registries.json
        - name: resource-limitations
          mountPath: /etc/admin/resource-limitations.json
          subPath: resource-limitations.json
        securityContext:
          privileged: true
      volumes:
      - name: cf-certs
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-cf-certs"
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: internal-registry
        configMap:
          name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-registry"
      - name: additional-internal-registries
        configMap:
          name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-registry"
      - name: resource-limitations
        configMap:
          name: {{ template "fullname" . }}-resource-limitations