# kind: scheduler-kubernetes
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name  | quote }}
    heritage: {{ .Release.Service  | quote }}
    version: {{ .Values.imageTag | quote }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 50%
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name  | quote }}
        heritage: {{ .Release.Service  | quote }}
        version: {{ .Values.imageTag | quote }}
    spec:
      imagePullSecrets:
        - name: "{{ .Release.Name }}-{{ .Values.codefreshService }}-registry"
      terminationGracePeriodSeconds: 40
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: GOOGLE_KUBE_SERVICE_URI
          value: "http://cf-google-auth"
        - name: BL_USERS
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}" 
              key: segment-blacklist-users
        - name: ACTIVITY_LOG_URI
          value: http://activity-log
        - name: PAYMENTS_SERVICE
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: payments-service
        - name: PAYMENTS_URI
          value: http://$(PAYMENTS_SERVICE)
        - name: PORT
          value: {{ .Values.port | quote }}
        - name: INTERNAL_SERVER_PORT
          value: {{ .Values.targetInternalPort | quote }}
        - name: PROTOCOL
          value: {{ .Values.global.appProtocol | quote }}
        - name: EXTERNAL_URL
          value: "{{ .Values.global.appProtocol }}://{{ .Values.global.appUrl }}"
        - name: MONGO_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: mongodb-user
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: mongodb-password
        - name: MONGO_URI
          value: "mongodb://$(MONGO_USER):$(MONGO_PASSWORD)@{{ .Release.Name }}-{{ .Values.global.mongoService }}.{{ .Release.Namespace }}:{{ .Values.global.mongoPort }}/{{ .Values.global.mongoDatabase }}"
        - name: CONSUL_HOST
          value: "{{ .Release.Name }}-{{ .Values.global.consulService }}.{{ .Release.Namespace }}"
        - name: QUEUE_SERVERS
          value: "nats://{{ .Release.Name }}-{{ .Values.global.natsService }}.{{ .Release.Namespace }}:{{ .Values.global.natsPort }}"
        - name: RABBIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: rabbitmq-password
        - name: RABBIT_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: rabbitmq-username
        - name: RABBIT_URL
          value: "amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@{{ .Release.Name }}-{{ .Values.global.rabbitService }}.{{ .Release.Namespace }}"
        - name: POSTGRES_SERVICE
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: postgres-service
        - name: POSTGRES_HOST
          value: "{{ .Release.Name }}-$(POSTGRES_SERVICE).{{ .Release.Namespace }}" 
        - name: POSTGRES_DATABASE
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: postgres-database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: postgres-password
        - name: REDIS_URL
          value: "{{ .Release.Name }}-{{ .Values.global.redisService }}.{{ .Release.Namespace }}" 
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: redis-password
        - name: GITHUB_API_HOST
          value: {{ .Values.github.apiHost | quote }}
        - name: GITHUB_API_PATH_PREFIX
          value: {{ .Values.github.apiPathPrefix | quote }}
        - name: GITHUB_LOGIN_HOST
          value: {{ .Values.github.loginHost | quote }}
        - name: GITHUB_PROTOCOL
          value: {{ .Values.github.protocol | quote }}
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: github-client-id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: github-client-secret
        - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: github-internal-token
        - name: GITLAB_LOGIN_HOST
          value: {{ .Values.gitlab.loginHost | quote }}
        - name: GITLAB_PROTOCOL
          value: {{ .Values.gitlab.protocol | quote }}
        - name: GITLAB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: gitlab-client-id
        - name: GITLAB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: gitlab-client-secret
        - name: BITBUCKET_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: bitbucket-client-id
        - name: BITBUCKET_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: bitbucket-client-secret
        - name: API_SAFE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: api-safe-secret
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: stripe-secret-key
        - name: FIREBASE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: firebase-secret
        - name: FIREBASE_URL
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: firebase-url
        - name: SLACK_APP_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: slack-app-id
        - name: SLACK_INTERNAL
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: slack-internal
        - name: SLACK_APP_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: slack-app-secret
        - name: SEGMENT_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: segment-key
        - name: SEGMENT_ACTIVE
          value: {{ .Values.segmentEnable | quote }}
        - name: NEWRELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: newrelic-license-key
        - name: LOGGLY_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: loggly-token
        - name: TLS_SIGN_CLIENT_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: tls-client-key 
        - name: OAUTH_ROUTER_CALLBACK
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: oauth-router-callback
        - name: GOOGLE_COMPUTE_ENGINE_PROJECT
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: google-compute-engine-project
        - name: CF_REGISTRY_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: cfcr-domain
        - name: CF_REGISTRY_API_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: reg-auth-api-key
        - name: CF_REGISTRY_ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
              key: registry-admin-token
        ports:
        - containerPort: {{ .Values.port }}
          protocol: TCP
        - containerPort: {{ .Values.targetInternalPort }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /api/ping
            port: {{ .Values.readinessPort }}
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: config
          mountPath: /etc/admin/providers.json
          subPath: providers.json
        - name: config
          mountPath: /etc/admin/accounts.json
          subPath: accounts.json
        - name: config
          mountPath: /etc/admin/users.json
          subPath: users.json
        - mountPath: /etc/admin/hosts.added
          name: etc-hosts
          subPath: hosts-app
        - name: runtime-environments
          mountPath: /etc/admin/runtimeEnvironments.json
          subPath: runtimeEnvironments.json
        - name: node-clusters
          mountPath: /root/.kube/config
          subPath: kube-config
        - mountPath: /etc/ssl/cf/
          readOnly: true
          name: cf-certs-client
      volumes:
      - name: config
        configMap:
          name: {{ template "fullname" . }}
      - name: etc-hosts
        configMap:
          name: "{{ .Release.Name }}-{{ .Values.codefreshService }}-etc-hosts"
      - name: runtime-environments
        configMap:
          name: "{{ .Release.Name }}-{{ .Values.codefreshService }}-runtime-envs"
      - name: node-clusters
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.codefreshService }}-node-clusters"
      - name: cf-certs-client
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.codefreshService }}-certs-client"
      restartPolicy: Always