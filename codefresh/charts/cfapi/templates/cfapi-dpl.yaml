{{- $natsService := printf "nats://%s-%s.%s.svc:%v" .Release.Name .Values.global.natsService .Release.Namespace .Values.global.natsPort }}
{{- $tlsSignService := printf "http://%s-%s.%s.svc:%v" .Release.Name .Values.global.tlsSignService .Release.Namespace .Values.global.tlsSignPort }}

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name  | quote }}
    heritage: {{ .Release.Service  | quote }}
    version: {{ .Values.imageTag | quote }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 50%
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      {{- if .Values.redeploy }}
      annotations:
        forceRedeployUniqId: {{ now | quote }}
      {{- end }}
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name  | quote }}
        heritage: {{ .Release.Service  | quote }}
        version: {{ .Values.imageTag | quote }}
    spec:
      affinity:
{{ toYaml (default .Values.global.appServiceAffinity .Values.affinity) | indent 8 }}
      imagePullSecrets:
        - name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-registry"
      terminationGracePeriodSeconds: 40
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - |
                  cat /etc/admin/hosts.added >> /etc/hosts
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: API_SAFE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: api-safe-secret
        - name: BITBUCKET_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: bitbucket-client-id
        - name: BITBUCKET_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: bitbucket-client-secret
        - name: BL_USERS
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: segment-blacklist-users
        - name: CF_HOST_NAME
          value: {{ .Values.global.appUrl | quote }}
        - name: CF_REGISTRY_PROTOCOL
          value: {{ default "http" .Values.internalRegistryProtocol | quote }}
        - name: CF_REGISTRY_ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: registry-admin-token
        - name: CF_REGISTRY_API_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: reg-auth-api-key
        - name: CF_REGISTRY_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: cfcr-domain
        - name: DEPLOYMENT_TEMPLATE_IMAGES_JSON_PATH
          value: /etc/admin/runtimeEnvironments.json
        - name: CLUSTER_PROVIDERS_URI
          value: "{{ .Release.Name }}-{{ .Values.global.clusterProvidersService }}"
        - name: CLUSTER_PROVIDERS_PORT
          value: "{{ .Values.global.clusterProvidersPort }}"
        - name: MULTIPLE_CLUSTERS_URI
          value: "{{ .Release.Name }}-{{ .Values.global.multipleClustersService }}"
        - name: MULTIPLE_CLUSTERS_PORT
          value: "{{ .Values.global.multipleClustersPort }}"
        - name: CONSUL_HOST
          value: {{ default (printf "%s-%s" .Release.Name .Values.global.consulService) .Values.global.consulHost | quote }}
        - name: EXTERNAL_URL
          value: {{ default (printf "%s://%s" .Values.global.appProtocol .Values.global.appUrl) .Values.global.externalUrl }}
        - name: FIREBASE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: firebase-secret
        - name: FIREBASE_URL
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: firebase-url
        - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: github-internal-token
        - name: INTERNAL_SERVER_PORT
          value: {{ .Values.targetInternalPort | quote }}
        - name: GITHUB_API_HOST
          value: {{ .Values.github.apiHost | quote }}
        - name: GITHUB_API_PATH_PREFIX
          value: "{{ .Values.github.apiPathPrefix }}"
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: github-client-id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: github-client-secret
        - name: GITHUB_LOGIN_HOST
          value: {{ .Values.github.loginHost | quote }}
        - name: GITHUB_PROTOCOL
          value: {{ .Values.github.protocol | quote }}
        - name: GITLAB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: gitlab-client-id
        - name: GITLAB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name:  {{ template "fullname" . }}
              key: gitlab-client-secret
        - name: GITLAB_LOGIN_HOST
          value: {{ .Values.gitlab.loginHost | quote }}
        - name: GITLAB_PROTOCOL
          value: {{ .Values.gitlab.protocol | quote }}
        - name: GOOGLE_COMPUTE_ENGINE_PROJECT
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: google-compute-engine-project
        - name: LOGGLY_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: loggly-token
        - name: MONGO_URI
          {{ if .Values.global.mongoURI }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: mongo-uri
          {{ else }}
          value: "mongodb://{{ .Values.global.mongodbUsername }}:{{ .Values.global.mongodbPassword }}@{{ .Release.Name }}-{{ .Values.global.mongoService }}:{{ .Values.global.mongoPort }}/{{ .Values.global.mongodbDatabase }}"
          {{ end }}
        - name: NEWRELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: newrelic-license-key
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: {{ .Values.global.tlsRejectUnauthorized | quote }}
        - name: PAYMENTS_SERVICE
          value: "{{ .Release.Name }}-{{ .Values.global.paymentsService }}"
        - name: PAYMENTS_URI
          value: $(PAYMENTS_SERVICE)
        - name: PAYMENTS_PORT
          value: {{ .Values.global.paymentsServicePort | quote }}
        - name: PORT
          value: {{ .Values.port | quote }}
        - name: POSTGRES_DATABASE
          value: {{ .Values.global.postgresDatabase }}
        - name: POSTGRES_HOST
          value: {{ default (printf "%s-%s" .Release.Name .Values.global.postgresService) .Values.global.postgresHostname | quote }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: postgres-password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: postgres-user
        - name: PROTOCOL
          value: {{ .Values.global.appProtocol | quote }}
        - name: RABBIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: rabbitmq-password
        - name: RABBIT_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: rabbitmq-username
        - name: RABBIT_URL
          value: amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@{{ default (printf "%s-%s" .Release.Name .Values.global.rabbitService) .Values.global.rabbitmqHostname }}
        - name: REDIS_URL
          value: {{ default (printf "%s-%s" .Release.Name .Values.global.redisService) .Values.global.redisUrl }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: redis-password
        - name: QUEUE_SERVERS
          value: {{ default $natsService .Values.global.queueServers | quote }}
        - name: SLACK_APP_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: slack-app-id
        - name: SLACK_APP_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: slack-app-secret
        - name: SLACK_INTERNAL
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: slack-internal
        - name: SEGMENT_ACTIVE
          value: {{ .Values.segmentEnable | quote }}
        - name: SEGMENT_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: segment-key
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: stripe-secret-key
        - name: TLS_SIGN_CLIENT_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
              key: tls-client-key
        - name: TLS_SIGN_URL
          value: "{{ $tlsSignService }}"
        - name: CLUSTER_PROVIDERS_URI
          value: "{{ .Release.Name }}-{{ .Values.global.clusterProvidersService }}"
        - name: CLUSTER_PROVIDERS_PORT
          value: {{ .Values.global.clusterProvidersPort | quote }}
        - name: KUBE_INTEGRATION_URI
          value: "{{ .Release.Name }}-{{ .Values.global.kubeIntegrationService }}"
        - name: KUBE_INTEGRATION_PORT
          value: {{ .Values.global.kubeIntegrationPort | quote }}
        - name: ACCOUNTS_REFERRALS_URI
          value: "{{ .Release.Name }}-{{ .Values.global.accountsReferralsService }}"
        - name: ACCOUNTS_REFERRALS_PORT
          value: {{ .Values.global.accountsReferralsPort | quote }}
        - name: MULTIPLE_CLUSTERS_URI
          value: "{{ .Release.Name }}-{{ .Values.global.multipleClustersService }}"
        - name: MULTIPLE_CLUSTERS_PORT
          value: {{ .Values.global.multipleClustersPort | quote }}
        - name: DIND_PROVIDER_URI
          value: "{{ .Release.Name }}-{{ .Values.global.dindProviderService }}"
        - name: DIND_PROVIDER_PORT
          value: {{ .Values.global.dindProviderPort | quote }}
        {{- if .Values.deploymentTemplateImages }}
        - name: DEPLOYMENT_TEMPLATE_IMAGES_JSON_PATH
          value: /etc/admin/deploymentTemplateImages.json
        {{- end }}
        #- name: OAUTH_ROUTER_CALLBACK
        #  valueFrom:
        #    configMapKeyRef:
        #      name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
        #      key: oauth-router-callback
        ports:
        - containerPort: {{ .Values.port }}
          protocol: TCP
        - containerPort: {{ .Values.targetInternalPort }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /api/ping
            port: {{ .Values.port }}
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: config
          mountPath: /etc/admin/providers.json
          subPath: providers.json
        - name: config
          mountPath: /etc/admin/accounts.json
          subPath: accounts.json
        - name: config
          mountPath: /etc/admin/users.json
          subPath: users.json
        - mountPath: /etc/admin/hosts.added
          name: etc-hosts
          subPath: hosts-app
        - name: runtime-environments
          mountPath: /etc/admin/runtimeEnvironments.json
          subPath: runtimeEnvironments.json
        - name: node-clusters
          mountPath: /root/.kube/config
          subPath: kube-config
        - mountPath: /etc/ssl/cf/
          readOnly: true
          name: cf-certs-client
        {{- if .Values.awsCredentials }}
        - name: api-secrets-aws
          mountPath: /root/.aws/credentials
          subPath: aws-credentials
        {{- end }}
        {{- if .Values.gceCredentials }}
        - name: api-secrets-gce
          mountPath: /etc/admin/gce_creds.json
          subPath: gce-credentials
        {{- end }}
        {{- if .Values.deploymentTemplateImages }}
        - name: config
          mountPath: /etc/admin/deploymentTemplateImages.json
          subPath: deploymentTemplateImages.json
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "fullname" . }}
      - name: etc-hosts
        configMap:
          name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-etc-hosts"
      - name: runtime-environments
        configMap:
          name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-runtime-envs"
      - name: node-clusters
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-node-clusters"
      - name: cf-certs-client
        secret:
          {{- if .Values.global.clientCertsCA }}
          secretName: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-certs-client"
          {{ else }}
          secretName: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-cf-certs"
          {{- end}}
      {{- if .Values.awsCredentials }}
      - name: api-secrets-aws
        secret:
          secretName: {{ template "fullname" . }}
      {{- end }}
      {{- if .Values.gceCredentials }}
      - name: api-secrets-gce
        secret:
          secretName: {{ template "fullname" . }}
      {{- end }}
      restartPolicy: Always
