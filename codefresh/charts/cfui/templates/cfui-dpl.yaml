# kind: scheduler-kubernetes
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name  | quote }}
    heritage: {{ .Release.Service  | quote }}
    version: {{ .Values.imageTag | quote }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 50%
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name  | quote }}
        heritage: {{ .Release.Service  | quote }}
        version: {{ .Values.imageTag | quote }} 
    spec:
      imagePullSecrets:
        - name: "{{ .Release.Name }}-{{ .Values.codefreshService }}-registry"
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        env:
          {{- range $key, $value := .Values.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          - name: PORT
            value: {{ .Values.port | quote }}
          - name: CODEFRESH_API_URL
            value: "{{ .Values.global.appProtocol }}://{{ .Values.global.appUrl }}"
          - name: QUEUE_SERVERS
            value: "nats://{{ .Release.Name }}-{{ .Values.global.natsService }}.{{ .Release.Namespace }}:{{ .Values.global.natsPort }}"
          # Rabbitmq environment variables
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: rabbitmq-password
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: rabbitmq-username
          - name: RABBIT_URL
            value: "amqp://$(RABBIT_USER):$(RABBIT_PASSWORD)@{{ .Release.Name }}-{{ .Values.global.rabbitService }}.{{ .Release.Namespace }}"
          # PostresSQL environment variables
          - name: POSTGRES_SERVICE
            valueFrom:
              configMapKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: postgres-service
          - name: POSTGRES_HOST
            value: "{{ .Release.Name }}-$(POSTGRES_SERVICE).{{ .Release.Namespace }}" 
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: postgres-database
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: postgres-user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: postgres-password
          - name: ROLLBAR_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: rollbar-access-token
          # Redis environment variables
          - name: REDIS_URL
            value: "{{ .Release.Name }}-{{ .Values.global.redisService }}.{{ .Release.Namespace }}" 
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: redis-password
          - name: STRIPE_PUBLIC_KEY
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: stripe-public-key
          # other licenses and keys
          - name: NEWRELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: newrelic-license-key
          - name: SEGMENT_KEY
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: segment-key
          - name: LOGGLY_TOKEN
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: loggly-token
          - name: SLACK_APP_ID
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: slack-app-id
          - name: SLACK_REDIRECTURI
            value: $(CODEFRESH_API_URL)/slack-return
          - name: WALKME
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: walkme-url
          - name: LAUNCH_DARKLY_KEY
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: launchdarkly-key
          - name: CF_REGISTRY_DOMAIN
            valueFrom:
              configMapKeyRef:
                name: "{{ .Release.Name }}-{{ .Values.codefreshService }}"
                key: cfcr-domain
        ports:
        - containerPort: {{ .Values.port }}
          protocol: TCP