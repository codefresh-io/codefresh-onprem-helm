# kind: scheduler-kubernetes
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name  | quote }}
    heritage: {{ .Release.Service  | quote }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 50%
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name  | quote }}
        heritage: {{ .Release.Service  | quote }}
    spec:
      terminationGracePeriodSeconds: 40
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: PORT
          value: {{ .Values.port | quote }}
        - name: PROTOCOL
          value: {{ .Values.protocol | quote }}
        - name: EXTERNAL_URL
          value: {{ .Values.appUrl | quote }}
        - name: CF_HOST_NAME
          value: {{ .Values.appUrl | quote }}
        - name: MONGO_URI
        {{- if and ((.Values.mongodbUsername) (.Values.mongodbPassword)) }}
          value: "mongodb://{{ .Values.mongodbUser }}:{{ .Values.mongodbPassword }}@{{ .Release.Name }}-{{ .Values.mongodbService }}.{{ .Release.Namespace }}:27017/{{ .Values.mongodbDatabase }}"
        {{- else }}
          value: "mongodb://{{ .Release.Name }}-{{ .Values.mongodbService }}.{{ .Release.Namespace }}:27017/{{ .Values.mongodbDatabase }}"
        {{- end }}
        - name: CONSUL_HOST
          value: "{{ .Release.Name }}-{{ .Values.consulService }}.{{ .Release.Namespace }}"
        - name: QUEUE_SERVERS
          value: "nats://{{ .Release.Name }}-{{ .Values.natsService }}.{{ .Release.Namespace }}:{{ .Values.natsServicePort }}"
        - name: RABBIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.rabbitmqService }}"
              key: rabbitmq-password
        - name: RABBIT_URL
        {{- if .Values.rabbitmqUsername }}
          {{- if .Values.rabbitmqPassword }}
          value: "amqp://{{ .Values.rabbitmqUsername }}:{{ .Values.rabbitmqPassword }}@{{ .Release.Name }}-{{ .Values.rabbitmqService }}.{{ .Release.Namespace }}"
          {{- else }}
          # get RabbitMQ password from RABBIT_PASSWORD ENV - loaded from secret
          value: "amqp://{{ .Values.rabbitmqUsername }}:$(RABBIT_PASSWORD)@{{ .Release.Name }}-{{ .Values.rabbitmqService }}.{{ .Release.Namespace }}"
          {{- end }}
        {{- else }}
          value: "amqp://{{ .Release.Name }}-{{ .Values.rabbitmqService }}.{{ .Release.Namespace }}"
        {{- end }}
        - name: POSTGRES_HOST
          value: "{{ .Release.Name }}-{{ .Values.postgresService }}.{{ .Release.Namespace }}" 
        - name: POSTGRES_DATABASE
          value: {{ .Values.postgresDatabase | quote }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresUser | quote }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.postgresService }}"
              key: postgres-password
        - name: REDIS_URL
          value: "{{ .Release.Name }}-{{ .Values.redisService }}.{{ .Release.Namespace }}" 
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Values.redisService }}"
              key: redis-password
        - name: GITHUB_API_HOST
          value: {{ .Values.github.apiHost | quote }}
        - name: GITHUB_API_PATH_PREFIX
          value: {{ .Values.github.apiPathPrefix | quote }}
        - name: GITHUB_LOGIN_HOST
          value: {{ .Values.github.loginHost | quote }}
        - name: GITHUB_PROTOCOL
          value: {{ .Values.github.protocol | quote }}
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: github-client-id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: github-client-secret
        - name: INTERNAL_USE_GITHUB_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: github-internal-token
        - name: GITLAB_LOGIN_HOST
          value: {{ .Values.gitlab.loginHost | quote }}
        - name: GITLAB_PROTOCOL
          value: {{ .Values.gitlab.protocol | quote }}
        - name: GITLAB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: gitlab-client-id
        - name: GITLAB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: gitlab-client-secret
        - name: BITBUCKET_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: bitbucket-client-id
        - name: BITBUCKET_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: bitbucket-client-secret
        - name: API_SAFE_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: api-safe-secret
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: stripe-secret-key
        - name: FIREBASE_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: firebase-secret
        - name: FIREBASE_URL
          value: {{ .Values.firebaseUrl | quote }}
        - name: SLACK_APP_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: slack-app-id
        - name: SLACK_INTERNAL
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: slack-internal
        - name: SLACK_APP_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: slack-app-secret
        - name: SEGMENT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: segment-key
        - name: SEGMENT_ACTIVE
          value: {{ .Values.segmentEnable | quote }}
        - name: NEWRELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: newrelic-license-key
        - name: LOGGLY_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: loggly-token
        - name: TLS_SIGN_CLIENT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: tls-client-key 
        ports:
        - containerPort: {{ .Values.port }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /api/ping
            port: {{ .Values.readinessPort }}
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: providers
          mountPath: /etc/admin/providers.json
          subPath: providers.json
        - name: seed
          mountPath: /etc/admin/accounts.json
          subPath: accounts.json
        - name: seed
          mountPath: /etc/admin/users.json
          subPath: users.json
      volumes:
      - name: providers
        configMap:
          name: providers
      - name: seed
        configMap:
          name: seed
      restartPolicy: Always